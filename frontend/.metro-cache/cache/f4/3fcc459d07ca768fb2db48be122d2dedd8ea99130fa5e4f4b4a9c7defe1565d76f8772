{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/get","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"7RhWyTq5i/X0UNOgMT1VkjxHPX0=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"./binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":67,"index":123}}],"key":"n3k3ricg147CfAsjRPov5+2UD6U=","exportNames":["*"]}},{"name":"./is-binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":53,"index":177}}],"key":"nI6Cd4R9sJDIQIUaBK8/eqMqCAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.protocol = exports.PacketType = exports.Encoder = exports.Decoder = void 0;\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _get2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/get\"));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/inherits\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[6], \"@babel/runtime/helpers/createClass\"));\n  var _componentEmitter = require(_dependencyMap[7], \"@socket.io/component-emitter\");\n  var _binary = require(_dependencyMap[8], \"./binary.js\");\n  var _isBinary = require(_dependencyMap[9], \"./is-binary.js\");\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  var RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  var protocol = exports.protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (exports.PacketType = PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  var Encoder = exports.Encoder = /*#__PURE__*/function () {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    function Encoder(replacer) {\n      (0, _classCallCheck2.default)(this, Encoder);\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    return (0, _createClass2.default)(Encoder, [{\n      key: \"encode\",\n      value: function encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n          if ((0, _isBinary.hasBinary)(obj)) {\n            return this.encodeAsBinary({\n              type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n              nsp: obj.nsp,\n              data: obj.data,\n              id: obj.id\n            });\n          }\n        }\n        return [this.encodeAsString(obj)];\n      }\n      /**\n       * Encode packet as string.\n       */\n    }, {\n      key: \"encodeAsString\",\n      value: function encodeAsString(obj) {\n        // first is type\n        var str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n          str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n          str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n          str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n          str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n      }\n      /**\n       * Encode packet as 'buffer sequence' by removing blobs, and\n       * deconstructing packet into object with placeholders and\n       * a list of buffers.\n       */\n    }, {\n      key: \"encodeAsBinary\",\n      value: function encodeAsBinary(obj) {\n        var deconstruction = (0, _binary.deconstructPacket)(obj);\n        var pack = this.encodeAsString(deconstruction.packet);\n        var buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n      }\n    }]);\n  }(); // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  var Decoder = exports.Decoder = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    function Decoder(reviver) {\n      var _this;\n      (0, _classCallCheck2.default)(this, Decoder);\n      _this = _callSuper(this, Decoder);\n      _this.reviver = reviver;\n      return _this;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    (0, _inherits2.default)(Decoder, _Emitter);\n    return (0, _createClass2.default)(Decoder, [{\n      key: \"add\",\n      value: function add(obj) {\n        var packet;\n        if (typeof obj === \"string\") {\n          if (this.reconstructor) {\n            throw new Error(\"got plaintext data when reconstructing a packet\");\n          }\n          packet = this.decodeString(obj);\n          var isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n          if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n            packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n            // binary packet's json\n            this.reconstructor = new BinaryReconstructor(packet);\n            // no attachments, labeled binary but no binary data to follow\n            if (packet.attachments === 0) {\n              _superPropGet(Decoder, \"emitReserved\", this, 3)([\"decoded\", packet]);\n            }\n          } else {\n            // non-binary full packet\n            _superPropGet(Decoder, \"emitReserved\", this, 3)([\"decoded\", packet]);\n          }\n        } else if ((0, _isBinary.isBinary)(obj) || obj.base64) {\n          // raw binary data\n          if (!this.reconstructor) {\n            throw new Error(\"got binary data when not reconstructing a packet\");\n          } else {\n            packet = this.reconstructor.takeBinaryData(obj);\n            if (packet) {\n              // received final buffer\n              this.reconstructor = null;\n              _superPropGet(Decoder, \"emitReserved\", this, 3)([\"decoded\", packet]);\n            }\n          }\n        } else {\n          throw new Error(\"Unknown type: \" + obj);\n        }\n      }\n      /**\n       * Decode a packet String (JSON data)\n       *\n       * @param {String} str\n       * @return {Object} packet\n       */\n    }, {\n      key: \"decodeString\",\n      value: function decodeString(str) {\n        var i = 0;\n        // look up type\n        var p = {\n          type: Number(str.charAt(0))\n        };\n        if (PacketType[p.type] === undefined) {\n          throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n          var start = i + 1;\n          while (str.charAt(++i) !== \"-\" && i != str.length) {}\n          var buf = str.substring(start, i);\n          if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n            throw new Error(\"Illegal attachments\");\n          }\n          p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n          var _start = i + 1;\n          while (++i) {\n            var c = str.charAt(i);\n            if (\",\" === c) break;\n            if (i === str.length) break;\n          }\n          p.nsp = str.substring(_start, i);\n        } else {\n          p.nsp = \"/\";\n        }\n        // look up id\n        var next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n          var _start2 = i + 1;\n          while (++i) {\n            var _c = str.charAt(i);\n            if (null == _c || Number(_c) != _c) {\n              --i;\n              break;\n            }\n            if (i === str.length) break;\n          }\n          p.id = Number(str.substring(_start2, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n          var payload = this.tryParse(str.substr(i));\n          if (Decoder.isPayloadValid(p.type, payload)) {\n            p.data = payload;\n          } else {\n            throw new Error(\"invalid payload\");\n          }\n        }\n        return p;\n      }\n    }, {\n      key: \"tryParse\",\n      value: function tryParse(str) {\n        try {\n          return JSON.parse(str, this.reviver);\n        } catch (e) {\n          return false;\n        }\n      }\n    }, {\n      key: \"destroy\",\n      value:\n      /**\n       * Deallocates a parser's resources\n       */\n      function destroy() {\n        if (this.reconstructor) {\n          this.reconstructor.finishedReconstruction();\n          this.reconstructor = null;\n        }\n      }\n    }], [{\n      key: \"isPayloadValid\",\n      value: function isPayloadValid(type, payload) {\n        switch (type) {\n          case PacketType.CONNECT:\n            return isObject(payload);\n          case PacketType.DISCONNECT:\n            return payload === undefined;\n          case PacketType.CONNECT_ERROR:\n            return typeof payload === \"string\" || isObject(payload);\n          case PacketType.EVENT:\n          case PacketType.BINARY_EVENT:\n            return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n          case PacketType.ACK:\n          case PacketType.BINARY_ACK:\n            return Array.isArray(payload);\n        }\n      }\n    }]);\n  }(_componentEmitter.Emitter);\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  var BinaryReconstructor = /*#__PURE__*/function () {\n    function BinaryReconstructor(packet) {\n      (0, _classCallCheck2.default)(this, BinaryReconstructor);\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    return (0, _createClass2.default)(BinaryReconstructor, [{\n      key: \"takeBinaryData\",\n      value: function takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n          // done with buffer list\n          var packet = (0, _binary.reconstructPacket)(this.reconPack, this.buffers);\n          this.finishedReconstruction();\n          return packet;\n        }\n        return null;\n      }\n      /**\n       * Cleans up binary packet reconstruction variables.\n       */\n    }, {\n      key: \"finishedReconstruction\",\n      value: function finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n      }\n    }]);\n  }();\n});","lineCount":333,"map":[[13,2,1,0],[13,6,1,0,"_componentEmitter"],[13,23,1,0],[13,26,1,0,"require"],[13,33,1,0],[13,34,1,0,"_dependencyMap"],[13,48,1,0],[14,2,2,0],[14,6,2,0,"_binary"],[14,13,2,0],[14,16,2,0,"require"],[14,23,2,0],[14,24,2,0,"_dependencyMap"],[14,38,2,0],[15,2,3,0],[15,6,3,0,"_isBinary"],[15,15,3,0],[15,18,3,0,"require"],[15,25,3,0],[15,26,3,0,"_dependencyMap"],[15,40,3,0],[16,2,3,53],[16,11,3,53,"_callSuper"],[16,22,3,53,"t"],[16,23,3,53],[16,25,3,53,"o"],[16,26,3,53],[16,28,3,53,"e"],[16,29,3,53],[16,40,3,53,"o"],[16,41,3,53],[16,48,3,53,"_getPrototypeOf2"],[16,64,3,53],[16,65,3,53,"default"],[16,72,3,53],[16,74,3,53,"o"],[16,75,3,53],[16,82,3,53,"_possibleConstructorReturn2"],[16,109,3,53],[16,110,3,53,"default"],[16,117,3,53],[16,119,3,53,"t"],[16,120,3,53],[16,122,3,53,"_isNativeReflectConstruct"],[16,147,3,53],[16,152,3,53,"Reflect"],[16,159,3,53],[16,160,3,53,"construct"],[16,169,3,53],[16,170,3,53,"o"],[16,171,3,53],[16,173,3,53,"e"],[16,174,3,53],[16,186,3,53,"_getPrototypeOf2"],[16,202,3,53],[16,203,3,53,"default"],[16,210,3,53],[16,212,3,53,"t"],[16,213,3,53],[16,215,3,53,"constructor"],[16,226,3,53],[16,230,3,53,"o"],[16,231,3,53],[16,232,3,53,"apply"],[16,237,3,53],[16,238,3,53,"t"],[16,239,3,53],[16,241,3,53,"e"],[16,242,3,53],[17,2,3,53],[17,11,3,53,"_isNativeReflectConstruct"],[17,37,3,53],[17,51,3,53,"t"],[17,52,3,53],[17,56,3,53,"Boolean"],[17,63,3,53],[17,64,3,53,"prototype"],[17,73,3,53],[17,74,3,53,"valueOf"],[17,81,3,53],[17,82,3,53,"call"],[17,86,3,53],[17,87,3,53,"Reflect"],[17,94,3,53],[17,95,3,53,"construct"],[17,104,3,53],[17,105,3,53,"Boolean"],[17,112,3,53],[17,145,3,53,"t"],[17,146,3,53],[17,159,3,53,"_isNativeReflectConstruct"],[17,184,3,53],[17,196,3,53,"_isNativeReflectConstruct"],[17,197,3,53],[17,210,3,53,"t"],[17,211,3,53],[18,2,3,53],[18,11,3,53,"_superPropGet"],[18,25,3,53,"t"],[18,26,3,53],[18,28,3,53,"o"],[18,29,3,53],[18,31,3,53,"e"],[18,32,3,53],[18,34,3,53,"r"],[18,35,3,53],[18,43,3,53,"p"],[18,44,3,53],[18,51,3,53,"_get2"],[18,56,3,53],[18,57,3,53,"default"],[18,64,3,53],[18,70,3,53,"_getPrototypeOf2"],[18,86,3,53],[18,87,3,53,"default"],[18,94,3,53],[18,100,3,53,"r"],[18,101,3,53],[18,104,3,53,"t"],[18,105,3,53],[18,106,3,53,"prototype"],[18,115,3,53],[18,118,3,53,"t"],[18,119,3,53],[18,122,3,53,"o"],[18,123,3,53],[18,125,3,53,"e"],[18,126,3,53],[18,140,3,53,"r"],[18,141,3,53],[18,166,3,53,"p"],[18,167,3,53],[18,180,3,53,"t"],[18,181,3,53],[18,192,3,53,"p"],[18,193,3,53],[18,194,3,53,"apply"],[18,199,3,53],[18,200,3,53,"e"],[18,201,3,53],[18,203,3,53,"t"],[18,204,3,53],[18,211,3,53,"p"],[18,212,3,53],[19,2,4,0],[20,0,5,0],[21,0,6,0],[22,2,7,0],[22,6,7,6,"RESERVED_EVENTS"],[22,21,7,21],[22,24,7,24],[22,25,8,4],[22,34,8,13],[22,36,9,4],[22,51,9,19],[22,53,10,4],[22,65,10,16],[22,67,11,4],[22,82,11,19],[22,84,12,4],[22,97,12,17],[22,99,13,4],[22,115,13,20],[22,116,13,22],[23,2,13,22],[23,3,14,1],[24,2,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,0,19,0],[29,2,20,7],[29,6,20,13,"protocol"],[29,14,20,21],[29,17,20,21,"exports"],[29,24,20,21],[29,25,20,21,"protocol"],[29,33,20,21],[29,36,20,24],[29,37,20,25],[30,2,21,7],[30,6,21,11,"PacketType"],[30,16,21,21],[31,2,22,0],[31,3,22,1],[31,13,22,11,"PacketType"],[31,23,22,21],[31,25,22,23],[32,4,23,4,"PacketType"],[32,14,23,14],[32,15,23,15,"PacketType"],[32,25,23,25],[32,26,23,26],[32,35,23,35],[32,36,23,36],[32,39,23,39],[32,40,23,40],[32,41,23,41],[32,44,23,44],[32,53,23,53],[33,4,24,4,"PacketType"],[33,14,24,14],[33,15,24,15,"PacketType"],[33,25,24,25],[33,26,24,26],[33,38,24,38],[33,39,24,39],[33,42,24,42],[33,43,24,43],[33,44,24,44],[33,47,24,47],[33,59,24,59],[34,4,25,4,"PacketType"],[34,14,25,14],[34,15,25,15,"PacketType"],[34,25,25,25],[34,26,25,26],[34,33,25,33],[34,34,25,34],[34,37,25,37],[34,38,25,38],[34,39,25,39],[34,42,25,42],[34,49,25,49],[35,4,26,4,"PacketType"],[35,14,26,14],[35,15,26,15,"PacketType"],[35,25,26,25],[35,26,26,26],[35,31,26,31],[35,32,26,32],[35,35,26,35],[35,36,26,36],[35,37,26,37],[35,40,26,40],[35,45,26,45],[36,4,27,4,"PacketType"],[36,14,27,14],[36,15,27,15,"PacketType"],[36,25,27,25],[36,26,27,26],[36,41,27,41],[36,42,27,42],[36,45,27,45],[36,46,27,46],[36,47,27,47],[36,50,27,50],[36,65,27,65],[37,4,28,4,"PacketType"],[37,14,28,14],[37,15,28,15,"PacketType"],[37,25,28,25],[37,26,28,26],[37,40,28,40],[37,41,28,41],[37,44,28,44],[37,45,28,45],[37,46,28,46],[37,49,28,49],[37,63,28,63],[38,4,29,4,"PacketType"],[38,14,29,14],[38,15,29,15,"PacketType"],[38,25,29,25],[38,26,29,26],[38,38,29,38],[38,39,29,39],[38,42,29,42],[38,43,29,43],[38,44,29,44],[38,47,29,47],[38,59,29,59],[39,2,30,0],[39,3,30,1],[39,5,30,3,"PacketType"],[39,15,30,13],[39,20,30,13,"exports"],[39,27,30,13],[39,28,30,13,"PacketType"],[39,38,30,13],[39,41,30,18,"PacketType"],[39,51,30,28],[39,54,30,31],[39,55,30,32],[39,56,30,33],[39,57,30,34],[39,58,30,35],[40,2,31,0],[41,0,32,0],[42,0,33,0],[43,2,31,0],[43,6,34,13,"Encoder"],[43,13,34,20],[43,16,34,20,"exports"],[43,23,34,20],[43,24,34,20,"Encoder"],[43,31,34,20],[44,4,35,4],[45,0,36,0],[46,0,37,0],[47,0,38,0],[48,0,39,0],[49,4,40,4],[49,13,40,4,"Encoder"],[49,21,40,16,"replacer"],[49,29,40,24],[49,31,40,26],[50,6,40,26],[50,10,40,26,"_classCallCheck2"],[50,26,40,26],[50,27,40,26,"default"],[50,34,40,26],[50,42,40,26,"Encoder"],[50,49,40,26],[51,6,41,8],[51,10,41,12],[51,11,41,13,"replacer"],[51,19,41,21],[51,22,41,24,"replacer"],[51,30,41,32],[52,4,42,4],[53,4,43,4],[54,0,44,0],[55,0,45,0],[56,0,46,0],[57,0,47,0],[58,0,48,0],[59,4,43,4],[59,15,43,4,"_createClass2"],[59,28,43,4],[59,29,43,4,"default"],[59,36,43,4],[59,38,43,4,"Encoder"],[59,45,43,4],[60,6,43,4,"key"],[60,9,43,4],[61,6,43,4,"value"],[61,11,43,4],[61,13,49,4],[61,22,49,4,"encode"],[61,28,49,10,"encode"],[61,29,49,11,"obj"],[61,32,49,14],[61,34,49,16],[62,8,50,8],[62,12,50,12,"obj"],[62,15,50,15],[62,16,50,16,"type"],[62,20,50,20],[62,25,50,25,"PacketType"],[62,35,50,35],[62,36,50,36,"EVENT"],[62,41,50,41],[62,45,50,45,"obj"],[62,48,50,48],[62,49,50,49,"type"],[62,53,50,53],[62,58,50,58,"PacketType"],[62,68,50,68],[62,69,50,69,"ACK"],[62,72,50,72],[62,74,50,74],[63,10,51,12],[63,14,51,16],[63,18,51,16,"hasBinary"],[63,37,51,25],[63,39,51,26,"obj"],[63,42,51,29],[63,43,51,30],[63,45,51,32],[64,12,52,16],[64,19,52,23],[64,23,52,27],[64,24,52,28,"encodeAsBinary"],[64,38,52,42],[64,39,52,43],[65,14,53,20,"type"],[65,18,53,24],[65,20,53,26,"obj"],[65,23,53,29],[65,24,53,30,"type"],[65,28,53,34],[65,33,53,39,"PacketType"],[65,43,53,49],[65,44,53,50,"EVENT"],[65,49,53,55],[65,52,54,26,"PacketType"],[65,62,54,36],[65,63,54,37,"BINARY_EVENT"],[65,75,54,49],[65,78,55,26,"PacketType"],[65,88,55,36],[65,89,55,37,"BINARY_ACK"],[65,99,55,47],[66,14,56,20,"nsp"],[66,17,56,23],[66,19,56,25,"obj"],[66,22,56,28],[66,23,56,29,"nsp"],[66,26,56,32],[67,14,57,20,"data"],[67,18,57,24],[67,20,57,26,"obj"],[67,23,57,29],[67,24,57,30,"data"],[67,28,57,34],[68,14,58,20,"id"],[68,16,58,22],[68,18,58,24,"obj"],[68,21,58,27],[68,22,58,28,"id"],[69,12,59,16],[69,13,59,17],[69,14,59,18],[70,10,60,12],[71,8,61,8],[72,8,62,8],[72,15,62,15],[72,16,62,16],[72,20,62,20],[72,21,62,21,"encodeAsString"],[72,35,62,35],[72,36,62,36,"obj"],[72,39,62,39],[72,40,62,40],[72,41,62,41],[73,6,63,4],[74,6,64,4],[75,0,65,0],[76,0,66,0],[77,4,64,4],[78,6,64,4,"key"],[78,9,64,4],[79,6,64,4,"value"],[79,11,64,4],[79,13,67,4],[79,22,67,4,"encodeAsString"],[79,36,67,18,"encodeAsString"],[79,37,67,19,"obj"],[79,40,67,22],[79,42,67,24],[80,8,68,8],[81,8,69,8],[81,12,69,12,"str"],[81,15,69,15],[81,18,69,18],[81,20,69,20],[81,23,69,23,"obj"],[81,26,69,26],[81,27,69,27,"type"],[81,31,69,31],[82,8,70,8],[83,8,71,8],[83,12,71,12,"obj"],[83,15,71,15],[83,16,71,16,"type"],[83,20,71,20],[83,25,71,25,"PacketType"],[83,35,71,35],[83,36,71,36,"BINARY_EVENT"],[83,48,71,48],[83,52,72,12,"obj"],[83,55,72,15],[83,56,72,16,"type"],[83,60,72,20],[83,65,72,25,"PacketType"],[83,75,72,35],[83,76,72,36,"BINARY_ACK"],[83,86,72,46],[83,88,72,48],[84,10,73,12,"str"],[84,13,73,15],[84,17,73,19,"obj"],[84,20,73,22],[84,21,73,23,"attachments"],[84,32,73,34],[84,35,73,37],[84,38,73,40],[85,8,74,8],[86,8,75,8],[87,8,76,8],[88,8,77,8],[88,12,77,12,"obj"],[88,15,77,15],[88,16,77,16,"nsp"],[88,19,77,19],[88,23,77,23],[88,26,77,26],[88,31,77,31,"obj"],[88,34,77,34],[88,35,77,35,"nsp"],[88,38,77,38],[88,40,77,40],[89,10,78,12,"str"],[89,13,78,15],[89,17,78,19,"obj"],[89,20,78,22],[89,21,78,23,"nsp"],[89,24,78,26],[89,27,78,29],[89,30,78,32],[90,8,79,8],[91,8,80,8],[92,8,81,8],[92,12,81,12],[92,16,81,16],[92,20,81,20,"obj"],[92,23,81,23],[92,24,81,24,"id"],[92,26,81,26],[92,28,81,28],[93,10,82,12,"str"],[93,13,82,15],[93,17,82,19,"obj"],[93,20,82,22],[93,21,82,23,"id"],[93,23,82,25],[94,8,83,8],[95,8,84,8],[96,8,85,8],[96,12,85,12],[96,16,85,16],[96,20,85,20,"obj"],[96,23,85,23],[96,24,85,24,"data"],[96,28,85,28],[96,30,85,30],[97,10,86,12,"str"],[97,13,86,15],[97,17,86,19,"JSON"],[97,21,86,23],[97,22,86,24,"stringify"],[97,31,86,33],[97,32,86,34,"obj"],[97,35,86,37],[97,36,86,38,"data"],[97,40,86,42],[97,42,86,44],[97,46,86,48],[97,47,86,49,"replacer"],[97,55,86,57],[97,56,86,58],[98,8,87,8],[99,8,88,8],[99,15,88,15,"str"],[99,18,88,18],[100,6,89,4],[101,6,90,4],[102,0,91,0],[103,0,92,0],[104,0,93,0],[105,0,94,0],[106,4,90,4],[107,6,90,4,"key"],[107,9,90,4],[108,6,90,4,"value"],[108,11,90,4],[108,13,95,4],[108,22,95,4,"encodeAsBinary"],[108,36,95,18,"encodeAsBinary"],[108,37,95,19,"obj"],[108,40,95,22],[108,42,95,24],[109,8,96,8],[109,12,96,14,"deconstruction"],[109,26,96,28],[109,29,96,31],[109,33,96,31,"deconstructPacket"],[109,58,96,48],[109,60,96,49,"obj"],[109,63,96,52],[109,64,96,53],[110,8,97,8],[110,12,97,14,"pack"],[110,16,97,18],[110,19,97,21],[110,23,97,25],[110,24,97,26,"encodeAsString"],[110,38,97,40],[110,39,97,41,"deconstruction"],[110,53,97,55],[110,54,97,56,"packet"],[110,60,97,62],[110,61,97,63],[111,8,98,8],[111,12,98,14,"buffers"],[111,19,98,21],[111,22,98,24,"deconstruction"],[111,36,98,38],[111,37,98,39,"buffers"],[111,44,98,46],[112,8,99,8,"buffers"],[112,15,99,15],[112,16,99,16,"unshift"],[112,23,99,23],[112,24,99,24,"pack"],[112,28,99,28],[112,29,99,29],[112,30,99,30],[112,31,99,31],[113,8,100,8],[113,15,100,15,"buffers"],[113,22,100,22],[113,23,100,23],[113,24,100,24],[114,6,101,4],[115,4,101,5],[116,2,101,5],[116,7,103,0],[117,2,104,0],[117,11,104,9,"isObject"],[117,19,104,17,"isObject"],[117,20,104,18,"value"],[117,25,104,23],[117,27,104,25],[118,4,105,4],[118,11,105,11,"Object"],[118,17,105,17],[118,18,105,18,"prototype"],[118,27,105,27],[118,28,105,28,"toString"],[118,36,105,36],[118,37,105,37,"call"],[118,41,105,41],[118,42,105,42,"value"],[118,47,105,47],[118,48,105,48],[118,53,105,53],[118,70,105,70],[119,2,106,0],[120,2,107,0],[121,0,108,0],[122,0,109,0],[123,0,110,0],[124,0,111,0],[125,2,107,0],[125,6,112,13,"Decoder"],[125,13,112,20],[125,16,112,20,"exports"],[125,23,112,20],[125,24,112,20,"Decoder"],[125,31,112,20],[125,57,112,20,"_Emitter"],[125,65,112,20],[126,4,113,4],[127,0,114,0],[128,0,115,0],[129,0,116,0],[130,0,117,0],[131,4,118,4],[131,13,118,4,"Decoder"],[131,21,118,16,"reviver"],[131,28,118,23],[131,30,118,25],[132,6,118,25],[132,10,118,25,"_this"],[132,15,118,25],[133,6,118,25],[133,10,118,25,"_classCallCheck2"],[133,26,118,25],[133,27,118,25,"default"],[133,34,118,25],[133,42,118,25,"Decoder"],[133,49,118,25],[134,6,119,8,"_this"],[134,11,119,8],[134,14,119,8,"_callSuper"],[134,24,119,8],[134,31,119,8,"Decoder"],[134,38,119,8],[135,6,120,8,"_this"],[135,11,120,8],[135,12,120,13,"reviver"],[135,19,120,20],[135,22,120,23,"reviver"],[135,29,120,30],[136,6,120,31],[136,13,120,31,"_this"],[136,18,120,31],[137,4,121,4],[138,4,122,4],[139,0,123,0],[140,0,124,0],[141,0,125,0],[142,0,126,0],[143,4,122,4],[143,8,122,4,"_inherits2"],[143,18,122,4],[143,19,122,4,"default"],[143,26,122,4],[143,28,122,4,"Decoder"],[143,35,122,4],[143,37,122,4,"_Emitter"],[143,45,122,4],[144,4,122,4],[144,15,122,4,"_createClass2"],[144,28,122,4],[144,29,122,4,"default"],[144,36,122,4],[144,38,122,4,"Decoder"],[144,45,122,4],[145,6,122,4,"key"],[145,9,122,4],[146,6,122,4,"value"],[146,11,122,4],[146,13,127,4],[146,22,127,4,"add"],[146,25,127,7,"add"],[146,26,127,8,"obj"],[146,29,127,11],[146,31,127,13],[147,8,128,8],[147,12,128,12,"packet"],[147,18,128,18],[148,8,129,8],[148,12,129,12],[148,19,129,19,"obj"],[148,22,129,22],[148,27,129,27],[148,35,129,35],[148,37,129,37],[149,10,130,12],[149,14,130,16],[149,18,130,20],[149,19,130,21,"reconstructor"],[149,32,130,34],[149,34,130,36],[150,12,131,16],[150,18,131,22],[150,22,131,26,"Error"],[150,27,131,31],[150,28,131,32],[150,77,131,81],[150,78,131,82],[151,10,132,12],[152,10,133,12,"packet"],[152,16,133,18],[152,19,133,21],[152,23,133,25],[152,24,133,26,"decodeString"],[152,36,133,38],[152,37,133,39,"obj"],[152,40,133,42],[152,41,133,43],[153,10,134,12],[153,14,134,18,"isBinaryEvent"],[153,27,134,31],[153,30,134,34,"packet"],[153,36,134,40],[153,37,134,41,"type"],[153,41,134,45],[153,46,134,50,"PacketType"],[153,56,134,60],[153,57,134,61,"BINARY_EVENT"],[153,69,134,73],[154,10,135,12],[154,14,135,16,"isBinaryEvent"],[154,27,135,29],[154,31,135,33,"packet"],[154,37,135,39],[154,38,135,40,"type"],[154,42,135,44],[154,47,135,49,"PacketType"],[154,57,135,59],[154,58,135,60,"BINARY_ACK"],[154,68,135,70],[154,70,135,72],[155,12,136,16,"packet"],[155,18,136,22],[155,19,136,23,"type"],[155,23,136,27],[155,26,136,30,"isBinaryEvent"],[155,39,136,43],[155,42,136,46,"PacketType"],[155,52,136,56],[155,53,136,57,"EVENT"],[155,58,136,62],[155,61,136,65,"PacketType"],[155,71,136,75],[155,72,136,76,"ACK"],[155,75,136,79],[156,12,137,16],[157,12,138,16],[157,16,138,20],[157,17,138,21,"reconstructor"],[157,30,138,34],[157,33,138,37],[157,37,138,41,"BinaryReconstructor"],[157,56,138,60],[157,57,138,61,"packet"],[157,63,138,67],[157,64,138,68],[158,12,139,16],[159,12,140,16],[159,16,140,20,"packet"],[159,22,140,26],[159,23,140,27,"attachments"],[159,34,140,38],[159,39,140,43],[159,40,140,44],[159,42,140,46],[160,14,141,20,"_superPropGet"],[160,27,141,20],[160,28,141,20,"Decoder"],[160,35,141,20],[160,63,141,39],[160,72,141,48],[160,74,141,50,"packet"],[160,80,141,56],[161,12,142,16],[162,10,143,12],[162,11,143,13],[162,17,144,17],[163,12,145,16],[164,12,146,16,"_superPropGet"],[164,25,146,16],[164,26,146,16,"Decoder"],[164,33,146,16],[164,61,146,35],[164,70,146,44],[164,72,146,46,"packet"],[164,78,146,52],[165,10,147,12],[166,8,148,8],[166,9,148,9],[166,15,149,13],[166,19,149,17],[166,23,149,17,"isBinary"],[166,41,149,25],[166,43,149,26,"obj"],[166,46,149,29],[166,47,149,30],[166,51,149,34,"obj"],[166,54,149,37],[166,55,149,38,"base64"],[166,61,149,44],[166,63,149,46],[167,10,150,12],[168,10,151,12],[168,14,151,16],[168,15,151,17],[168,19,151,21],[168,20,151,22,"reconstructor"],[168,33,151,35],[168,35,151,37],[169,12,152,16],[169,18,152,22],[169,22,152,26,"Error"],[169,27,152,31],[169,28,152,32],[169,78,152,82],[169,79,152,83],[170,10,153,12],[170,11,153,13],[170,17,154,17],[171,12,155,16,"packet"],[171,18,155,22],[171,21,155,25],[171,25,155,29],[171,26,155,30,"reconstructor"],[171,39,155,43],[171,40,155,44,"takeBinaryData"],[171,54,155,58],[171,55,155,59,"obj"],[171,58,155,62],[171,59,155,63],[172,12,156,16],[172,16,156,20,"packet"],[172,22,156,26],[172,24,156,28],[173,14,157,20],[174,14,158,20],[174,18,158,24],[174,19,158,25,"reconstructor"],[174,32,158,38],[174,35,158,41],[174,39,158,45],[175,14,159,20,"_superPropGet"],[175,27,159,20],[175,28,159,20,"Decoder"],[175,35,159,20],[175,63,159,39],[175,72,159,48],[175,74,159,50,"packet"],[175,80,159,56],[176,12,160,16],[177,10,161,12],[178,8,162,8],[178,9,162,9],[178,15,163,13],[179,10,164,12],[179,16,164,18],[179,20,164,22,"Error"],[179,25,164,27],[179,26,164,28],[179,42,164,44],[179,45,164,47,"obj"],[179,48,164,50],[179,49,164,51],[180,8,165,8],[181,6,166,4],[182,6,167,4],[183,0,168,0],[184,0,169,0],[185,0,170,0],[186,0,171,0],[187,0,172,0],[188,4,167,4],[189,6,167,4,"key"],[189,9,167,4],[190,6,167,4,"value"],[190,11,167,4],[190,13,173,4],[190,22,173,4,"decodeString"],[190,34,173,16,"decodeString"],[190,35,173,17,"str"],[190,38,173,20],[190,40,173,22],[191,8,174,8],[191,12,174,12,"i"],[191,13,174,13],[191,16,174,16],[191,17,174,17],[192,8,175,8],[193,8,176,8],[193,12,176,14,"p"],[193,13,176,15],[193,16,176,18],[194,10,177,12,"type"],[194,14,177,16],[194,16,177,18,"Number"],[194,22,177,24],[194,23,177,25,"str"],[194,26,177,28],[194,27,177,29,"charAt"],[194,33,177,35],[194,34,177,36],[194,35,177,37],[194,36,177,38],[195,8,178,8],[195,9,178,9],[196,8,179,8],[196,12,179,12,"PacketType"],[196,22,179,22],[196,23,179,23,"p"],[196,24,179,24],[196,25,179,25,"type"],[196,29,179,29],[196,30,179,30],[196,35,179,35,"undefined"],[196,44,179,44],[196,46,179,46],[197,10,180,12],[197,16,180,18],[197,20,180,22,"Error"],[197,25,180,27],[197,26,180,28],[197,48,180,50],[197,51,180,53,"p"],[197,52,180,54],[197,53,180,55,"type"],[197,57,180,59],[197,58,180,60],[198,8,181,8],[199,8,182,8],[200,8,183,8],[200,12,183,12,"p"],[200,13,183,13],[200,14,183,14,"type"],[200,18,183,18],[200,23,183,23,"PacketType"],[200,33,183,33],[200,34,183,34,"BINARY_EVENT"],[200,46,183,46],[200,50,184,12,"p"],[200,51,184,13],[200,52,184,14,"type"],[200,56,184,18],[200,61,184,23,"PacketType"],[200,71,184,33],[200,72,184,34,"BINARY_ACK"],[200,82,184,44],[200,84,184,46],[201,10,185,12],[201,14,185,18,"start"],[201,19,185,23],[201,22,185,26,"i"],[201,23,185,27],[201,26,185,30],[201,27,185,31],[202,10,186,12],[202,17,186,19,"str"],[202,20,186,22],[202,21,186,23,"charAt"],[202,27,186,29],[202,28,186,30],[202,30,186,32,"i"],[202,31,186,33],[202,32,186,34],[202,37,186,39],[202,40,186,42],[202,44,186,46,"i"],[202,45,186,47],[202,49,186,51,"str"],[202,52,186,54],[202,53,186,55,"length"],[202,59,186,61],[202,61,186,63],[202,62,186,65],[203,10,187,12],[203,14,187,18,"buf"],[203,17,187,21],[203,20,187,24,"str"],[203,23,187,27],[203,24,187,28,"substring"],[203,33,187,37],[203,34,187,38,"start"],[203,39,187,43],[203,41,187,45,"i"],[203,42,187,46],[203,43,187,47],[204,10,188,12],[204,14,188,16,"buf"],[204,17,188,19],[204,21,188,23,"Number"],[204,27,188,29],[204,28,188,30,"buf"],[204,31,188,33],[204,32,188,34],[204,36,188,38,"str"],[204,39,188,41],[204,40,188,42,"charAt"],[204,46,188,48],[204,47,188,49,"i"],[204,48,188,50],[204,49,188,51],[204,54,188,56],[204,57,188,59],[204,59,188,61],[205,12,189,16],[205,18,189,22],[205,22,189,26,"Error"],[205,27,189,31],[205,28,189,32],[205,49,189,53],[205,50,189,54],[206,10,190,12],[207,10,191,12,"p"],[207,11,191,13],[207,12,191,14,"attachments"],[207,23,191,25],[207,26,191,28,"Number"],[207,32,191,34],[207,33,191,35,"buf"],[207,36,191,38],[207,37,191,39],[208,8,192,8],[209,8,193,8],[210,8,194,8],[210,12,194,12],[210,15,194,15],[210,20,194,20,"str"],[210,23,194,23],[210,24,194,24,"charAt"],[210,30,194,30],[210,31,194,31,"i"],[210,32,194,32],[210,35,194,35],[210,36,194,36],[210,37,194,37],[210,39,194,39],[211,10,195,12],[211,14,195,18,"start"],[211,20,195,23],[211,23,195,26,"i"],[211,24,195,27],[211,27,195,30],[211,28,195,31],[212,10,196,12],[212,17,196,19],[212,19,196,21,"i"],[212,20,196,22],[212,22,196,24],[213,12,197,16],[213,16,197,22,"c"],[213,17,197,23],[213,20,197,26,"str"],[213,23,197,29],[213,24,197,30,"charAt"],[213,30,197,36],[213,31,197,37,"i"],[213,32,197,38],[213,33,197,39],[214,12,198,16],[214,16,198,20],[214,19,198,23],[214,24,198,28,"c"],[214,25,198,29],[214,27,199,20],[215,12,200,16],[215,16,200,20,"i"],[215,17,200,21],[215,22,200,26,"str"],[215,25,200,29],[215,26,200,30,"length"],[215,32,200,36],[215,34,201,20],[216,10,202,12],[217,10,203,12,"p"],[217,11,203,13],[217,12,203,14,"nsp"],[217,15,203,17],[217,18,203,20,"str"],[217,21,203,23],[217,22,203,24,"substring"],[217,31,203,33],[217,32,203,34,"start"],[217,38,203,39],[217,40,203,41,"i"],[217,41,203,42],[217,42,203,43],[218,8,204,8],[218,9,204,9],[218,15,205,13],[219,10,206,12,"p"],[219,11,206,13],[219,12,206,14,"nsp"],[219,15,206,17],[219,18,206,20],[219,21,206,23],[220,8,207,8],[221,8,208,8],[222,8,209,8],[222,12,209,14,"next"],[222,16,209,18],[222,19,209,21,"str"],[222,22,209,24],[222,23,209,25,"charAt"],[222,29,209,31],[222,30,209,32,"i"],[222,31,209,33],[222,34,209,36],[222,35,209,37],[222,36,209,38],[223,8,210,8],[223,12,210,12],[223,14,210,14],[223,19,210,19,"next"],[223,23,210,23],[223,27,210,27,"Number"],[223,33,210,33],[223,34,210,34,"next"],[223,38,210,38],[223,39,210,39],[223,43,210,43,"next"],[223,47,210,47],[223,49,210,49],[224,10,211,12],[224,14,211,18,"start"],[224,21,211,23],[224,24,211,26,"i"],[224,25,211,27],[224,28,211,30],[224,29,211,31],[225,10,212,12],[225,17,212,19],[225,19,212,21,"i"],[225,20,212,22],[225,22,212,24],[226,12,213,16],[226,16,213,22,"c"],[226,18,213,23],[226,21,213,26,"str"],[226,24,213,29],[226,25,213,30,"charAt"],[226,31,213,36],[226,32,213,37,"i"],[226,33,213,38],[226,34,213,39],[227,12,214,16],[227,16,214,20],[227,20,214,24],[227,24,214,28,"c"],[227,26,214,29],[227,30,214,33,"Number"],[227,36,214,39],[227,37,214,40,"c"],[227,39,214,41],[227,40,214,42],[227,44,214,46,"c"],[227,46,214,47],[227,48,214,49],[228,14,215,20],[228,16,215,22,"i"],[228,17,215,23],[229,14,216,20],[230,12,217,16],[231,12,218,16],[231,16,218,20,"i"],[231,17,218,21],[231,22,218,26,"str"],[231,25,218,29],[231,26,218,30,"length"],[231,32,218,36],[231,34,219,20],[232,10,220,12],[233,10,221,12,"p"],[233,11,221,13],[233,12,221,14,"id"],[233,14,221,16],[233,17,221,19,"Number"],[233,23,221,25],[233,24,221,26,"str"],[233,27,221,29],[233,28,221,30,"substring"],[233,37,221,39],[233,38,221,40,"start"],[233,45,221,45],[233,47,221,47,"i"],[233,48,221,48],[233,51,221,51],[233,52,221,52],[233,53,221,53],[233,54,221,54],[234,8,222,8],[235,8,223,8],[236,8,224,8],[236,12,224,12,"str"],[236,15,224,15],[236,16,224,16,"charAt"],[236,22,224,22],[236,23,224,23],[236,25,224,25,"i"],[236,26,224,26],[236,27,224,27],[236,29,224,29],[237,10,225,12],[237,14,225,18,"payload"],[237,21,225,25],[237,24,225,28],[237,28,225,32],[237,29,225,33,"tryParse"],[237,37,225,41],[237,38,225,42,"str"],[237,41,225,45],[237,42,225,46,"substr"],[237,48,225,52],[237,49,225,53,"i"],[237,50,225,54],[237,51,225,55],[237,52,225,56],[238,10,226,12],[238,14,226,16,"Decoder"],[238,21,226,23],[238,22,226,24,"isPayloadValid"],[238,36,226,38],[238,37,226,39,"p"],[238,38,226,40],[238,39,226,41,"type"],[238,43,226,45],[238,45,226,47,"payload"],[238,52,226,54],[238,53,226,55],[238,55,226,57],[239,12,227,16,"p"],[239,13,227,17],[239,14,227,18,"data"],[239,18,227,22],[239,21,227,25,"payload"],[239,28,227,32],[240,10,228,12],[240,11,228,13],[240,17,229,17],[241,12,230,16],[241,18,230,22],[241,22,230,26,"Error"],[241,27,230,31],[241,28,230,32],[241,45,230,49],[241,46,230,50],[242,10,231,12],[243,8,232,8],[244,8,233,8],[244,15,233,15,"p"],[244,16,233,16],[245,6,234,4],[246,4,234,5],[247,6,234,5,"key"],[247,9,234,5],[248,6,234,5,"value"],[248,11,234,5],[248,13,235,4],[248,22,235,4,"tryParse"],[248,30,235,12,"tryParse"],[248,31,235,13,"str"],[248,34,235,16],[248,36,235,18],[249,8,236,8],[249,12,236,12],[250,10,237,12],[250,17,237,19,"JSON"],[250,21,237,23],[250,22,237,24,"parse"],[250,27,237,29],[250,28,237,30,"str"],[250,31,237,33],[250,33,237,35],[250,37,237,39],[250,38,237,40,"reviver"],[250,45,237,47],[250,46,237,48],[251,8,238,8],[251,9,238,9],[251,10,239,8],[251,17,239,15,"e"],[251,18,239,16],[251,20,239,18],[252,10,240,12],[252,17,240,19],[252,22,240,24],[253,8,241,8],[254,6,242,4],[255,4,242,5],[256,6,242,5,"key"],[256,9,242,5],[257,6,242,5,"value"],[257,11,242,5],[258,6,262,4],[259,0,263,0],[260,0,264,0],[261,6,265,4],[261,15,265,4,"destroy"],[261,22,265,11,"destroy"],[261,23,265,11],[261,25,265,14],[262,8,266,8],[262,12,266,12],[262,16,266,16],[262,17,266,17,"reconstructor"],[262,30,266,30],[262,32,266,32],[263,10,267,12],[263,14,267,16],[263,15,267,17,"reconstructor"],[263,28,267,30],[263,29,267,31,"finishedReconstruction"],[263,51,267,53],[263,52,267,54],[263,53,267,55],[264,10,268,12],[264,14,268,16],[264,15,268,17,"reconstructor"],[264,28,268,30],[264,31,268,33],[264,35,268,37],[265,8,269,8],[266,6,270,4],[267,4,270,5],[268,6,270,5,"key"],[268,9,270,5],[269,6,270,5,"value"],[269,11,270,5],[269,13,243,4],[269,22,243,11,"isPayloadValid"],[269,36,243,25,"isPayloadValid"],[269,37,243,26,"type"],[269,41,243,30],[269,43,243,32,"payload"],[269,50,243,39],[269,52,243,41],[270,8,244,8],[270,16,244,16,"type"],[270,20,244,20],[271,10,245,12],[271,15,245,17,"PacketType"],[271,25,245,27],[271,26,245,28,"CONNECT"],[271,33,245,35],[272,12,246,16],[272,19,246,23,"isObject"],[272,27,246,31],[272,28,246,32,"payload"],[272,35,246,39],[272,36,246,40],[273,10,247,12],[273,15,247,17,"PacketType"],[273,25,247,27],[273,26,247,28,"DISCONNECT"],[273,36,247,38],[274,12,248,16],[274,19,248,23,"payload"],[274,26,248,30],[274,31,248,35,"undefined"],[274,40,248,44],[275,10,249,12],[275,15,249,17,"PacketType"],[275,25,249,27],[275,26,249,28,"CONNECT_ERROR"],[275,39,249,41],[276,12,250,16],[276,19,250,23],[276,26,250,30,"payload"],[276,33,250,37],[276,38,250,42],[276,46,250,50],[276,50,250,54,"isObject"],[276,58,250,62],[276,59,250,63,"payload"],[276,66,250,70],[276,67,250,71],[277,10,251,12],[277,15,251,17,"PacketType"],[277,25,251,27],[277,26,251,28,"EVENT"],[277,31,251,33],[278,10,252,12],[278,15,252,17,"PacketType"],[278,25,252,27],[278,26,252,28,"BINARY_EVENT"],[278,38,252,40],[279,12,253,16],[279,19,253,24,"Array"],[279,24,253,29],[279,25,253,30,"isArray"],[279,32,253,37],[279,33,253,38,"payload"],[279,40,253,45],[279,41,253,46],[279,46,254,21],[279,53,254,28,"payload"],[279,60,254,35],[279,61,254,36],[279,62,254,37],[279,63,254,38],[279,68,254,43],[279,76,254,51],[279,80,255,25],[279,87,255,32,"payload"],[279,94,255,39],[279,95,255,40],[279,96,255,41],[279,97,255,42],[279,102,255,47],[279,110,255,55],[279,114,256,28,"RESERVED_EVENTS"],[279,129,256,43],[279,130,256,44,"indexOf"],[279,137,256,51],[279,138,256,52,"payload"],[279,145,256,59],[279,146,256,60],[279,147,256,61],[279,148,256,62],[279,149,256,63],[279,154,256,68],[279,155,256,69],[279,156,256,71],[279,157,256,72],[280,10,257,12],[280,15,257,17,"PacketType"],[280,25,257,27],[280,26,257,28,"ACK"],[280,29,257,31],[281,10,258,12],[281,15,258,17,"PacketType"],[281,25,258,27],[281,26,258,28,"BINARY_ACK"],[281,36,258,38],[282,12,259,16],[282,19,259,23,"Array"],[282,24,259,28],[282,25,259,29,"isArray"],[282,32,259,36],[282,33,259,37,"payload"],[282,40,259,44],[282,41,259,45],[283,8,260,8],[284,6,261,4],[285,4,261,5],[286,2,261,5],[286,4,112,29,"Emitter"],[286,29,112,36],[287,2,272,0],[288,0,273,0],[289,0,274,0],[290,0,275,0],[291,0,276,0],[292,0,277,0],[293,0,278,0],[294,0,279,0],[295,2,272,0],[295,6,280,6,"BinaryReconstructor"],[295,25,280,25],[296,4,281,4],[296,13,281,4,"BinaryReconstructor"],[296,33,281,16,"packet"],[296,39,281,22],[296,41,281,24],[297,6,281,24],[297,10,281,24,"_classCallCheck2"],[297,26,281,24],[297,27,281,24,"default"],[297,34,281,24],[297,42,281,24,"BinaryReconstructor"],[297,61,281,24],[298,6,282,8],[298,10,282,12],[298,11,282,13,"packet"],[298,17,282,19],[298,20,282,22,"packet"],[298,26,282,28],[299,6,283,8],[299,10,283,12],[299,11,283,13,"buffers"],[299,18,283,20],[299,21,283,23],[299,23,283,25],[300,6,284,8],[300,10,284,12],[300,11,284,13,"reconPack"],[300,20,284,22],[300,23,284,25,"packet"],[300,29,284,31],[301,4,285,4],[302,4,286,4],[303,0,287,0],[304,0,288,0],[305,0,289,0],[306,0,290,0],[307,0,291,0],[308,0,292,0],[309,0,293,0],[310,4,286,4],[310,15,286,4,"_createClass2"],[310,28,286,4],[310,29,286,4,"default"],[310,36,286,4],[310,38,286,4,"BinaryReconstructor"],[310,57,286,4],[311,6,286,4,"key"],[311,9,286,4],[312,6,286,4,"value"],[312,11,286,4],[312,13,294,4],[312,22,294,4,"takeBinaryData"],[312,36,294,18,"takeBinaryData"],[312,37,294,19,"binData"],[312,44,294,26],[312,46,294,28],[313,8,295,8],[313,12,295,12],[313,13,295,13,"buffers"],[313,20,295,20],[313,21,295,21,"push"],[313,25,295,25],[313,26,295,26,"binData"],[313,33,295,33],[313,34,295,34],[314,8,296,8],[314,12,296,12],[314,16,296,16],[314,17,296,17,"buffers"],[314,24,296,24],[314,25,296,25,"length"],[314,31,296,31],[314,36,296,36],[314,40,296,40],[314,41,296,41,"reconPack"],[314,50,296,50],[314,51,296,51,"attachments"],[314,62,296,62],[314,64,296,64],[315,10,297,12],[316,10,298,12],[316,14,298,18,"packet"],[316,20,298,24],[316,23,298,27],[316,27,298,27,"reconstructPacket"],[316,52,298,44],[316,54,298,45],[316,58,298,49],[316,59,298,50,"reconPack"],[316,68,298,59],[316,70,298,61],[316,74,298,65],[316,75,298,66,"buffers"],[316,82,298,73],[316,83,298,74],[317,10,299,12],[317,14,299,16],[317,15,299,17,"finishedReconstruction"],[317,37,299,39],[317,38,299,40],[317,39,299,41],[318,10,300,12],[318,17,300,19,"packet"],[318,23,300,25],[319,8,301,8],[320,8,302,8],[320,15,302,15],[320,19,302,19],[321,6,303,4],[322,6,304,4],[323,0,305,0],[324,0,306,0],[325,4,304,4],[326,6,304,4,"key"],[326,9,304,4],[327,6,304,4,"value"],[327,11,304,4],[327,13,307,4],[327,22,307,4,"finishedReconstruction"],[327,44,307,26,"finishedReconstruction"],[327,45,307,26],[327,47,307,29],[328,8,308,8],[328,12,308,12],[328,13,308,13,"reconPack"],[328,22,308,22],[328,25,308,25],[328,29,308,29],[329,8,309,8],[329,12,309,12],[329,13,309,13,"buffers"],[329,20,309,20],[329,23,309,23],[329,25,309,25],[330,6,310,4],[331,4,310,5],[332,2,310,5],[333,0,310,5],[333,3]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#constructor","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","isObject","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder#tryParse","Decoder.isPayloadValid","Decoder#destroy","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCqB;CDQ;OEI;ICM;KDE;IEO;KFc;IGI;KHsB;IIM;KJM;CFC;AOE;CPE;OQM;ICM;KDG;IEM;KFuC;IGO;KH6D;IIC;KJO;IKC;KLkB;IMI;KNK;CRC;AeS;ICC;KDI;IES;KFS;IGI;KHG;CfC"}},"type":"js/module"}]}