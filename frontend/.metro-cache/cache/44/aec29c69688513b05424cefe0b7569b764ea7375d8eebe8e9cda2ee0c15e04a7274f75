{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"]}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"]}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"]}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"]}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Manager = void 0;\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n  var _engine = require(_dependencyMap[6], \"engine.io-client\");\n  var _socket2 = require(_dependencyMap[7], \"./socket.js\");\n  var parser = _interopRequireWildcard(require(_dependencyMap[8], \"socket.io-parser\"));\n  var _on = require(_dependencyMap[9], \"./on.js\");\n  var _backo = require(_dependencyMap[10], \"./contrib/backo2.js\");\n  var _componentEmitter = require(_dependencyMap[11], \"@socket.io/component-emitter\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var Manager = exports.Manager = /*#__PURE__*/function (_Emitter) {\n    function Manager(uri, opts) {\n      var _this;\n      (0, _classCallCheck2.default)(this, Manager);\n      var _a;\n      _this = _callSuper(this, Manager);\n      _this.nsps = {};\n      _this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      _this.opts = opts;\n      (0, _engine.installTimerFunctions)(_this, opts);\n      _this.reconnection(opts.reconnection !== false);\n      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      _this.backoff = new _backo.Backoff({\n        min: _this.reconnectionDelay(),\n        max: _this.reconnectionDelayMax(),\n        jitter: _this.randomizationFactor()\n      });\n      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      _this._readyState = \"closed\";\n      _this.uri = uri;\n      var _parser = opts.parser || parser;\n      _this.encoder = new _parser.Encoder();\n      _this.decoder = new _parser.Decoder();\n      _this._autoConnect = opts.autoConnect !== false;\n      if (_this._autoConnect) _this.open();\n      return _this;\n    }\n    (0, _inherits2.default)(Manager, _Emitter);\n    return (0, _createClass2.default)(Manager, [{\n      key: \"reconnection\",\n      value: function reconnection(v) {\n        if (!arguments.length) return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n          this.skipReconnect = true;\n        }\n        return this;\n      }\n    }, {\n      key: \"reconnectionAttempts\",\n      value: function reconnectionAttempts(v) {\n        if (v === undefined) return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelay\",\n      value: function reconnectionDelay(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n      }\n    }, {\n      key: \"randomizationFactor\",\n      value: function randomizationFactor(v) {\n        var _a;\n        if (v === undefined) return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelayMax\",\n      value: function reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n      }\n    }, {\n      key: \"timeout\",\n      value: function timeout(v) {\n        if (!arguments.length) return this._timeout;\n        this._timeout = v;\n        return this;\n      }\n      /**\n       * Starts trying to reconnect if reconnection is enabled and we have not\n       * started reconnecting yet\n       *\n       * @private\n       */\n    }, {\n      key: \"maybeReconnectOnOpen\",\n      value: function maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n          // keeps reconnection from firing twice for the same reconnection loop\n          this.reconnect();\n        }\n      }\n      /**\n       * Sets the current transport `socket`.\n       *\n       * @param {Function} fn - optional, callback\n       * @return self\n       * @public\n       */\n    }, {\n      key: \"open\",\n      value: function open(fn) {\n        if (~this._readyState.indexOf(\"open\")) return this;\n        this.engine = new _engine.Socket(this.uri, this.opts);\n        var socket = this.engine;\n        var self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        var openSubDestroy = (0, _on.on)(socket, \"open\", function () {\n          self.onopen();\n          fn && fn();\n        });\n        var onError = err => {\n          this.cleanup();\n          this._readyState = \"closed\";\n          this.emitReserved(\"error\", err);\n          if (fn) {\n            fn(err);\n          } else {\n            // Only do this if there is no fn to handle the error\n            this.maybeReconnectOnOpen();\n          }\n        };\n        // emit `error`\n        var errorSub = (0, _on.on)(socket, \"error\", onError);\n        if (false !== this._timeout) {\n          var timeout = this._timeout;\n          // set timer\n          var timer = this.setTimeoutFn(() => {\n            openSubDestroy();\n            onError(new Error(\"timeout\"));\n            socket.close();\n          }, timeout);\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n          this.subs.push(() => {\n            this.clearTimeoutFn(timer);\n          });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n      }\n      /**\n       * Alias for open()\n       *\n       * @return self\n       * @public\n       */\n    }, {\n      key: \"connect\",\n      value: function connect(fn) {\n        return this.open(fn);\n      }\n      /**\n       * Called upon transport open.\n       *\n       * @private\n       */\n    }, {\n      key: \"onopen\",\n      value: function onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        var socket = this.engine;\n        this.subs.push((0, _on.on)(socket, \"ping\", this.onping.bind(this)), (0, _on.on)(socket, \"data\", this.ondata.bind(this)), (0, _on.on)(socket, \"error\", this.onerror.bind(this)), (0, _on.on)(socket, \"close\", this.onclose.bind(this)),\n        // @ts-ignore\n        (0, _on.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n      }\n      /**\n       * Called upon a ping.\n       *\n       * @private\n       */\n    }, {\n      key: \"onping\",\n      value: function onping() {\n        this.emitReserved(\"ping\");\n      }\n      /**\n       * Called with data.\n       *\n       * @private\n       */\n    }, {\n      key: \"ondata\",\n      value: function ondata(data) {\n        try {\n          this.decoder.add(data);\n        } catch (e) {\n          this.onclose(\"parse error\", e);\n        }\n      }\n      /**\n       * Called when parser fully decodes a packet.\n       *\n       * @private\n       */\n    }, {\n      key: \"ondecoded\",\n      value: function ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        (0, _engine.nextTick)(() => {\n          this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n      }\n      /**\n       * Called upon socket error.\n       *\n       * @private\n       */\n    }, {\n      key: \"onerror\",\n      value: function onerror(err) {\n        this.emitReserved(\"error\", err);\n      }\n      /**\n       * Creates a new socket for the given `nsp`.\n       *\n       * @return {Socket}\n       * @public\n       */\n    }, {\n      key: \"socket\",\n      value: function socket(nsp, opts) {\n        var socket = this.nsps[nsp];\n        if (!socket) {\n          socket = new _socket2.Socket(this, nsp, opts);\n          this.nsps[nsp] = socket;\n        } else if (this._autoConnect && !socket.active) {\n          socket.connect();\n        }\n        return socket;\n      }\n      /**\n       * Called upon a socket close.\n       *\n       * @param socket\n       * @private\n       */\n    }, {\n      key: \"_destroy\",\n      value: function _destroy(socket) {\n        var nsps = Object.keys(this.nsps);\n        for (var nsp of nsps) {\n          var _socket = this.nsps[nsp];\n          if (_socket.active) {\n            return;\n          }\n        }\n        this._close();\n      }\n      /**\n       * Writes a packet.\n       *\n       * @param packet\n       * @private\n       */\n    }, {\n      key: \"_packet\",\n      value: function _packet(packet) {\n        var encodedPackets = this.encoder.encode(packet);\n        for (var i = 0; i < encodedPackets.length; i++) {\n          this.engine.write(encodedPackets[i], packet.options);\n        }\n      }\n      /**\n       * Clean up transport subscriptions and packet buffer.\n       *\n       * @private\n       */\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n      }\n      /**\n       * Close the current socket.\n       *\n       * @private\n       */\n    }, {\n      key: \"_close\",\n      value: function _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n      }\n      /**\n       * Alias for close()\n       *\n       * @private\n       */\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        return this._close();\n      }\n      /**\n       * Called when:\n       *\n       * - the low-level engine is closed\n       * - the parser encountered a badly formatted packet\n       * - all sockets are disconnected\n       *\n       * @private\n       */\n    }, {\n      key: \"onclose\",\n      value: function onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n          this.reconnect();\n        }\n      }\n      /**\n       * Attempt a reconnection.\n       *\n       * @private\n       */\n    }, {\n      key: \"reconnect\",\n      value: function reconnect() {\n        if (this._reconnecting || this.skipReconnect) return this;\n        var self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n          this.backoff.reset();\n          this.emitReserved(\"reconnect_failed\");\n          this._reconnecting = false;\n        } else {\n          var delay = this.backoff.duration();\n          this._reconnecting = true;\n          var timer = this.setTimeoutFn(() => {\n            if (self.skipReconnect) return;\n            this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n            // check again for the case socket closed in above events\n            if (self.skipReconnect) return;\n            self.open(err => {\n              if (err) {\n                self._reconnecting = false;\n                self.reconnect();\n                this.emitReserved(\"reconnect_error\", err);\n              } else {\n                self.onreconnect();\n              }\n            });\n          }, delay);\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n          this.subs.push(() => {\n            this.clearTimeoutFn(timer);\n          });\n        }\n      }\n      /**\n       * Called upon successful reconnect.\n       *\n       * @private\n       */\n    }, {\n      key: \"onreconnect\",\n      value: function onreconnect() {\n        var attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n      }\n    }]);\n  }(_componentEmitter.Emitter);\n});","lineCount":415,"map":[[12,2,1,0],[12,6,1,0,"_engine"],[12,13,1,0],[12,16,1,0,"require"],[12,23,1,0],[12,24,1,0,"_dependencyMap"],[12,38,1,0],[13,2,2,0],[13,6,2,0,"_socket2"],[13,14,2,0],[13,17,2,0,"require"],[13,24,2,0],[13,25,2,0,"_dependencyMap"],[13,39,2,0],[14,2,3,0],[14,6,3,0,"parser"],[14,12,3,0],[14,15,3,0,"_interopRequireWildcard"],[14,38,3,0],[14,39,3,0,"require"],[14,46,3,0],[14,47,3,0,"_dependencyMap"],[14,61,3,0],[15,2,4,0],[15,6,4,0,"_on"],[15,9,4,0],[15,12,4,0,"require"],[15,19,4,0],[15,20,4,0,"_dependencyMap"],[15,34,4,0],[16,2,5,0],[16,6,5,0,"_backo"],[16,12,5,0],[16,15,5,0,"require"],[16,22,5,0],[16,23,5,0,"_dependencyMap"],[16,37,5,0],[17,2,6,0],[17,6,6,0,"_componentEmitter"],[17,23,6,0],[17,26,6,0,"require"],[17,33,6,0],[17,34,6,0,"_dependencyMap"],[17,48,6,0],[18,2,6,56],[18,11,6,56,"_interopRequireWildcard"],[18,35,6,56,"e"],[18,36,6,56],[18,38,6,56,"t"],[18,39,6,56],[18,68,6,56,"WeakMap"],[18,75,6,56],[18,81,6,56,"r"],[18,82,6,56],[18,89,6,56,"WeakMap"],[18,96,6,56],[18,100,6,56,"n"],[18,101,6,56],[18,108,6,56,"WeakMap"],[18,115,6,56],[18,127,6,56,"_interopRequireWildcard"],[18,150,6,56],[18,162,6,56,"_interopRequireWildcard"],[18,163,6,56,"e"],[18,164,6,56],[18,166,6,56,"t"],[18,167,6,56],[18,176,6,56,"t"],[18,177,6,56],[18,181,6,56,"e"],[18,182,6,56],[18,186,6,56,"e"],[18,187,6,56],[18,188,6,56,"__esModule"],[18,198,6,56],[18,207,6,56,"e"],[18,208,6,56],[18,214,6,56,"o"],[18,215,6,56],[18,217,6,56,"i"],[18,218,6,56],[18,220,6,56,"f"],[18,221,6,56],[18,226,6,56,"__proto__"],[18,235,6,56],[18,243,6,56,"default"],[18,250,6,56],[18,252,6,56,"e"],[18,253,6,56],[18,270,6,56,"e"],[18,271,6,56],[18,294,6,56,"e"],[18,295,6,56],[18,320,6,56,"e"],[18,321,6,56],[18,330,6,56,"f"],[18,331,6,56],[18,337,6,56,"o"],[18,338,6,56],[18,341,6,56,"t"],[18,342,6,56],[18,345,6,56,"n"],[18,346,6,56],[18,349,6,56,"r"],[18,350,6,56],[18,358,6,56,"o"],[18,359,6,56],[18,360,6,56,"has"],[18,363,6,56],[18,364,6,56,"e"],[18,365,6,56],[18,375,6,56,"o"],[18,376,6,56],[18,377,6,56,"get"],[18,380,6,56],[18,381,6,56,"e"],[18,382,6,56],[18,385,6,56,"o"],[18,386,6,56],[18,387,6,56,"set"],[18,390,6,56],[18,391,6,56,"e"],[18,392,6,56],[18,394,6,56,"f"],[18,395,6,56],[18,409,6,56,"_t"],[18,411,6,56],[18,415,6,56,"e"],[18,416,6,56],[18,432,6,56,"_t"],[18,434,6,56],[18,441,6,56,"hasOwnProperty"],[18,455,6,56],[18,456,6,56,"call"],[18,460,6,56],[18,461,6,56,"e"],[18,462,6,56],[18,464,6,56,"_t"],[18,466,6,56],[18,473,6,56,"i"],[18,474,6,56],[18,478,6,56,"o"],[18,479,6,56],[18,482,6,56,"Object"],[18,488,6,56],[18,489,6,56,"defineProperty"],[18,503,6,56],[18,508,6,56,"Object"],[18,514,6,56],[18,515,6,56,"getOwnPropertyDescriptor"],[18,539,6,56],[18,540,6,56,"e"],[18,541,6,56],[18,543,6,56,"_t"],[18,545,6,56],[18,552,6,56,"i"],[18,553,6,56],[18,554,6,56,"get"],[18,557,6,56],[18,561,6,56,"i"],[18,562,6,56],[18,563,6,56,"set"],[18,566,6,56],[18,570,6,56,"o"],[18,571,6,56],[18,572,6,56,"f"],[18,573,6,56],[18,575,6,56,"_t"],[18,577,6,56],[18,579,6,56,"i"],[18,580,6,56],[18,584,6,56,"f"],[18,585,6,56],[18,586,6,56,"_t"],[18,588,6,56],[18,592,6,56,"e"],[18,593,6,56],[18,594,6,56,"_t"],[18,596,6,56],[18,607,6,56,"f"],[18,608,6,56],[18,613,6,56,"e"],[18,614,6,56],[18,616,6,56,"t"],[18,617,6,56],[19,2,6,56],[19,11,6,56,"_callSuper"],[19,22,6,56,"t"],[19,23,6,56],[19,25,6,56,"o"],[19,26,6,56],[19,28,6,56,"e"],[19,29,6,56],[19,40,6,56,"o"],[19,41,6,56],[19,48,6,56,"_getPrototypeOf2"],[19,64,6,56],[19,65,6,56,"default"],[19,72,6,56],[19,74,6,56,"o"],[19,75,6,56],[19,82,6,56,"_possibleConstructorReturn2"],[19,109,6,56],[19,110,6,56,"default"],[19,117,6,56],[19,119,6,56,"t"],[19,120,6,56],[19,122,6,56,"_isNativeReflectConstruct"],[19,147,6,56],[19,152,6,56,"Reflect"],[19,159,6,56],[19,160,6,56,"construct"],[19,169,6,56],[19,170,6,56,"o"],[19,171,6,56],[19,173,6,56,"e"],[19,174,6,56],[19,186,6,56,"_getPrototypeOf2"],[19,202,6,56],[19,203,6,56,"default"],[19,210,6,56],[19,212,6,56,"t"],[19,213,6,56],[19,215,6,56,"constructor"],[19,226,6,56],[19,230,6,56,"o"],[19,231,6,56],[19,232,6,56,"apply"],[19,237,6,56],[19,238,6,56,"t"],[19,239,6,56],[19,241,6,56,"e"],[19,242,6,56],[20,2,6,56],[20,11,6,56,"_isNativeReflectConstruct"],[20,37,6,56],[20,51,6,56,"t"],[20,52,6,56],[20,56,6,56,"Boolean"],[20,63,6,56],[20,64,6,56,"prototype"],[20,73,6,56],[20,74,6,56,"valueOf"],[20,81,6,56],[20,82,6,56,"call"],[20,86,6,56],[20,87,6,56,"Reflect"],[20,94,6,56],[20,95,6,56,"construct"],[20,104,6,56],[20,105,6,56,"Boolean"],[20,112,6,56],[20,145,6,56,"t"],[20,146,6,56],[20,159,6,56,"_isNativeReflectConstruct"],[20,184,6,56],[20,196,6,56,"_isNativeReflectConstruct"],[20,197,6,56],[20,210,6,56,"t"],[20,211,6,56],[21,2,6,56],[21,6,7,13,"Manager"],[21,13,7,20],[21,16,7,20,"exports"],[21,23,7,20],[21,24,7,20,"Manager"],[21,31,7,20],[21,57,7,20,"_Emitter"],[21,65,7,20],[22,4,8,4],[22,13,8,4,"Manager"],[22,21,8,16,"uri"],[22,24,8,19],[22,26,8,21,"opts"],[22,30,8,25],[22,32,8,27],[23,6,8,27],[23,10,8,27,"_this"],[23,15,8,27],[24,6,8,27],[24,10,8,27,"_classCallCheck2"],[24,26,8,27],[24,27,8,27,"default"],[24,34,8,27],[24,42,8,27,"Manager"],[24,49,8,27],[25,6,9,8],[25,10,9,12,"_a"],[25,12,9,14],[26,6,10,8,"_this"],[26,11,10,8],[26,14,10,8,"_callSuper"],[26,24,10,8],[26,31,10,8,"Manager"],[26,38,10,8],[27,6,11,8,"_this"],[27,11,11,8],[27,12,11,13,"nsps"],[27,16,11,17],[27,19,11,20],[27,20,11,21],[27,21,11,22],[28,6,12,8,"_this"],[28,11,12,8],[28,12,12,13,"subs"],[28,16,12,17],[28,19,12,20],[28,21,12,22],[29,6,13,8],[29,10,13,12,"uri"],[29,13,13,15],[29,17,13,19],[29,25,13,27],[29,30,13,32],[29,37,13,39,"uri"],[29,40,13,42],[29,42,13,44],[30,8,14,12,"opts"],[30,12,14,16],[30,15,14,19,"uri"],[30,18,14,22],[31,8,15,12,"uri"],[31,11,15,15],[31,14,15,18,"undefined"],[31,23,15,27],[32,6,16,8],[33,6,17,8,"opts"],[33,10,17,12],[33,13,17,15,"opts"],[33,17,17,19],[33,21,17,23],[33,22,17,24],[33,23,17,25],[34,6,18,8,"opts"],[34,10,18,12],[34,11,18,13,"path"],[34,15,18,17],[34,18,18,20,"opts"],[34,22,18,24],[34,23,18,25,"path"],[34,27,18,29],[34,31,18,33],[34,43,18,45],[35,6,19,8,"_this"],[35,11,19,8],[35,12,19,13,"opts"],[35,16,19,17],[35,19,19,20,"opts"],[35,23,19,24],[36,6,20,8],[36,10,20,8,"installTimerFunctions"],[36,39,20,29],[36,41,20,29,"_this"],[36,46,20,29],[36,48,20,36,"opts"],[36,52,20,40],[36,53,20,41],[37,6,21,8,"_this"],[37,11,21,8],[37,12,21,13,"reconnection"],[37,24,21,25],[37,25,21,26,"opts"],[37,29,21,30],[37,30,21,31,"reconnection"],[37,42,21,43],[37,47,21,48],[37,52,21,53],[37,53,21,54],[38,6,22,8,"_this"],[38,11,22,8],[38,12,22,13,"reconnectionAttempts"],[38,32,22,33],[38,33,22,34,"opts"],[38,37,22,38],[38,38,22,39,"reconnectionAttempts"],[38,58,22,59],[38,62,22,63,"Infinity"],[38,70,22,71],[38,71,22,72],[39,6,23,8,"_this"],[39,11,23,8],[39,12,23,13,"reconnectionDelay"],[39,29,23,30],[39,30,23,31,"opts"],[39,34,23,35],[39,35,23,36,"reconnectionDelay"],[39,52,23,53],[39,56,23,57],[39,60,23,61],[39,61,23,62],[40,6,24,8,"_this"],[40,11,24,8],[40,12,24,13,"reconnectionDelayMax"],[40,32,24,33],[40,33,24,34,"opts"],[40,37,24,38],[40,38,24,39,"reconnectionDelayMax"],[40,58,24,59],[40,62,24,63],[40,66,24,67],[40,67,24,68],[41,6,25,8,"_this"],[41,11,25,8],[41,12,25,13,"randomizationFactor"],[41,31,25,32],[41,32,25,33],[41,33,25,34,"_a"],[41,35,25,36],[41,38,25,39,"opts"],[41,42,25,43],[41,43,25,44,"randomizationFactor"],[41,62,25,63],[41,68,25,69],[41,72,25,73],[41,76,25,77,"_a"],[41,78,25,79],[41,83,25,84],[41,88,25,89],[41,89,25,90],[41,92,25,93,"_a"],[41,94,25,95],[41,97,25,98],[41,100,25,101],[41,101,25,102],[42,6,26,8,"_this"],[42,11,26,8],[42,12,26,13,"backoff"],[42,19,26,20],[42,22,26,23],[42,26,26,27,"Backoff"],[42,40,26,34],[42,41,26,35],[43,8,27,12,"min"],[43,11,27,15],[43,13,27,17,"_this"],[43,18,27,17],[43,19,27,22,"reconnectionDelay"],[43,36,27,39],[43,37,27,40],[43,38,27,41],[44,8,28,12,"max"],[44,11,28,15],[44,13,28,17,"_this"],[44,18,28,17],[44,19,28,22,"reconnectionDelayMax"],[44,39,28,42],[44,40,28,43],[44,41,28,44],[45,8,29,12,"jitter"],[45,14,29,18],[45,16,29,20,"_this"],[45,21,29,20],[45,22,29,25,"randomizationFactor"],[45,41,29,44],[45,42,29,45],[46,6,30,8],[46,7,30,9],[46,8,30,10],[47,6,31,8,"_this"],[47,11,31,8],[47,12,31,13,"timeout"],[47,19,31,20],[47,20,31,21],[47,24,31,25],[47,28,31,29,"opts"],[47,32,31,33],[47,33,31,34,"timeout"],[47,40,31,41],[47,43,31,44],[47,48,31,49],[47,51,31,52,"opts"],[47,55,31,56],[47,56,31,57,"timeout"],[47,63,31,64],[47,64,31,65],[48,6,32,8,"_this"],[48,11,32,8],[48,12,32,13,"_readyState"],[48,23,32,24],[48,26,32,27],[48,34,32,35],[49,6,33,8,"_this"],[49,11,33,8],[49,12,33,13,"uri"],[49,15,33,16],[49,18,33,19,"uri"],[49,21,33,22],[50,6,34,8],[50,10,34,14,"_parser"],[50,17,34,21],[50,20,34,24,"opts"],[50,24,34,28],[50,25,34,29,"parser"],[50,31,34,35],[50,35,34,39,"parser"],[50,41,34,45],[51,6,35,8,"_this"],[51,11,35,8],[51,12,35,13,"encoder"],[51,19,35,20],[51,22,35,23],[51,26,35,27,"_parser"],[51,33,35,34],[51,34,35,35,"Encoder"],[51,41,35,42],[51,42,35,43],[51,43,35,44],[52,6,36,8,"_this"],[52,11,36,8],[52,12,36,13,"decoder"],[52,19,36,20],[52,22,36,23],[52,26,36,27,"_parser"],[52,33,36,34],[52,34,36,35,"Decoder"],[52,41,36,42],[52,42,36,43],[52,43,36,44],[53,6,37,8,"_this"],[53,11,37,8],[53,12,37,13,"_autoConnect"],[53,24,37,25],[53,27,37,28,"opts"],[53,31,37,32],[53,32,37,33,"autoConnect"],[53,43,37,44],[53,48,37,49],[53,53,37,54],[54,6,38,8],[54,10,38,12,"_this"],[54,15,38,12],[54,16,38,17,"_autoConnect"],[54,28,38,29],[54,30,39,12,"_this"],[54,35,39,12],[54,36,39,17,"open"],[54,40,39,21],[54,41,39,22],[54,42,39,23],[55,6,39,24],[55,13,39,24,"_this"],[55,18,39,24],[56,4,40,4],[57,4,40,5],[57,8,40,5,"_inherits2"],[57,18,40,5],[57,19,40,5,"default"],[57,26,40,5],[57,28,40,5,"Manager"],[57,35,40,5],[57,37,40,5,"_Emitter"],[57,45,40,5],[58,4,40,5],[58,15,40,5,"_createClass2"],[58,28,40,5],[58,29,40,5,"default"],[58,36,40,5],[58,38,40,5,"Manager"],[58,45,40,5],[59,6,40,5,"key"],[59,9,40,5],[60,6,40,5,"value"],[60,11,40,5],[60,13,41,4],[60,22,41,4,"reconnection"],[60,34,41,16,"reconnection"],[60,35,41,17,"v"],[60,36,41,18],[60,38,41,20],[61,8,42,8],[61,12,42,12],[61,13,42,13,"arguments"],[61,22,42,22],[61,23,42,23,"length"],[61,29,42,29],[61,31,43,12],[61,38,43,19],[61,42,43,23],[61,43,43,24,"_reconnection"],[61,56,43,37],[62,8,44,8],[62,12,44,12],[62,13,44,13,"_reconnection"],[62,26,44,26],[62,29,44,29],[62,30,44,30],[62,31,44,31,"v"],[62,32,44,32],[63,8,45,8],[63,12,45,12],[63,13,45,13,"v"],[63,14,45,14],[63,16,45,16],[64,10,46,12],[64,14,46,16],[64,15,46,17,"skipReconnect"],[64,28,46,30],[64,31,46,33],[64,35,46,37],[65,8,47,8],[66,8,48,8],[66,15,48,15],[66,19,48,19],[67,6,49,4],[68,4,49,5],[69,6,49,5,"key"],[69,9,49,5],[70,6,49,5,"value"],[70,11,49,5],[70,13,50,4],[70,22,50,4,"reconnectionAttempts"],[70,42,50,24,"reconnectionAttempts"],[70,43,50,25,"v"],[70,44,50,26],[70,46,50,28],[71,8,51,8],[71,12,51,12,"v"],[71,13,51,13],[71,18,51,18,"undefined"],[71,27,51,27],[71,29,52,12],[71,36,52,19],[71,40,52,23],[71,41,52,24,"_reconnectionAttempts"],[71,62,52,45],[72,8,53,8],[72,12,53,12],[72,13,53,13,"_reconnectionAttempts"],[72,34,53,34],[72,37,53,37,"v"],[72,38,53,38],[73,8,54,8],[73,15,54,15],[73,19,54,19],[74,6,55,4],[75,4,55,5],[76,6,55,5,"key"],[76,9,55,5],[77,6,55,5,"value"],[77,11,55,5],[77,13,56,4],[77,22,56,4,"reconnectionDelay"],[77,39,56,21,"reconnectionDelay"],[77,40,56,22,"v"],[77,41,56,23],[77,43,56,25],[78,8,57,8],[78,12,57,12,"_a"],[78,14,57,14],[79,8,58,8],[79,12,58,12,"v"],[79,13,58,13],[79,18,58,18,"undefined"],[79,27,58,27],[79,29,59,12],[79,36,59,19],[79,40,59,23],[79,41,59,24,"_reconnectionDelay"],[79,59,59,42],[80,8,60,8],[80,12,60,12],[80,13,60,13,"_reconnectionDelay"],[80,31,60,31],[80,34,60,34,"v"],[80,35,60,35],[81,8,61,8],[81,9,61,9,"_a"],[81,11,61,11],[81,14,61,14],[81,18,61,18],[81,19,61,19,"backoff"],[81,26,61,26],[81,32,61,32],[81,36,61,36],[81,40,61,40,"_a"],[81,42,61,42],[81,47,61,47],[81,52,61,52],[81,53,61,53],[81,56,61,56],[81,61,61,61],[81,62,61,62],[81,65,61,65,"_a"],[81,67,61,67],[81,68,61,68,"setMin"],[81,74,61,74],[81,75,61,75,"v"],[81,76,61,76],[81,77,61,77],[82,8,62,8],[82,15,62,15],[82,19,62,19],[83,6,63,4],[84,4,63,5],[85,6,63,5,"key"],[85,9,63,5],[86,6,63,5,"value"],[86,11,63,5],[86,13,64,4],[86,22,64,4,"randomizationFactor"],[86,41,64,23,"randomizationFactor"],[86,42,64,24,"v"],[86,43,64,25],[86,45,64,27],[87,8,65,8],[87,12,65,12,"_a"],[87,14,65,14],[88,8,66,8],[88,12,66,12,"v"],[88,13,66,13],[88,18,66,18,"undefined"],[88,27,66,27],[88,29,67,12],[88,36,67,19],[88,40,67,23],[88,41,67,24,"_randomizationFactor"],[88,61,67,44],[89,8,68,8],[89,12,68,12],[89,13,68,13,"_randomizationFactor"],[89,33,68,33],[89,36,68,36,"v"],[89,37,68,37],[90,8,69,8],[90,9,69,9,"_a"],[90,11,69,11],[90,14,69,14],[90,18,69,18],[90,19,69,19,"backoff"],[90,26,69,26],[90,32,69,32],[90,36,69,36],[90,40,69,40,"_a"],[90,42,69,42],[90,47,69,47],[90,52,69,52],[90,53,69,53],[90,56,69,56],[90,61,69,61],[90,62,69,62],[90,65,69,65,"_a"],[90,67,69,67],[90,68,69,68,"setJitter"],[90,77,69,77],[90,78,69,78,"v"],[90,79,69,79],[90,80,69,80],[91,8,70,8],[91,15,70,15],[91,19,70,19],[92,6,71,4],[93,4,71,5],[94,6,71,5,"key"],[94,9,71,5],[95,6,71,5,"value"],[95,11,71,5],[95,13,72,4],[95,22,72,4,"reconnectionDelayMax"],[95,42,72,24,"reconnectionDelayMax"],[95,43,72,25,"v"],[95,44,72,26],[95,46,72,28],[96,8,73,8],[96,12,73,12,"_a"],[96,14,73,14],[97,8,74,8],[97,12,74,12,"v"],[97,13,74,13],[97,18,74,18,"undefined"],[97,27,74,27],[97,29,75,12],[97,36,75,19],[97,40,75,23],[97,41,75,24,"_reconnectionDelayMax"],[97,62,75,45],[98,8,76,8],[98,12,76,12],[98,13,76,13,"_reconnectionDelayMax"],[98,34,76,34],[98,37,76,37,"v"],[98,38,76,38],[99,8,77,8],[99,9,77,9,"_a"],[99,11,77,11],[99,14,77,14],[99,18,77,18],[99,19,77,19,"backoff"],[99,26,77,26],[99,32,77,32],[99,36,77,36],[99,40,77,40,"_a"],[99,42,77,42],[99,47,77,47],[99,52,77,52],[99,53,77,53],[99,56,77,56],[99,61,77,61],[99,62,77,62],[99,65,77,65,"_a"],[99,67,77,67],[99,68,77,68,"setMax"],[99,74,77,74],[99,75,77,75,"v"],[99,76,77,76],[99,77,77,77],[100,8,78,8],[100,15,78,15],[100,19,78,19],[101,6,79,4],[102,4,79,5],[103,6,79,5,"key"],[103,9,79,5],[104,6,79,5,"value"],[104,11,79,5],[104,13,80,4],[104,22,80,4,"timeout"],[104,29,80,11,"timeout"],[104,30,80,12,"v"],[104,31,80,13],[104,33,80,15],[105,8,81,8],[105,12,81,12],[105,13,81,13,"arguments"],[105,22,81,22],[105,23,81,23,"length"],[105,29,81,29],[105,31,82,12],[105,38,82,19],[105,42,82,23],[105,43,82,24,"_timeout"],[105,51,82,32],[106,8,83,8],[106,12,83,12],[106,13,83,13,"_timeout"],[106,21,83,21],[106,24,83,24,"v"],[106,25,83,25],[107,8,84,8],[107,15,84,15],[107,19,84,19],[108,6,85,4],[109,6,86,4],[110,0,87,0],[111,0,88,0],[112,0,89,0],[113,0,90,0],[114,0,91,0],[115,4,86,4],[116,6,86,4,"key"],[116,9,86,4],[117,6,86,4,"value"],[117,11,86,4],[117,13,92,4],[117,22,92,4,"maybeReconnectOnOpen"],[117,42,92,24,"maybeReconnectOnOpen"],[117,43,92,24],[117,45,92,27],[118,8,93,8],[119,8,94,8],[119,12,94,12],[119,13,94,13],[119,17,94,17],[119,18,94,18,"_reconnecting"],[119,31,94,31],[119,35,95,12],[119,39,95,16],[119,40,95,17,"_reconnection"],[119,53,95,30],[119,57,96,12],[119,61,96,16],[119,62,96,17,"backoff"],[119,69,96,24],[119,70,96,25,"attempts"],[119,78,96,33],[119,83,96,38],[119,84,96,39],[119,86,96,41],[120,10,97,12],[121,10,98,12],[121,14,98,16],[121,15,98,17,"reconnect"],[121,24,98,26],[121,25,98,27],[121,26,98,28],[122,8,99,8],[123,6,100,4],[124,6,101,4],[125,0,102,0],[126,0,103,0],[127,0,104,0],[128,0,105,0],[129,0,106,0],[130,0,107,0],[131,4,101,4],[132,6,101,4,"key"],[132,9,101,4],[133,6,101,4,"value"],[133,11,101,4],[133,13,108,4],[133,22,108,4,"open"],[133,26,108,8,"open"],[133,27,108,9,"fn"],[133,29,108,11],[133,31,108,13],[134,8,109,8],[134,12,109,12],[134,13,109,13],[134,17,109,17],[134,18,109,18,"_readyState"],[134,29,109,29],[134,30,109,30,"indexOf"],[134,37,109,37],[134,38,109,38],[134,44,109,44],[134,45,109,45],[134,47,110,12],[134,54,110,19],[134,58,110,23],[135,8,111,8],[135,12,111,12],[135,13,111,13,"engine"],[135,19,111,19],[135,22,111,22],[135,26,111,26,"Engine"],[135,40,111,32],[135,41,111,33],[135,45,111,37],[135,46,111,38,"uri"],[135,49,111,41],[135,51,111,43],[135,55,111,47],[135,56,111,48,"opts"],[135,60,111,52],[135,61,111,53],[136,8,112,8],[136,12,112,14,"socket"],[136,18,112,20],[136,21,112,23],[136,25,112,27],[136,26,112,28,"engine"],[136,32,112,34],[137,8,113,8],[137,12,113,14,"self"],[137,16,113,18],[137,19,113,21],[137,23,113,25],[138,8,114,8],[138,12,114,12],[138,13,114,13,"_readyState"],[138,24,114,24],[138,27,114,27],[138,36,114,36],[139,8,115,8],[139,12,115,12],[139,13,115,13,"skipReconnect"],[139,26,115,26],[139,29,115,29],[139,34,115,34],[140,8,116,8],[141,8,117,8],[141,12,117,14,"openSubDestroy"],[141,26,117,28],[141,29,117,31],[141,33,117,31,"on"],[141,39,117,33],[141,41,117,34,"socket"],[141,47,117,40],[141,49,117,42],[141,55,117,48],[141,57,117,50],[141,69,117,62],[142,10,118,12,"self"],[142,14,118,16],[142,15,118,17,"onopen"],[142,21,118,23],[142,22,118,24],[142,23,118,25],[143,10,119,12,"fn"],[143,12,119,14],[143,16,119,18,"fn"],[143,18,119,20],[143,19,119,21],[143,20,119,22],[144,8,120,8],[144,9,120,9],[144,10,120,10],[145,8,121,8],[145,12,121,14,"onError"],[145,19,121,21],[145,22,121,25,"err"],[145,25,121,28],[145,29,121,33],[146,10,122,12],[146,14,122,16],[146,15,122,17,"cleanup"],[146,22,122,24],[146,23,122,25],[146,24,122,26],[147,10,123,12],[147,14,123,16],[147,15,123,17,"_readyState"],[147,26,123,28],[147,29,123,31],[147,37,123,39],[148,10,124,12],[148,14,124,16],[148,15,124,17,"emitReserved"],[148,27,124,29],[148,28,124,30],[148,35,124,37],[148,37,124,39,"err"],[148,40,124,42],[148,41,124,43],[149,10,125,12],[149,14,125,16,"fn"],[149,16,125,18],[149,18,125,20],[150,12,126,16,"fn"],[150,14,126,18],[150,15,126,19,"err"],[150,18,126,22],[150,19,126,23],[151,10,127,12],[151,11,127,13],[151,17,128,17],[152,12,129,16],[153,12,130,16],[153,16,130,20],[153,17,130,21,"maybeReconnectOnOpen"],[153,37,130,41],[153,38,130,42],[153,39,130,43],[154,10,131,12],[155,8,132,8],[155,9,132,9],[156,8,133,8],[157,8,134,8],[157,12,134,14,"errorSub"],[157,20,134,22],[157,23,134,25],[157,27,134,25,"on"],[157,33,134,27],[157,35,134,28,"socket"],[157,41,134,34],[157,43,134,36],[157,50,134,43],[157,52,134,45,"onError"],[157,59,134,52],[157,60,134,53],[158,8,135,8],[158,12,135,12],[158,17,135,17],[158,22,135,22],[158,26,135,26],[158,27,135,27,"_timeout"],[158,35,135,35],[158,37,135,37],[159,10,136,12],[159,14,136,18,"timeout"],[159,21,136,25],[159,24,136,28],[159,28,136,32],[159,29,136,33,"_timeout"],[159,37,136,41],[160,10,137,12],[161,10,138,12],[161,14,138,18,"timer"],[161,19,138,23],[161,22,138,26],[161,26,138,30],[161,27,138,31,"setTimeoutFn"],[161,39,138,43],[161,40,138,44],[161,46,138,50],[162,12,139,16,"openSubDestroy"],[162,26,139,30],[162,27,139,31],[162,28,139,32],[163,12,140,16,"onError"],[163,19,140,23],[163,20,140,24],[163,24,140,28,"Error"],[163,29,140,33],[163,30,140,34],[163,39,140,43],[163,40,140,44],[163,41,140,45],[164,12,141,16,"socket"],[164,18,141,22],[164,19,141,23,"close"],[164,24,141,28],[164,25,141,29],[164,26,141,30],[165,10,142,12],[165,11,142,13],[165,13,142,15,"timeout"],[165,20,142,22],[165,21,142,23],[166,10,143,12],[166,14,143,16],[166,18,143,20],[166,19,143,21,"opts"],[166,23,143,25],[166,24,143,26,"autoUnref"],[166,33,143,35],[166,35,143,37],[167,12,144,16,"timer"],[167,17,144,21],[167,18,144,22,"unref"],[167,23,144,27],[167,24,144,28],[167,25,144,29],[168,10,145,12],[169,10,146,12],[169,14,146,16],[169,15,146,17,"subs"],[169,19,146,21],[169,20,146,22,"push"],[169,24,146,26],[169,25,146,27],[169,31,146,33],[170,12,147,16],[170,16,147,20],[170,17,147,21,"clearTimeoutFn"],[170,31,147,35],[170,32,147,36,"timer"],[170,37,147,41],[170,38,147,42],[171,10,148,12],[171,11,148,13],[171,12,148,14],[172,8,149,8],[173,8,150,8],[173,12,150,12],[173,13,150,13,"subs"],[173,17,150,17],[173,18,150,18,"push"],[173,22,150,22],[173,23,150,23,"openSubDestroy"],[173,37,150,37],[173,38,150,38],[174,8,151,8],[174,12,151,12],[174,13,151,13,"subs"],[174,17,151,17],[174,18,151,18,"push"],[174,22,151,22],[174,23,151,23,"errorSub"],[174,31,151,31],[174,32,151,32],[175,8,152,8],[175,15,152,15],[175,19,152,19],[176,6,153,4],[177,6,154,4],[178,0,155,0],[179,0,156,0],[180,0,157,0],[181,0,158,0],[182,0,159,0],[183,4,154,4],[184,6,154,4,"key"],[184,9,154,4],[185,6,154,4,"value"],[185,11,154,4],[185,13,160,4],[185,22,160,4,"connect"],[185,29,160,11,"connect"],[185,30,160,12,"fn"],[185,32,160,14],[185,34,160,16],[186,8,161,8],[186,15,161,15],[186,19,161,19],[186,20,161,20,"open"],[186,24,161,24],[186,25,161,25,"fn"],[186,27,161,27],[186,28,161,28],[187,6,162,4],[188,6,163,4],[189,0,164,0],[190,0,165,0],[191,0,166,0],[192,0,167,0],[193,4,163,4],[194,6,163,4,"key"],[194,9,163,4],[195,6,163,4,"value"],[195,11,163,4],[195,13,168,4],[195,22,168,4,"onopen"],[195,28,168,10,"onopen"],[195,29,168,10],[195,31,168,13],[196,8,169,8],[197,8,170,8],[197,12,170,12],[197,13,170,13,"cleanup"],[197,20,170,20],[197,21,170,21],[197,22,170,22],[198,8,171,8],[199,8,172,8],[199,12,172,12],[199,13,172,13,"_readyState"],[199,24,172,24],[199,27,172,27],[199,33,172,33],[200,8,173,8],[200,12,173,12],[200,13,173,13,"emitReserved"],[200,25,173,25],[200,26,173,26],[200,32,173,32],[200,33,173,33],[201,8,174,8],[202,8,175,8],[202,12,175,14,"socket"],[202,18,175,20],[202,21,175,23],[202,25,175,27],[202,26,175,28,"engine"],[202,32,175,34],[203,8,176,8],[203,12,176,12],[203,13,176,13,"subs"],[203,17,176,17],[203,18,176,18,"push"],[203,22,176,22],[203,23,176,23],[203,27,176,23,"on"],[203,33,176,25],[203,35,176,26,"socket"],[203,41,176,32],[203,43,176,34],[203,49,176,40],[203,51,176,42],[203,55,176,46],[203,56,176,47,"onping"],[203,62,176,53],[203,63,176,54,"bind"],[203,67,176,58],[203,68,176,59],[203,72,176,63],[203,73,176,64],[203,74,176,65],[203,76,176,67],[203,80,176,67,"on"],[203,86,176,69],[203,88,176,70,"socket"],[203,94,176,76],[203,96,176,78],[203,102,176,84],[203,104,176,86],[203,108,176,90],[203,109,176,91,"ondata"],[203,115,176,97],[203,116,176,98,"bind"],[203,120,176,102],[203,121,176,103],[203,125,176,107],[203,126,176,108],[203,127,176,109],[203,129,176,111],[203,133,176,111,"on"],[203,139,176,113],[203,141,176,114,"socket"],[203,147,176,120],[203,149,176,122],[203,156,176,129],[203,158,176,131],[203,162,176,135],[203,163,176,136,"onerror"],[203,170,176,143],[203,171,176,144,"bind"],[203,175,176,148],[203,176,176,149],[203,180,176,153],[203,181,176,154],[203,182,176,155],[203,184,176,157],[203,188,176,157,"on"],[203,194,176,159],[203,196,176,160,"socket"],[203,202,176,166],[203,204,176,168],[203,211,176,175],[203,213,176,177],[203,217,176,181],[203,218,176,182,"onclose"],[203,225,176,189],[203,226,176,190,"bind"],[203,230,176,194],[203,231,176,195],[203,235,176,199],[203,236,176,200],[203,237,176,201],[204,8,177,8],[205,8,178,8],[205,12,178,8,"on"],[205,18,178,10],[205,20,178,11],[205,24,178,15],[205,25,178,16,"decoder"],[205,32,178,23],[205,34,178,25],[205,43,178,34],[205,45,178,36],[205,49,178,40],[205,50,178,41,"ondecoded"],[205,59,178,50],[205,60,178,51,"bind"],[205,64,178,55],[205,65,178,56],[205,69,178,60],[205,70,178,61],[205,71,178,62],[205,72,178,63],[206,6,179,4],[207,6,180,4],[208,0,181,0],[209,0,182,0],[210,0,183,0],[211,0,184,0],[212,4,180,4],[213,6,180,4,"key"],[213,9,180,4],[214,6,180,4,"value"],[214,11,180,4],[214,13,185,4],[214,22,185,4,"onping"],[214,28,185,10,"onping"],[214,29,185,10],[214,31,185,13],[215,8,186,8],[215,12,186,12],[215,13,186,13,"emitReserved"],[215,25,186,25],[215,26,186,26],[215,32,186,32],[215,33,186,33],[216,6,187,4],[217,6,188,4],[218,0,189,0],[219,0,190,0],[220,0,191,0],[221,0,192,0],[222,4,188,4],[223,6,188,4,"key"],[223,9,188,4],[224,6,188,4,"value"],[224,11,188,4],[224,13,193,4],[224,22,193,4,"ondata"],[224,28,193,10,"ondata"],[224,29,193,11,"data"],[224,33,193,15],[224,35,193,17],[225,8,194,8],[225,12,194,12],[226,10,195,12],[226,14,195,16],[226,15,195,17,"decoder"],[226,22,195,24],[226,23,195,25,"add"],[226,26,195,28],[226,27,195,29,"data"],[226,31,195,33],[226,32,195,34],[227,8,196,8],[227,9,196,9],[227,10,197,8],[227,17,197,15,"e"],[227,18,197,16],[227,20,197,18],[228,10,198,12],[228,14,198,16],[228,15,198,17,"onclose"],[228,22,198,24],[228,23,198,25],[228,36,198,38],[228,38,198,40,"e"],[228,39,198,41],[228,40,198,42],[229,8,199,8],[230,6,200,4],[231,6,201,4],[232,0,202,0],[233,0,203,0],[234,0,204,0],[235,0,205,0],[236,4,201,4],[237,6,201,4,"key"],[237,9,201,4],[238,6,201,4,"value"],[238,11,201,4],[238,13,206,4],[238,22,206,4,"ondecoded"],[238,31,206,13,"ondecoded"],[238,32,206,14,"packet"],[238,38,206,20],[238,40,206,22],[239,8,207,8],[240,8,208,8],[240,12,208,8,"nextTick"],[240,28,208,16],[240,30,208,17],[240,36,208,23],[241,10,209,12],[241,14,209,16],[241,15,209,17,"emitReserved"],[241,27,209,29],[241,28,209,30],[241,36,209,38],[241,38,209,40,"packet"],[241,44,209,46],[241,45,209,47],[242,8,210,8],[242,9,210,9],[242,11,210,11],[242,15,210,15],[242,16,210,16,"setTimeoutFn"],[242,28,210,28],[242,29,210,29],[243,6,211,4],[244,6,212,4],[245,0,213,0],[246,0,214,0],[247,0,215,0],[248,0,216,0],[249,4,212,4],[250,6,212,4,"key"],[250,9,212,4],[251,6,212,4,"value"],[251,11,212,4],[251,13,217,4],[251,22,217,4,"onerror"],[251,29,217,11,"onerror"],[251,30,217,12,"err"],[251,33,217,15],[251,35,217,17],[252,8,218,8],[252,12,218,12],[252,13,218,13,"emitReserved"],[252,25,218,25],[252,26,218,26],[252,33,218,33],[252,35,218,35,"err"],[252,38,218,38],[252,39,218,39],[253,6,219,4],[254,6,220,4],[255,0,221,0],[256,0,222,0],[257,0,223,0],[258,0,224,0],[259,0,225,0],[260,4,220,4],[261,6,220,4,"key"],[261,9,220,4],[262,6,220,4,"value"],[262,11,220,4],[262,13,226,4],[262,22,226,4,"socket"],[262,28,226,10,"socket"],[262,29,226,11,"nsp"],[262,32,226,14],[262,34,226,16,"opts"],[262,38,226,20],[262,40,226,22],[263,8,227,8],[263,12,227,12,"socket"],[263,18,227,18],[263,21,227,21],[263,25,227,25],[263,26,227,26,"nsps"],[263,30,227,30],[263,31,227,31,"nsp"],[263,34,227,34],[263,35,227,35],[264,8,228,8],[264,12,228,12],[264,13,228,13,"socket"],[264,19,228,19],[264,21,228,21],[265,10,229,12,"socket"],[265,16,229,18],[265,19,229,21],[265,23,229,25,"Socket"],[265,38,229,31],[265,39,229,32],[265,43,229,36],[265,45,229,38,"nsp"],[265,48,229,41],[265,50,229,43,"opts"],[265,54,229,47],[265,55,229,48],[266,10,230,12],[266,14,230,16],[266,15,230,17,"nsps"],[266,19,230,21],[266,20,230,22,"nsp"],[266,23,230,25],[266,24,230,26],[266,27,230,29,"socket"],[266,33,230,35],[267,8,231,8],[267,9,231,9],[267,15,232,13],[267,19,232,17],[267,23,232,21],[267,24,232,22,"_autoConnect"],[267,36,232,34],[267,40,232,38],[267,41,232,39,"socket"],[267,47,232,45],[267,48,232,46,"active"],[267,54,232,52],[267,56,232,54],[268,10,233,12,"socket"],[268,16,233,18],[268,17,233,19,"connect"],[268,24,233,26],[268,25,233,27],[268,26,233,28],[269,8,234,8],[270,8,235,8],[270,15,235,15,"socket"],[270,21,235,21],[271,6,236,4],[272,6,237,4],[273,0,238,0],[274,0,239,0],[275,0,240,0],[276,0,241,0],[277,0,242,0],[278,4,237,4],[279,6,237,4,"key"],[279,9,237,4],[280,6,237,4,"value"],[280,11,237,4],[280,13,243,4],[280,22,243,4,"_destroy"],[280,30,243,12,"_destroy"],[280,31,243,13,"socket"],[280,37,243,19],[280,39,243,21],[281,8,244,8],[281,12,244,14,"nsps"],[281,16,244,18],[281,19,244,21,"Object"],[281,25,244,27],[281,26,244,28,"keys"],[281,30,244,32],[281,31,244,33],[281,35,244,37],[281,36,244,38,"nsps"],[281,40,244,42],[281,41,244,43],[282,8,245,8],[282,13,245,13],[282,17,245,19,"nsp"],[282,20,245,22],[282,24,245,26,"nsps"],[282,28,245,30],[282,30,245,32],[283,10,246,12],[283,14,246,18,"socket"],[283,21,246,24],[283,24,246,27],[283,28,246,31],[283,29,246,32,"nsps"],[283,33,246,36],[283,34,246,37,"nsp"],[283,37,246,40],[283,38,246,41],[284,10,247,12],[284,14,247,16,"socket"],[284,21,247,22],[284,22,247,23,"active"],[284,28,247,29],[284,30,247,31],[285,12,248,16],[286,10,249,12],[287,8,250,8],[288,8,251,8],[288,12,251,12],[288,13,251,13,"_close"],[288,19,251,19],[288,20,251,20],[288,21,251,21],[289,6,252,4],[290,6,253,4],[291,0,254,0],[292,0,255,0],[293,0,256,0],[294,0,257,0],[295,0,258,0],[296,4,253,4],[297,6,253,4,"key"],[297,9,253,4],[298,6,253,4,"value"],[298,11,253,4],[298,13,259,4],[298,22,259,4,"_packet"],[298,29,259,11,"_packet"],[298,30,259,12,"packet"],[298,36,259,18],[298,38,259,20],[299,8,260,8],[299,12,260,14,"encodedPackets"],[299,26,260,28],[299,29,260,31],[299,33,260,35],[299,34,260,36,"encoder"],[299,41,260,43],[299,42,260,44,"encode"],[299,48,260,50],[299,49,260,51,"packet"],[299,55,260,57],[299,56,260,58],[300,8,261,8],[300,13,261,13],[300,17,261,17,"i"],[300,18,261,18],[300,21,261,21],[300,22,261,22],[300,24,261,24,"i"],[300,25,261,25],[300,28,261,28,"encodedPackets"],[300,42,261,42],[300,43,261,43,"length"],[300,49,261,49],[300,51,261,51,"i"],[300,52,261,52],[300,54,261,54],[300,56,261,56],[301,10,262,12],[301,14,262,16],[301,15,262,17,"engine"],[301,21,262,23],[301,22,262,24,"write"],[301,27,262,29],[301,28,262,30,"encodedPackets"],[301,42,262,44],[301,43,262,45,"i"],[301,44,262,46],[301,45,262,47],[301,47,262,49,"packet"],[301,53,262,55],[301,54,262,56,"options"],[301,61,262,63],[301,62,262,64],[302,8,263,8],[303,6,264,4],[304,6,265,4],[305,0,266,0],[306,0,267,0],[307,0,268,0],[308,0,269,0],[309,4,265,4],[310,6,265,4,"key"],[310,9,265,4],[311,6,265,4,"value"],[311,11,265,4],[311,13,270,4],[311,22,270,4,"cleanup"],[311,29,270,11,"cleanup"],[311,30,270,11],[311,32,270,14],[312,8,271,8],[312,12,271,12],[312,13,271,13,"subs"],[312,17,271,17],[312,18,271,18,"forEach"],[312,25,271,25],[312,26,271,27,"subDestroy"],[312,36,271,37],[312,40,271,42,"subDestroy"],[312,50,271,52],[312,51,271,53],[312,52,271,54],[312,53,271,55],[313,8,272,8],[313,12,272,12],[313,13,272,13,"subs"],[313,17,272,17],[313,18,272,18,"length"],[313,24,272,24],[313,27,272,27],[313,28,272,28],[314,8,273,8],[314,12,273,12],[314,13,273,13,"decoder"],[314,20,273,20],[314,21,273,21,"destroy"],[314,28,273,28],[314,29,273,29],[314,30,273,30],[315,6,274,4],[316,6,275,4],[317,0,276,0],[318,0,277,0],[319,0,278,0],[320,0,279,0],[321,4,275,4],[322,6,275,4,"key"],[322,9,275,4],[323,6,275,4,"value"],[323,11,275,4],[323,13,280,4],[323,22,280,4,"_close"],[323,28,280,10,"_close"],[323,29,280,10],[323,31,280,13],[324,8,281,8],[324,12,281,12],[324,13,281,13,"skipReconnect"],[324,26,281,26],[324,29,281,29],[324,33,281,33],[325,8,282,8],[325,12,282,12],[325,13,282,13,"_reconnecting"],[325,26,282,26],[325,29,282,29],[325,34,282,34],[326,8,283,8],[326,12,283,12],[326,13,283,13,"onclose"],[326,20,283,20],[326,21,283,21],[326,35,283,35],[326,36,283,36],[327,6,284,4],[328,6,285,4],[329,0,286,0],[330,0,287,0],[331,0,288,0],[332,0,289,0],[333,4,285,4],[334,6,285,4,"key"],[334,9,285,4],[335,6,285,4,"value"],[335,11,285,4],[335,13,290,4],[335,22,290,4,"disconnect"],[335,32,290,14,"disconnect"],[335,33,290,14],[335,35,290,17],[336,8,291,8],[336,15,291,15],[336,19,291,19],[336,20,291,20,"_close"],[336,26,291,26],[336,27,291,27],[336,28,291,28],[337,6,292,4],[338,6,293,4],[339,0,294,0],[340,0,295,0],[341,0,296,0],[342,0,297,0],[343,0,298,0],[344,0,299,0],[345,0,300,0],[346,0,301,0],[347,4,293,4],[348,6,293,4,"key"],[348,9,293,4],[349,6,293,4,"value"],[349,11,293,4],[349,13,302,4],[349,22,302,4,"onclose"],[349,29,302,11,"onclose"],[349,30,302,12,"reason"],[349,36,302,18],[349,38,302,20,"description"],[349,49,302,31],[349,51,302,33],[350,8,303,8],[350,12,303,12,"_a"],[350,14,303,14],[351,8,304,8],[351,12,304,12],[351,13,304,13,"cleanup"],[351,20,304,20],[351,21,304,21],[351,22,304,22],[352,8,305,8],[352,9,305,9,"_a"],[352,11,305,11],[352,14,305,14],[352,18,305,18],[352,19,305,19,"engine"],[352,25,305,25],[352,31,305,31],[352,35,305,35],[352,39,305,39,"_a"],[352,41,305,41],[352,46,305,46],[352,51,305,51],[352,52,305,52],[352,55,305,55],[352,60,305,60],[352,61,305,61],[352,64,305,64,"_a"],[352,66,305,66],[352,67,305,67,"close"],[352,72,305,72],[352,73,305,73],[352,74,305,74],[353,8,306,8],[353,12,306,12],[353,13,306,13,"backoff"],[353,20,306,20],[353,21,306,21,"reset"],[353,26,306,26],[353,27,306,27],[353,28,306,28],[354,8,307,8],[354,12,307,12],[354,13,307,13,"_readyState"],[354,24,307,24],[354,27,307,27],[354,35,307,35],[355,8,308,8],[355,12,308,12],[355,13,308,13,"emitReserved"],[355,25,308,25],[355,26,308,26],[355,33,308,33],[355,35,308,35,"reason"],[355,41,308,41],[355,43,308,43,"description"],[355,54,308,54],[355,55,308,55],[356,8,309,8],[356,12,309,12],[356,16,309,16],[356,17,309,17,"_reconnection"],[356,30,309,30],[356,34,309,34],[356,35,309,35],[356,39,309,39],[356,40,309,40,"skipReconnect"],[356,53,309,53],[356,55,309,55],[357,10,310,12],[357,14,310,16],[357,15,310,17,"reconnect"],[357,24,310,26],[357,25,310,27],[357,26,310,28],[358,8,311,8],[359,6,312,4],[360,6,313,4],[361,0,314,0],[362,0,315,0],[363,0,316,0],[364,0,317,0],[365,4,313,4],[366,6,313,4,"key"],[366,9,313,4],[367,6,313,4,"value"],[367,11,313,4],[367,13,318,4],[367,22,318,4,"reconnect"],[367,31,318,13,"reconnect"],[367,32,318,13],[367,34,318,16],[368,8,319,8],[368,12,319,12],[368,16,319,16],[368,17,319,17,"_reconnecting"],[368,30,319,30],[368,34,319,34],[368,38,319,38],[368,39,319,39,"skipReconnect"],[368,52,319,52],[368,54,320,12],[368,61,320,19],[368,65,320,23],[369,8,321,8],[369,12,321,14,"self"],[369,16,321,18],[369,19,321,21],[369,23,321,25],[370,8,322,8],[370,12,322,12],[370,16,322,16],[370,17,322,17,"backoff"],[370,24,322,24],[370,25,322,25,"attempts"],[370,33,322,33],[370,37,322,37],[370,41,322,41],[370,42,322,42,"_reconnectionAttempts"],[370,63,322,63],[370,65,322,65],[371,10,323,12],[371,14,323,16],[371,15,323,17,"backoff"],[371,22,323,24],[371,23,323,25,"reset"],[371,28,323,30],[371,29,323,31],[371,30,323,32],[372,10,324,12],[372,14,324,16],[372,15,324,17,"emitReserved"],[372,27,324,29],[372,28,324,30],[372,46,324,48],[372,47,324,49],[373,10,325,12],[373,14,325,16],[373,15,325,17,"_reconnecting"],[373,28,325,30],[373,31,325,33],[373,36,325,38],[374,8,326,8],[374,9,326,9],[374,15,327,13],[375,10,328,12],[375,14,328,18,"delay"],[375,19,328,23],[375,22,328,26],[375,26,328,30],[375,27,328,31,"backoff"],[375,34,328,38],[375,35,328,39,"duration"],[375,43,328,47],[375,44,328,48],[375,45,328,49],[376,10,329,12],[376,14,329,16],[376,15,329,17,"_reconnecting"],[376,28,329,30],[376,31,329,33],[376,35,329,37],[377,10,330,12],[377,14,330,18,"timer"],[377,19,330,23],[377,22,330,26],[377,26,330,30],[377,27,330,31,"setTimeoutFn"],[377,39,330,43],[377,40,330,44],[377,46,330,50],[378,12,331,16],[378,16,331,20,"self"],[378,20,331,24],[378,21,331,25,"skipReconnect"],[378,34,331,38],[378,36,332,20],[379,12,333,16],[379,16,333,20],[379,17,333,21,"emitReserved"],[379,29,333,33],[379,30,333,34],[379,49,333,53],[379,51,333,55,"self"],[379,55,333,59],[379,56,333,60,"backoff"],[379,63,333,67],[379,64,333,68,"attempts"],[379,72,333,76],[379,73,333,77],[380,12,334,16],[381,12,335,16],[381,16,335,20,"self"],[381,20,335,24],[381,21,335,25,"skipReconnect"],[381,34,335,38],[381,36,336,20],[382,12,337,16,"self"],[382,16,337,20],[382,17,337,21,"open"],[382,21,337,25],[382,22,337,27,"err"],[382,25,337,30],[382,29,337,35],[383,14,338,20],[383,18,338,24,"err"],[383,21,338,27],[383,23,338,29],[384,16,339,24,"self"],[384,20,339,28],[384,21,339,29,"_reconnecting"],[384,34,339,42],[384,37,339,45],[384,42,339,50],[385,16,340,24,"self"],[385,20,340,28],[385,21,340,29,"reconnect"],[385,30,340,38],[385,31,340,39],[385,32,340,40],[386,16,341,24],[386,20,341,28],[386,21,341,29,"emitReserved"],[386,33,341,41],[386,34,341,42],[386,51,341,59],[386,53,341,61,"err"],[386,56,341,64],[386,57,341,65],[387,14,342,20],[387,15,342,21],[387,21,343,25],[388,16,344,24,"self"],[388,20,344,28],[388,21,344,29,"onreconnect"],[388,32,344,40],[388,33,344,41],[388,34,344,42],[389,14,345,20],[390,12,346,16],[390,13,346,17],[390,14,346,18],[391,10,347,12],[391,11,347,13],[391,13,347,15,"delay"],[391,18,347,20],[391,19,347,21],[392,10,348,12],[392,14,348,16],[392,18,348,20],[392,19,348,21,"opts"],[392,23,348,25],[392,24,348,26,"autoUnref"],[392,33,348,35],[392,35,348,37],[393,12,349,16,"timer"],[393,17,349,21],[393,18,349,22,"unref"],[393,23,349,27],[393,24,349,28],[393,25,349,29],[394,10,350,12],[395,10,351,12],[395,14,351,16],[395,15,351,17,"subs"],[395,19,351,21],[395,20,351,22,"push"],[395,24,351,26],[395,25,351,27],[395,31,351,33],[396,12,352,16],[396,16,352,20],[396,17,352,21,"clearTimeoutFn"],[396,31,352,35],[396,32,352,36,"timer"],[396,37,352,41],[396,38,352,42],[397,10,353,12],[397,11,353,13],[397,12,353,14],[398,8,354,8],[399,6,355,4],[400,6,356,4],[401,0,357,0],[402,0,358,0],[403,0,359,0],[404,0,360,0],[405,4,356,4],[406,6,356,4,"key"],[406,9,356,4],[407,6,356,4,"value"],[407,11,356,4],[407,13,361,4],[407,22,361,4,"onreconnect"],[407,33,361,15,"onreconnect"],[407,34,361,15],[407,36,361,18],[408,8,362,8],[408,12,362,14,"attempt"],[408,19,362,21],[408,22,362,24],[408,26,362,28],[408,27,362,29,"backoff"],[408,34,362,36],[408,35,362,37,"attempts"],[408,43,362,45],[409,8,363,8],[409,12,363,12],[409,13,363,13,"_reconnecting"],[409,26,363,26],[409,29,363,29],[409,34,363,34],[410,8,364,8],[410,12,364,12],[410,13,364,13,"backoff"],[410,20,364,20],[410,21,364,21,"reset"],[410,26,364,26],[410,27,364,27],[410,28,364,28],[411,8,365,8],[411,12,365,12],[411,13,365,13,"emitReserved"],[411,25,365,25],[411,26,365,26],[411,37,365,37],[411,39,365,39,"attempt"],[411,46,365,46],[411,47,365,47],[412,6,366,4],[413,4,366,5],[414,2,366,5],[414,4,7,29,"Emitter"],[414,29,7,36],[415,0,7,36],[415,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCM;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCS;SDG;wBEC;SFW;4CGM;aHI;2BII;aJE;KTK;IcO;KdE;IeM;KfW;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBE;IqBO;KrBU;IsBO;KtBS;IuBO;KvBK;IwBM;0BCC,4BD;KxBG;I0BM;K1BI;I2BM;K3BE;I4BU;K5BU;I6BM;4CjBY;0BkBO;iBlBS;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"}},"type":"js/module"}]}