{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/get","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"7RhWyTq5i/X0UNOgMT1VkjxHPX0=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/readOnlyError","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"tW9vjPH6bEH6zBBMaoehmzXhDcQ=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"./transports/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"7CLKJUHLWOUmn3xjjCK2YLx/ESU=","exportNames":["*"]}},{"name":"./util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":62,"index":136}}],"key":"+UpHPazG/Yk8JnTjB6d2Eo+vUl4=","exportNames":["*"]}},{"name":"./contrib/parseqs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":46,"index":183}}],"key":"BJ+q1MtlpK8TmoXWscM6udPVjkM=","exportNames":["*"]}},{"name":"./contrib/parseuri.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":46,"index":230}}],"key":"5FHL6vc7rbDf51XGIsZLRdNOJXo=","exportNames":["*"]}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":55,"index":286}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":287},"end":{"line":6,"column":44,"index":331}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}},{"name":"./globals.node.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":332},"end":{"line":7,"column":82,"index":414}}],"key":"9IvwYHBhshdIr/kWH4ou0H+0FaM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.SocketWithoutUpgrade = exports.SocketWithUpgrade = exports.Socket = void 0;\n  var _get2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/get\"));\n  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/readOnlyError\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7], \"@babel/runtime/helpers/inherits\"));\n  var _index = require(_dependencyMap[8], \"./transports/index.js\");\n  var _util = require(_dependencyMap[9], \"./util.js\");\n  var _parseqs = require(_dependencyMap[10], \"./contrib/parseqs.js\");\n  var _parseuri = require(_dependencyMap[11], \"./contrib/parseuri.js\");\n  var _componentEmitter = require(_dependencyMap[12], \"@socket.io/component-emitter\");\n  var _engine = require(_dependencyMap[13], \"engine.io-parser\");\n  var _globalsNode = require(_dependencyMap[14], \"./globals.node.js\");\n  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  var OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n      OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  var SocketWithoutUpgrade = exports.SocketWithoutUpgrade = /*#__PURE__*/function (_Emitter) {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    function SocketWithoutUpgrade(uri, opts) {\n      var _this;\n      (0, _classCallCheck2.default)(this, SocketWithoutUpgrade);\n      _this = _callSuper(this, SocketWithoutUpgrade);\n      _this.binaryType = _globalsNode.defaultBinaryType;\n      _this.writeBuffer = [];\n      _this._prevBufferLen = 0;\n      _this._pingInterval = -1;\n      _this._pingTimeout = -1;\n      _this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      _this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        var parsedUri = (0, _parseuri.parse)(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = (0, _parseuri.parse)(opts.host).host;\n      }\n      (0, _util.installTimerFunctions)(_this, opts);\n      _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = _this.secure ? \"443\" : \"80\";\n      }\n      _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n      _this.transports = [];\n      _this._transportsByName = {};\n      opts.transports.forEach(t => {\n        var transportName = t.prototype.name;\n        _this.transports.push(transportName);\n        _this._transportsByName[transportName] = t;\n      });\n      _this.opts = Object.assign({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof _this.opts.query === \"string\") {\n        _this.opts.query = (0, _parseqs.decode)(_this.opts.query);\n      }\n      if (withEventListeners) {\n        if (_this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          _this._beforeunloadEventListener = () => {\n            if (_this.transport) {\n              // silently close the transport\n              _this.transport.removeAllListeners();\n              _this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", _this._beforeunloadEventListener, false);\n        }\n        if (_this.hostname !== \"localhost\") {\n          _this._offlineEventListener = () => {\n            _this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(_this._offlineEventListener);\n        }\n      }\n      if (_this.opts.withCredentials) {\n        _this._cookieJar = (0, _globalsNode.createCookieJar)();\n      }\n      _this._open();\n      return _this;\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    (0, _inherits2.default)(SocketWithoutUpgrade, _Emitter);\n    return (0, _createClass2.default)(SocketWithoutUpgrade, [{\n      key: \"createTransport\",\n      value: function createTransport(name) {\n        var query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = _engine.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id) query.sid = this.id;\n        var opts = Object.assign({}, this.opts, {\n          query,\n          socket: this,\n          hostname: this.hostname,\n          secure: this.secure,\n          port: this.port\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n      }\n      /**\n       * Initializes transport to use and starts probe.\n       *\n       * @private\n       */\n    }, {\n      key: \"_open\",\n      value: function _open() {\n        if (this.transports.length === 0) {\n          // Emit error on next tick so it can be listened to\n          this.setTimeoutFn(() => {\n            this.emitReserved(\"error\", \"No transports available\");\n          }, 0);\n          return;\n        }\n        var transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n        this.readyState = \"opening\";\n        var transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n      }\n      /**\n       * Sets the current transport. Disables the existing one (if any).\n       *\n       * @private\n       */\n    }, {\n      key: \"setTransport\",\n      value: function setTransport(transport) {\n        if (this.transport) {\n          this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n      }\n      /**\n       * Called when connection is deemed open.\n       *\n       * @private\n       */\n    }, {\n      key: \"onOpen\",\n      value: function onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n      }\n      /**\n       * Handles a packet.\n       *\n       * @private\n       */\n    }, {\n      key: \"_onPacket\",\n      value: function _onPacket(packet) {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n          this.emitReserved(\"packet\", packet);\n          // Socket is live - any packet counts\n          this.emitReserved(\"heartbeat\");\n          switch (packet.type) {\n            case \"open\":\n              this.onHandshake(JSON.parse(packet.data));\n              break;\n            case \"ping\":\n              this._sendPacket(\"pong\");\n              this.emitReserved(\"ping\");\n              this.emitReserved(\"pong\");\n              this._resetPingTimeout();\n              break;\n            case \"error\":\n              var err = new Error(\"server error\");\n              // @ts-ignore\n              err.code = packet.data;\n              this._onError(err);\n              break;\n            case \"message\":\n              this.emitReserved(\"data\", packet.data);\n              this.emitReserved(\"message\", packet.data);\n              break;\n          }\n        } else {}\n      }\n      /**\n       * Called upon handshake completion.\n       *\n       * @param {Object} data - handshake obj\n       * @private\n       */\n    }, {\n      key: \"onHandshake\",\n      value: function onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState) return;\n        this._resetPingTimeout();\n      }\n      /**\n       * Sets and resets ping timeout timer based on server pings.\n       *\n       * @private\n       */\n    }, {\n      key: \"_resetPingTimeout\",\n      value: function _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        var delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n          this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n          this._pingTimeoutTimer.unref();\n        }\n      }\n      /**\n       * Called on `drain` event\n       *\n       * @private\n       */\n    }, {\n      key: \"_onDrain\",\n      value: function _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n          this.emitReserved(\"drain\");\n        } else {\n          this.flush();\n        }\n      }\n      /**\n       * Flush write buffers.\n       *\n       * @private\n       */\n    }, {\n      key: \"flush\",\n      value: function flush() {\n        if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n          var packets = this._getWritablePackets();\n          this.transport.send(packets);\n          // keep track of current length of writeBuffer\n          // splice writeBuffer and callbackBuffer on `drain`\n          this._prevBufferLen = packets.length;\n          this.emitReserved(\"flush\");\n        }\n      }\n      /**\n       * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n       * long-polling)\n       *\n       * @private\n       */\n    }, {\n      key: \"_getWritablePackets\",\n      value: function _getWritablePackets() {\n        var shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n          return this.writeBuffer;\n        }\n        var payloadSize = 1; // first packet type\n        for (var i = 0; i < this.writeBuffer.length; i++) {\n          var data = this.writeBuffer[i].data;\n          if (data) {\n            payloadSize += (0, _util.byteLength)(data);\n          }\n          if (i > 0 && payloadSize > this._maxPayload) {\n            return this.writeBuffer.slice(0, i);\n          }\n          payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n      }\n      /**\n       * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n       *\n       * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n       * `write()` method then the message would not be buffered by the Socket.IO client.\n       *\n       * @return {boolean}\n       * @private\n       */\n      /* private */\n    }, {\n      key: \"_hasPingExpired\",\n      value: function _hasPingExpired() {\n        if (!this._pingTimeoutTime) return true;\n        var hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n          this._pingTimeoutTime = 0;\n          (0, _globalsNode.nextTick)(() => {\n            this._onClose(\"ping timeout\");\n          }, this.setTimeoutFn);\n        }\n        return hasExpired;\n      }\n      /**\n       * Sends a message.\n       *\n       * @param {String} msg - message.\n       * @param {Object} options.\n       * @param {Function} fn - callback function.\n       * @return {Socket} for chaining.\n       */\n    }, {\n      key: \"write\",\n      value: function write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n      }\n      /**\n       * Sends a message. Alias of {@link Socket#write}.\n       *\n       * @param {String} msg - message.\n       * @param {Object} options.\n       * @param {Function} fn - callback function.\n       * @return {Socket} for chaining.\n       */\n    }, {\n      key: \"send\",\n      value: function send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n      }\n      /**\n       * Sends a packet.\n       *\n       * @param {String} type: packet type.\n       * @param {String} data.\n       * @param {Object} options.\n       * @param {Function} fn - callback function.\n       * @private\n       */\n    }, {\n      key: \"_sendPacket\",\n      value: function _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n          fn = data;\n          data = undefined;\n        }\n        if (\"function\" === typeof options) {\n          fn = options;\n          options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n          return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        var packet = {\n          type: type,\n          data: data,\n          options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn) this.once(\"flush\", fn);\n        this.flush();\n      }\n      /**\n       * Closes the connection.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        var close = () => {\n          this._onClose(\"forced close\");\n          this.transport.close();\n        };\n        var cleanupAndClose = () => {\n          this.off(\"upgrade\", cleanupAndClose);\n          this.off(\"upgradeError\", cleanupAndClose);\n          close();\n        };\n        var waitForUpgrade = () => {\n          // wait for upgrade to finish since we can't send packets while pausing a transport\n          this.once(\"upgrade\", cleanupAndClose);\n          this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n          this.readyState = \"closing\";\n          if (this.writeBuffer.length) {\n            this.once(\"drain\", () => {\n              if (this.upgrading) {\n                waitForUpgrade();\n              } else {\n                close();\n              }\n            });\n          } else if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        }\n        return this;\n      }\n      /**\n       * Called upon transport error\n       *\n       * @private\n       */\n    }, {\n      key: \"_onError\",\n      value: function _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n          this.transports.shift();\n          return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n      }\n      /**\n       * Called upon transport close.\n       *\n       * @private\n       */\n    }, {\n      key: \"_onClose\",\n      value: function _onClose(reason, description) {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n          // clear timers\n          this.clearTimeoutFn(this._pingTimeoutTimer);\n          // stop event from firing again for transport\n          this.transport.removeAllListeners(\"close\");\n          // ensure transport won't stay open\n          this.transport.close();\n          // ignore further transport communication\n          this.transport.removeAllListeners();\n          if (withEventListeners) {\n            if (this._beforeunloadEventListener) {\n              removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this._offlineEventListener) {\n              var i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n              if (i !== -1) {\n                OFFLINE_EVENT_LISTENERS.splice(i, 1);\n              }\n            }\n          }\n          // set ready state\n          this.readyState = \"closed\";\n          // clear session id\n          this.id = null;\n          // emit close event\n          this.emitReserved(\"close\", reason, description);\n          // clean buffers after, so users can still\n          // grab the buffers on `close` event\n          this.writeBuffer = [];\n          this._prevBufferLen = 0;\n        }\n      }\n    }]);\n  }(_componentEmitter.Emitter);\n  SocketWithoutUpgrade.protocol = _engine.protocol;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  var SocketWithUpgrade = exports.SocketWithUpgrade = /*#__PURE__*/function (_SocketWithoutUpgrade) {\n    function SocketWithUpgrade() {\n      var _this2;\n      (0, _classCallCheck2.default)(this, SocketWithUpgrade);\n      _this2 = _callSuper(this, SocketWithUpgrade, arguments);\n      _this2._upgrades = [];\n      return _this2;\n    }\n    (0, _inherits2.default)(SocketWithUpgrade, _SocketWithoutUpgrade);\n    return (0, _createClass2.default)(SocketWithUpgrade, [{\n      key: \"onOpen\",\n      value: function onOpen() {\n        _superPropGet(SocketWithUpgrade, \"onOpen\", this, 3)([]);\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n          for (var i = 0; i < this._upgrades.length; i++) {\n            this._probe(this._upgrades[i]);\n          }\n        }\n      }\n      /**\n       * Probes a transport.\n       *\n       * @param {String} name - transport name\n       * @private\n       */\n    }, {\n      key: \"_probe\",\n      value: function _probe(name) {\n        var transport = this.createTransport(name);\n        var failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        var onTransportOpen = () => {\n          if (failed) return;\n          transport.send([{\n            type: \"ping\",\n            data: \"probe\"\n          }]);\n          transport.once(\"packet\", msg => {\n            if (failed) return;\n            if (\"pong\" === msg.type && \"probe\" === msg.data) {\n              this.upgrading = true;\n              this.emitReserved(\"upgrading\", transport);\n              if (!transport) return;\n              SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n              this.transport.pause(() => {\n                if (failed) return;\n                if (\"closed\" === this.readyState) return;\n                cleanup();\n                this.setTransport(transport);\n                transport.send([{\n                  type: \"upgrade\"\n                }]);\n                this.emitReserved(\"upgrade\", transport);\n                transport = null;\n                this.upgrading = false;\n                this.flush();\n              });\n            } else {\n              var err = new Error(\"probe error\");\n              // @ts-ignore\n              err.transport = transport.name;\n              this.emitReserved(\"upgradeError\", err);\n            }\n          });\n        };\n        function freezeTransport() {\n          if (failed) return;\n          // Any callback called by transport should be ignored since now\n          failed = true;\n          cleanup();\n          transport.close();\n          transport = null;\n        }\n        // Handle any error that happens while probing\n        var onerror = err => {\n          var error = new Error(\"probe error: \" + err);\n          // @ts-ignore\n          error.transport = transport.name;\n          freezeTransport();\n          this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n          onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n          onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n          if (transport && to.name !== transport.name) {\n            freezeTransport();\n          }\n        }\n        // Remove all listeners on the transport and on self\n        var cleanup = () => {\n          transport.removeListener(\"open\", onTransportOpen);\n          transport.removeListener(\"error\", onerror);\n          transport.removeListener(\"close\", onTransportClose);\n          this.off(\"close\", onclose);\n          this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n          // favor WebTransport\n          this.setTimeoutFn(() => {\n            if (!failed) {\n              transport.open();\n            }\n          }, 200);\n        } else {\n          transport.open();\n        }\n      }\n    }, {\n      key: \"onHandshake\",\n      value: function onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        _superPropGet(SocketWithUpgrade, \"onHandshake\", this, 3)([data]);\n      }\n      /**\n       * Filters upgrades, returning only those matching client transports.\n       *\n       * @param {Array} upgrades - server upgrades\n       * @private\n       */\n    }, {\n      key: \"_filterUpgrades\",\n      value: function _filterUpgrades(upgrades) {\n        var filteredUpgrades = [];\n        for (var i = 0; i < upgrades.length; i++) {\n          if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n      }\n    }]);\n  }(SocketWithoutUpgrade);\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  var Socket = exports.Socket = /*#__PURE__*/function (_SocketWithUpgrade) {\n    function Socket(uri) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      (0, _classCallCheck2.default)(this, Socket);\n      var o = typeof uri === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => _index.transports[transportName]).filter(t => !!t);\n      }\n      return _callSuper(this, Socket, [uri, o]);\n    }\n    (0, _inherits2.default)(Socket, _SocketWithUpgrade);\n    return (0, _createClass2.default)(Socket);\n  }(SocketWithUpgrade);\n});","lineCount":745,"map":[[14,2,1,0],[14,6,1,0,"_index"],[14,12,1,0],[14,15,1,0,"require"],[14,22,1,0],[14,23,1,0,"_dependencyMap"],[14,37,1,0],[15,2,2,0],[15,6,2,0,"_util"],[15,11,2,0],[15,14,2,0,"require"],[15,21,2,0],[15,22,2,0,"_dependencyMap"],[15,36,2,0],[16,2,3,0],[16,6,3,0,"_parseqs"],[16,14,3,0],[16,17,3,0,"require"],[16,24,3,0],[16,25,3,0,"_dependencyMap"],[16,39,3,0],[17,2,4,0],[17,6,4,0,"_parseuri"],[17,15,4,0],[17,18,4,0,"require"],[17,25,4,0],[17,26,4,0,"_dependencyMap"],[17,40,4,0],[18,2,5,0],[18,6,5,0,"_componentEmitter"],[18,23,5,0],[18,26,5,0,"require"],[18,33,5,0],[18,34,5,0,"_dependencyMap"],[18,48,5,0],[19,2,6,0],[19,6,6,0,"_engine"],[19,13,6,0],[19,16,6,0,"require"],[19,23,6,0],[19,24,6,0,"_dependencyMap"],[19,38,6,0],[20,2,7,0],[20,6,7,0,"_globalsNode"],[20,18,7,0],[20,21,7,0,"require"],[20,28,7,0],[20,29,7,0,"_dependencyMap"],[20,43,7,0],[21,2,7,82],[21,11,7,82,"_superPropGet"],[21,25,7,82,"t"],[21,26,7,82],[21,28,7,82,"o"],[21,29,7,82],[21,31,7,82,"e"],[21,32,7,82],[21,34,7,82,"r"],[21,35,7,82],[21,43,7,82,"p"],[21,44,7,82],[21,51,7,82,"_get2"],[21,56,7,82],[21,57,7,82,"default"],[21,64,7,82],[21,70,7,82,"_getPrototypeOf2"],[21,86,7,82],[21,87,7,82,"default"],[21,94,7,82],[21,100,7,82,"r"],[21,101,7,82],[21,104,7,82,"t"],[21,105,7,82],[21,106,7,82,"prototype"],[21,115,7,82],[21,118,7,82,"t"],[21,119,7,82],[21,122,7,82,"o"],[21,123,7,82],[21,125,7,82,"e"],[21,126,7,82],[21,140,7,82,"r"],[21,141,7,82],[21,166,7,82,"p"],[21,167,7,82],[21,180,7,82,"t"],[21,181,7,82],[21,192,7,82,"p"],[21,193,7,82],[21,194,7,82,"apply"],[21,199,7,82],[21,200,7,82,"e"],[21,201,7,82],[21,203,7,82,"t"],[21,204,7,82],[21,211,7,82,"p"],[21,212,7,82],[22,2,7,82],[22,11,7,82,"_callSuper"],[22,22,7,82,"t"],[22,23,7,82],[22,25,7,82,"o"],[22,26,7,82],[22,28,7,82,"e"],[22,29,7,82],[22,40,7,82,"o"],[22,41,7,82],[22,48,7,82,"_getPrototypeOf2"],[22,64,7,82],[22,65,7,82,"default"],[22,72,7,82],[22,74,7,82,"o"],[22,75,7,82],[22,82,7,82,"_possibleConstructorReturn2"],[22,109,7,82],[22,110,7,82,"default"],[22,117,7,82],[22,119,7,82,"t"],[22,120,7,82],[22,122,7,82,"_isNativeReflectConstruct"],[22,147,7,82],[22,152,7,82,"Reflect"],[22,159,7,82],[22,160,7,82,"construct"],[22,169,7,82],[22,170,7,82,"o"],[22,171,7,82],[22,173,7,82,"e"],[22,174,7,82],[22,186,7,82,"_getPrototypeOf2"],[22,202,7,82],[22,203,7,82,"default"],[22,210,7,82],[22,212,7,82,"t"],[22,213,7,82],[22,215,7,82,"constructor"],[22,226,7,82],[22,230,7,82,"o"],[22,231,7,82],[22,232,7,82,"apply"],[22,237,7,82],[22,238,7,82,"t"],[22,239,7,82],[22,241,7,82,"e"],[22,242,7,82],[23,2,7,82],[23,11,7,82,"_isNativeReflectConstruct"],[23,37,7,82],[23,51,7,82,"t"],[23,52,7,82],[23,56,7,82,"Boolean"],[23,63,7,82],[23,64,7,82,"prototype"],[23,73,7,82],[23,74,7,82,"valueOf"],[23,81,7,82],[23,82,7,82,"call"],[23,86,7,82],[23,87,7,82,"Reflect"],[23,94,7,82],[23,95,7,82,"construct"],[23,104,7,82],[23,105,7,82,"Boolean"],[23,112,7,82],[23,145,7,82,"t"],[23,146,7,82],[23,159,7,82,"_isNativeReflectConstruct"],[23,184,7,82],[23,196,7,82,"_isNativeReflectConstruct"],[23,197,7,82],[23,210,7,82,"t"],[23,211,7,82],[24,2,8,0],[24,6,8,6,"withEventListeners"],[24,24,8,24],[24,27,8,27],[24,34,8,34,"addEventListener"],[24,50,8,50],[24,55,8,55],[24,65,8,65],[24,69,9,4],[24,76,9,11,"removeEventListener"],[24,95,9,30],[24,100,9,35],[24,110,9,45],[25,2,10,0],[25,6,10,6,"OFFLINE_EVENT_LISTENERS"],[25,29,10,29],[25,32,10,32],[25,34,10,34],[26,2,11,0],[26,6,11,4,"withEventListeners"],[26,24,11,22],[26,26,11,24],[27,4,12,4],[28,4,13,4],[29,4,14,4,"addEventListener"],[29,20,14,20],[29,21,14,21],[29,30,14,30],[29,32,14,32],[29,38,14,38],[30,6,15,8,"OFFLINE_EVENT_LISTENERS"],[30,29,15,31],[30,30,15,32,"forEach"],[30,37,15,39],[30,38,15,41,"listener"],[30,46,15,49],[30,50,15,54,"listener"],[30,58,15,62],[30,59,15,63],[30,60,15,64],[30,61,15,65],[31,4,16,4],[31,5,16,5],[31,7,16,7],[31,12,16,12],[31,13,16,13],[32,2,17,0],[33,2,18,0],[34,0,19,0],[35,0,20,0],[36,0,21,0],[37,0,22,0],[38,0,23,0],[39,0,24,0],[40,0,25,0],[41,0,26,0],[42,0,27,0],[43,0,28,0],[44,0,29,0],[45,0,30,0],[46,0,31,0],[47,0,32,0],[48,0,33,0],[49,0,34,0],[50,0,35,0],[51,0,36,0],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,0,40,0],[56,2,18,0],[56,6,41,13,"SocketWithoutUpgrade"],[56,26,41,33],[56,29,41,33,"exports"],[56,36,41,33],[56,37,41,33,"SocketWithoutUpgrade"],[56,57,41,33],[56,83,41,33,"_Emitter"],[56,91,41,33],[57,4,42,4],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,4,48,4],[63,13,48,4,"SocketWithoutUpgrade"],[63,34,48,16,"uri"],[63,37,48,19],[63,39,48,21,"opts"],[63,43,48,25],[63,45,48,27],[64,6,48,27],[64,10,48,27,"_this"],[64,15,48,27],[65,6,48,27],[65,10,48,27,"_classCallCheck2"],[65,26,48,27],[65,27,48,27,"default"],[65,34,48,27],[65,42,48,27,"SocketWithoutUpgrade"],[65,62,48,27],[66,6,49,8,"_this"],[66,11,49,8],[66,14,49,8,"_callSuper"],[66,24,49,8],[66,31,49,8,"SocketWithoutUpgrade"],[66,51,49,8],[67,6,50,8,"_this"],[67,11,50,8],[67,12,50,13,"binaryType"],[67,22,50,23],[67,25,50,26,"defaultBinaryType"],[67,55,50,43],[68,6,51,8,"_this"],[68,11,51,8],[68,12,51,13,"writeBuffer"],[68,23,51,24],[68,26,51,27],[68,28,51,29],[69,6,52,8,"_this"],[69,11,52,8],[69,12,52,13,"_prevBufferLen"],[69,26,52,27],[69,29,52,30],[69,30,52,31],[70,6,53,8,"_this"],[70,11,53,8],[70,12,53,13,"_pingInterval"],[70,25,53,26],[70,28,53,29],[70,29,53,30],[70,30,53,31],[71,6,54,8,"_this"],[71,11,54,8],[71,12,54,13,"_pingTimeout"],[71,24,54,25],[71,27,54,28],[71,28,54,29],[71,29,54,30],[72,6,55,8,"_this"],[72,11,55,8],[72,12,55,13,"_maxPayload"],[72,23,55,24],[72,26,55,27],[72,27,55,28],[72,28,55,29],[73,6,56,8],[74,0,57,0],[75,0,58,0],[76,0,59,0],[77,6,60,8,"_this"],[77,11,60,8],[77,12,60,13,"_pingTimeoutTime"],[77,28,60,29],[77,31,60,32,"Infinity"],[77,39,60,40],[78,6,61,8],[78,10,61,12,"uri"],[78,13,61,15],[78,17,61,19],[78,25,61,27],[78,30,61,32],[78,37,61,39,"uri"],[78,40,61,42],[78,42,61,44],[79,8,62,12,"opts"],[79,12,62,16],[79,15,62,19,"uri"],[79,18,62,22],[80,8,63,12,"uri"],[80,11,63,15],[80,14,63,18],[80,18,63,22],[81,6,64,8],[82,6,65,8],[82,10,65,12,"uri"],[82,13,65,15],[82,15,65,17],[83,8,66,12],[83,12,66,18,"parsedUri"],[83,21,66,27],[83,24,66,30],[83,28,66,30,"parse"],[83,43,66,35],[83,45,66,36,"uri"],[83,48,66,39],[83,49,66,40],[84,8,67,12,"opts"],[84,12,67,16],[84,13,67,17,"hostname"],[84,21,67,25],[84,24,67,28,"parsedUri"],[84,33,67,37],[84,34,67,38,"host"],[84,38,67,42],[85,8,68,12,"opts"],[85,12,68,16],[85,13,68,17,"secure"],[85,19,68,23],[85,22,69,16,"parsedUri"],[85,31,69,25],[85,32,69,26,"protocol"],[85,40,69,34],[85,45,69,39],[85,52,69,46],[85,56,69,50,"parsedUri"],[85,65,69,59],[85,66,69,60,"protocol"],[85,74,69,68],[85,79,69,73],[85,84,69,78],[86,8,70,12,"opts"],[86,12,70,16],[86,13,70,17,"port"],[86,17,70,21],[86,20,70,24,"parsedUri"],[86,29,70,33],[86,30,70,34,"port"],[86,34,70,38],[87,8,71,12],[87,12,71,16,"parsedUri"],[87,21,71,25],[87,22,71,26,"query"],[87,27,71,31],[87,29,72,16,"opts"],[87,33,72,20],[87,34,72,21,"query"],[87,39,72,26],[87,42,72,29,"parsedUri"],[87,51,72,38],[87,52,72,39,"query"],[87,57,72,44],[88,6,73,8],[88,7,73,9],[88,13,74,13],[88,17,74,17,"opts"],[88,21,74,21],[88,22,74,22,"host"],[88,26,74,26],[88,28,74,28],[89,8,75,12,"opts"],[89,12,75,16],[89,13,75,17,"hostname"],[89,21,75,25],[89,24,75,28],[89,28,75,28,"parse"],[89,43,75,33],[89,45,75,34,"opts"],[89,49,75,38],[89,50,75,39,"host"],[89,54,75,43],[89,55,75,44],[89,56,75,45,"host"],[89,60,75,49],[90,6,76,8],[91,6,77,8],[91,10,77,8,"installTimerFunctions"],[91,37,77,29],[91,39,77,29,"_this"],[91,44,77,29],[91,46,77,36,"opts"],[91,50,77,40],[91,51,77,41],[92,6,78,8,"_this"],[92,11,78,8],[92,12,78,13,"secure"],[92,18,78,19],[92,21,79,12],[92,25,79,16],[92,29,79,20,"opts"],[92,33,79,24],[92,34,79,25,"secure"],[92,40,79,31],[92,43,80,18,"opts"],[92,47,80,22],[92,48,80,23,"secure"],[92,54,80,29],[92,57,81,18],[92,64,81,25,"location"],[92,72,81,33],[92,77,81,38],[92,88,81,49],[92,92,81,53],[92,100,81,61],[92,105,81,66,"location"],[92,113,81,74],[92,114,81,75,"protocol"],[92,122,81,83],[93,6,82,8],[93,10,82,12,"opts"],[93,14,82,16],[93,15,82,17,"hostname"],[93,23,82,25],[93,27,82,29],[93,28,82,30,"opts"],[93,32,82,34],[93,33,82,35,"port"],[93,37,82,39],[93,39,82,41],[94,8,83,12],[95,8,84,12,"opts"],[95,12,84,16],[95,13,84,17,"port"],[95,17,84,21],[95,20,84,24,"_this"],[95,25,84,24],[95,26,84,29,"secure"],[95,32,84,35],[95,35,84,38],[95,40,84,43],[95,43,84,46],[95,47,84,50],[96,6,85,8],[97,6,86,8,"_this"],[97,11,86,8],[97,12,86,13,"hostname"],[97,20,86,21],[97,23,87,12,"opts"],[97,27,87,16],[97,28,87,17,"hostname"],[97,36,87,25],[97,41,88,17],[97,48,88,24,"location"],[97,56,88,32],[97,61,88,37],[97,72,88,48],[97,75,88,51,"location"],[97,83,88,59],[97,84,88,60,"hostname"],[97,92,88,68],[97,95,88,71],[97,106,88,82],[97,107,88,83],[98,6,89,8,"_this"],[98,11,89,8],[98,12,89,13,"port"],[98,16,89,17],[98,19,90,12,"opts"],[98,23,90,16],[98,24,90,17,"port"],[98,28,90,21],[98,33,91,17],[98,40,91,24,"location"],[98,48,91,32],[98,53,91,37],[98,64,91,48],[98,68,91,52,"location"],[98,76,91,60],[98,77,91,61,"port"],[98,81,91,65],[98,84,92,22,"location"],[98,92,92,30],[98,93,92,31,"port"],[98,97,92,35],[98,100,93,22,"_this"],[98,105,93,22],[98,106,93,27,"secure"],[98,112,93,33],[98,115,94,26],[98,120,94,31],[98,123,95,26],[98,127,95,30],[98,128,95,31],[99,6,96,8,"_this"],[99,11,96,8],[99,12,96,13,"transports"],[99,22,96,23],[99,25,96,26],[99,27,96,28],[100,6,97,8,"_this"],[100,11,97,8],[100,12,97,13,"_transportsByName"],[100,29,97,30],[100,32,97,33],[100,33,97,34],[100,34,97,35],[101,6,98,8,"opts"],[101,10,98,12],[101,11,98,13,"transports"],[101,21,98,23],[101,22,98,24,"forEach"],[101,29,98,31],[101,30,98,33,"t"],[101,31,98,34],[101,35,98,39],[102,8,99,12],[102,12,99,18,"transportName"],[102,25,99,31],[102,28,99,34,"t"],[102,29,99,35],[102,30,99,36,"prototype"],[102,39,99,45],[102,40,99,46,"name"],[102,44,99,50],[103,8,100,12,"_this"],[103,13,100,12],[103,14,100,17,"transports"],[103,24,100,27],[103,25,100,28,"push"],[103,29,100,32],[103,30,100,33,"transportName"],[103,43,100,46],[103,44,100,47],[104,8,101,12,"_this"],[104,13,101,12],[104,14,101,17,"_transportsByName"],[104,31,101,34],[104,32,101,35,"transportName"],[104,45,101,48],[104,46,101,49],[104,49,101,52,"t"],[104,50,101,53],[105,6,102,8],[105,7,102,9],[105,8,102,10],[106,6,103,8,"_this"],[106,11,103,8],[106,12,103,13,"opts"],[106,16,103,17],[106,19,103,20,"Object"],[106,25,103,26],[106,26,103,27,"assign"],[106,32,103,33],[106,33,103,34],[107,8,104,12,"path"],[107,12,104,16],[107,14,104,18],[107,26,104,30],[108,8,105,12,"agent"],[108,13,105,17],[108,15,105,19],[108,20,105,24],[109,8,106,12,"withCredentials"],[109,23,106,27],[109,25,106,29],[109,30,106,34],[110,8,107,12,"upgrade"],[110,15,107,19],[110,17,107,21],[110,21,107,25],[111,8,108,12,"timestampParam"],[111,22,108,26],[111,24,108,28],[111,27,108,31],[112,8,109,12,"rememberUpgrade"],[112,23,109,27],[112,25,109,29],[112,30,109,34],[113,8,110,12,"addTrailingSlash"],[113,24,110,28],[113,26,110,30],[113,30,110,34],[114,8,111,12,"rejectUnauthorized"],[114,26,111,30],[114,28,111,32],[114,32,111,36],[115,8,112,12,"perMessageDeflate"],[115,25,112,29],[115,27,112,31],[116,10,113,16,"threshold"],[116,19,113,25],[116,21,113,27],[117,8,114,12],[117,9,114,13],[118,8,115,12,"transportOptions"],[118,24,115,28],[118,26,115,30],[118,27,115,31],[118,28,115,32],[119,8,116,12,"closeOnBeforeunload"],[119,27,116,31],[119,29,116,33],[120,6,117,8],[120,7,117,9],[120,9,117,11,"opts"],[120,13,117,15],[120,14,117,16],[121,6,118,8,"_this"],[121,11,118,8],[121,12,118,13,"opts"],[121,16,118,17],[121,17,118,18,"path"],[121,21,118,22],[121,24,119,12,"_this"],[121,29,119,12],[121,30,119,17,"opts"],[121,34,119,21],[121,35,119,22,"path"],[121,39,119,26],[121,40,119,27,"replace"],[121,47,119,34],[121,48,119,35],[121,53,119,40],[121,55,119,42],[121,57,119,44],[121,58,119,45],[121,62,120,17,"_this"],[121,67,120,17],[121,68,120,22,"opts"],[121,72,120,26],[121,73,120,27,"addTrailingSlash"],[121,89,120,43],[121,92,120,46],[121,95,120,49],[121,98,120,52],[121,100,120,54],[121,101,120,55],[122,6,121,8],[122,10,121,12],[122,17,121,19,"_this"],[122,22,121,19],[122,23,121,24,"opts"],[122,27,121,28],[122,28,121,29,"query"],[122,33,121,34],[122,38,121,39],[122,46,121,47],[122,48,121,49],[123,8,122,12,"_this"],[123,13,122,12],[123,14,122,17,"opts"],[123,18,122,21],[123,19,122,22,"query"],[123,24,122,27],[123,27,122,30],[123,31,122,30,"decode"],[123,46,122,36],[123,48,122,37,"_this"],[123,53,122,37],[123,54,122,42,"opts"],[123,58,122,46],[123,59,122,47,"query"],[123,64,122,52],[123,65,122,53],[124,6,123,8],[125,6,124,8],[125,10,124,12,"withEventListeners"],[125,28,124,30],[125,30,124,32],[126,8,125,12],[126,12,125,16,"_this"],[126,17,125,16],[126,18,125,21,"opts"],[126,22,125,25],[126,23,125,26,"closeOnBeforeunload"],[126,42,125,45],[126,44,125,47],[127,10,126,16],[128,10,127,16],[129,10,128,16],[130,10,129,16,"_this"],[130,15,129,16],[130,16,129,21,"_beforeunloadEventListener"],[130,42,129,47],[130,45,129,50],[130,51,129,56],[131,12,130,20],[131,16,130,24,"_this"],[131,21,130,24],[131,22,130,29,"transport"],[131,31,130,38],[131,33,130,40],[132,14,131,24],[133,14,132,24,"_this"],[133,19,132,24],[133,20,132,29,"transport"],[133,29,132,38],[133,30,132,39,"removeAllListeners"],[133,48,132,57],[133,49,132,58],[133,50,132,59],[134,14,133,24,"_this"],[134,19,133,24],[134,20,133,29,"transport"],[134,29,133,38],[134,30,133,39,"close"],[134,35,133,44],[134,36,133,45],[134,37,133,46],[135,12,134,20],[136,10,135,16],[136,11,135,17],[137,10,136,16,"addEventListener"],[137,26,136,32],[137,27,136,33],[137,41,136,47],[137,43,136,49,"_this"],[137,48,136,49],[137,49,136,54,"_beforeunloadEventListener"],[137,75,136,80],[137,77,136,82],[137,82,136,87],[137,83,136,88],[138,8,137,12],[139,8,138,12],[139,12,138,16,"_this"],[139,17,138,16],[139,18,138,21,"hostname"],[139,26,138,29],[139,31,138,34],[139,42,138,45],[139,44,138,47],[140,10,139,16,"_this"],[140,15,139,16],[140,16,139,21,"_offlineEventListener"],[140,37,139,42],[140,40,139,45],[140,46,139,51],[141,12,140,20,"_this"],[141,17,140,20],[141,18,140,25,"_onClose"],[141,26,140,33],[141,27,140,34],[141,44,140,51],[141,46,140,53],[142,14,141,24,"description"],[142,25,141,35],[142,27,141,37],[143,12,142,20],[143,13,142,21],[143,14,142,22],[144,10,143,16],[144,11,143,17],[145,10,144,16,"OFFLINE_EVENT_LISTENERS"],[145,33,144,39],[145,34,144,40,"push"],[145,38,144,44],[145,39,144,45,"_this"],[145,44,144,45],[145,45,144,50,"_offlineEventListener"],[145,66,144,71],[145,67,144,72],[146,8,145,12],[147,6,146,8],[148,6,147,8],[148,10,147,12,"_this"],[148,15,147,12],[148,16,147,17,"opts"],[148,20,147,21],[148,21,147,22,"withCredentials"],[148,36,147,37],[148,38,147,39],[149,8,148,12,"_this"],[149,13,148,12],[149,14,148,17,"_cookieJar"],[149,24,148,27],[149,27,148,30],[149,31,148,30,"createCookieJar"],[149,59,148,45],[149,61,148,46],[149,62,148,47],[150,6,149,8],[151,6,150,8,"_this"],[151,11,150,8],[151,12,150,13,"_open"],[151,17,150,18],[151,18,150,19],[151,19,150,20],[152,6,150,21],[152,13,150,21,"_this"],[152,18,150,21],[153,4,151,4],[154,4,152,4],[155,0,153,0],[156,0,154,0],[157,0,155,0],[158,0,156,0],[159,0,157,0],[160,0,158,0],[161,4,152,4],[161,8,152,4,"_inherits2"],[161,18,152,4],[161,19,152,4,"default"],[161,26,152,4],[161,28,152,4,"SocketWithoutUpgrade"],[161,48,152,4],[161,50,152,4,"_Emitter"],[161,58,152,4],[162,4,152,4],[162,15,152,4,"_createClass2"],[162,28,152,4],[162,29,152,4,"default"],[162,36,152,4],[162,38,152,4,"SocketWithoutUpgrade"],[162,58,152,4],[163,6,152,4,"key"],[163,9,152,4],[164,6,152,4,"value"],[164,11,152,4],[164,13,159,4],[164,22,159,4,"createTransport"],[164,37,159,19,"createTransport"],[164,38,159,20,"name"],[164,42,159,24],[164,44,159,26],[165,8,160,8],[165,12,160,14,"query"],[165,17,160,19],[165,20,160,22,"Object"],[165,26,160,28],[165,27,160,29,"assign"],[165,33,160,35],[165,34,160,36],[165,35,160,37],[165,36,160,38],[165,38,160,40],[165,42,160,44],[165,43,160,45,"opts"],[165,47,160,49],[165,48,160,50,"query"],[165,53,160,55],[165,54,160,56],[166,8,161,8],[167,8,162,8,"query"],[167,13,162,13],[167,14,162,14,"EIO"],[167,17,162,17],[167,20,162,20,"protocol"],[167,36,162,28],[168,8,163,8],[169,8,164,8,"query"],[169,13,164,13],[169,14,164,14,"transport"],[169,23,164,23],[169,26,164,26,"name"],[169,30,164,30],[170,8,165,8],[171,8,166,8],[171,12,166,12],[171,16,166,16],[171,17,166,17,"id"],[171,19,166,19],[171,21,167,12,"query"],[171,26,167,17],[171,27,167,18,"sid"],[171,30,167,21],[171,33,167,24],[171,37,167,28],[171,38,167,29,"id"],[171,40,167,31],[172,8,168,8],[172,12,168,14,"opts"],[172,16,168,18],[172,19,168,21,"Object"],[172,25,168,27],[172,26,168,28,"assign"],[172,32,168,34],[172,33,168,35],[172,34,168,36],[172,35,168,37],[172,37,168,39],[172,41,168,43],[172,42,168,44,"opts"],[172,46,168,48],[172,48,168,50],[173,10,169,12,"query"],[173,15,169,17],[174,10,170,12,"socket"],[174,16,170,18],[174,18,170,20],[174,22,170,24],[175,10,171,12,"hostname"],[175,18,171,20],[175,20,171,22],[175,24,171,26],[175,25,171,27,"hostname"],[175,33,171,35],[176,10,172,12,"secure"],[176,16,172,18],[176,18,172,20],[176,22,172,24],[176,23,172,25,"secure"],[176,29,172,31],[177,10,173,12,"port"],[177,14,173,16],[177,16,173,18],[177,20,173,22],[177,21,173,23,"port"],[178,8,174,8],[178,9,174,9],[178,11,174,11],[178,15,174,15],[178,16,174,16,"opts"],[178,20,174,20],[178,21,174,21,"transportOptions"],[178,37,174,37],[178,38,174,38,"name"],[178,42,174,42],[178,43,174,43],[178,44,174,44],[179,8,175,8],[179,15,175,15],[179,19,175,19],[179,23,175,23],[179,24,175,24,"_transportsByName"],[179,41,175,41],[179,42,175,42,"name"],[179,46,175,46],[179,47,175,47],[179,48,175,48,"opts"],[179,52,175,52],[179,53,175,53],[180,6,176,4],[181,6,177,4],[182,0,178,0],[183,0,179,0],[184,0,180,0],[185,0,181,0],[186,4,177,4],[187,6,177,4,"key"],[187,9,177,4],[188,6,177,4,"value"],[188,11,177,4],[188,13,182,4],[188,22,182,4,"_open"],[188,27,182,9,"_open"],[188,28,182,9],[188,30,182,12],[189,8,183,8],[189,12,183,12],[189,16,183,16],[189,17,183,17,"transports"],[189,27,183,27],[189,28,183,28,"length"],[189,34,183,34],[189,39,183,39],[189,40,183,40],[189,42,183,42],[190,10,184,12],[191,10,185,12],[191,14,185,16],[191,15,185,17,"setTimeoutFn"],[191,27,185,29],[191,28,185,30],[191,34,185,36],[192,12,186,16],[192,16,186,20],[192,17,186,21,"emitReserved"],[192,29,186,33],[192,30,186,34],[192,37,186,41],[192,39,186,43],[192,64,186,68],[192,65,186,69],[193,10,187,12],[193,11,187,13],[193,13,187,15],[193,14,187,16],[193,15,187,17],[194,10,188,12],[195,8,189,8],[196,8,190,8],[196,12,190,14,"transportName"],[196,25,190,27],[196,28,190,30],[196,32,190,34],[196,33,190,35,"opts"],[196,37,190,39],[196,38,190,40,"rememberUpgrade"],[196,53,190,55],[196,57,191,12,"SocketWithoutUpgrade"],[196,77,191,32],[196,78,191,33,"priorWebsocketSuccess"],[196,99,191,54],[196,103,192,12],[196,107,192,16],[196,108,192,17,"transports"],[196,118,192,27],[196,119,192,28,"indexOf"],[196,126,192,35],[196,127,192,36],[196,138,192,47],[196,139,192,48],[196,144,192,53],[196,145,192,54],[196,146,192,55],[196,149,193,14],[196,160,193,25],[196,163,194,14],[196,167,194,18],[196,168,194,19,"transports"],[196,178,194,29],[196,179,194,30],[196,180,194,31],[196,181,194,32],[197,8,195,8],[197,12,195,12],[197,13,195,13,"readyState"],[197,23,195,23],[197,26,195,26],[197,35,195,35],[198,8,196,8],[198,12,196,14,"transport"],[198,21,196,23],[198,24,196,26],[198,28,196,30],[198,29,196,31,"createTransport"],[198,44,196,46],[198,45,196,47,"transportName"],[198,58,196,60],[198,59,196,61],[199,8,197,8,"transport"],[199,17,197,17],[199,18,197,18,"open"],[199,22,197,22],[199,23,197,23],[199,24,197,24],[200,8,198,8],[200,12,198,12],[200,13,198,13,"setTransport"],[200,25,198,25],[200,26,198,26,"transport"],[200,35,198,35],[200,36,198,36],[201,6,199,4],[202,6,200,4],[203,0,201,0],[204,0,202,0],[205,0,203,0],[206,0,204,0],[207,4,200,4],[208,6,200,4,"key"],[208,9,200,4],[209,6,200,4,"value"],[209,11,200,4],[209,13,205,4],[209,22,205,4,"setTransport"],[209,34,205,16,"setTransport"],[209,35,205,17,"transport"],[209,44,205,26],[209,46,205,28],[210,8,206,8],[210,12,206,12],[210,16,206,16],[210,17,206,17,"transport"],[210,26,206,26],[210,28,206,28],[211,10,207,12],[211,14,207,16],[211,15,207,17,"transport"],[211,24,207,26],[211,25,207,27,"removeAllListeners"],[211,43,207,45],[211,44,207,46],[211,45,207,47],[212,8,208,8],[213,8,209,8],[214,8,210,8],[214,12,210,12],[214,13,210,13,"transport"],[214,22,210,22],[214,25,210,25,"transport"],[214,34,210,34],[215,8,211,8],[216,8,212,8,"transport"],[216,17,212,17],[216,18,213,13,"on"],[216,20,213,15],[216,21,213,16],[216,28,213,23],[216,30,213,25],[216,34,213,29],[216,35,213,30,"_onDrain"],[216,43,213,38],[216,44,213,39,"bind"],[216,48,213,43],[216,49,213,44],[216,53,213,48],[216,54,213,49],[216,55,213,50],[216,56,214,13,"on"],[216,58,214,15],[216,59,214,16],[216,67,214,24],[216,69,214,26],[216,73,214,30],[216,74,214,31,"_onPacket"],[216,83,214,40],[216,84,214,41,"bind"],[216,88,214,45],[216,89,214,46],[216,93,214,50],[216,94,214,51],[216,95,214,52],[216,96,215,13,"on"],[216,98,215,15],[216,99,215,16],[216,106,215,23],[216,108,215,25],[216,112,215,29],[216,113,215,30,"_onError"],[216,121,215,38],[216,122,215,39,"bind"],[216,126,215,43],[216,127,215,44],[216,131,215,48],[216,132,215,49],[216,133,215,50],[216,134,216,13,"on"],[216,136,216,15],[216,137,216,16],[216,144,216,23],[216,146,216,26,"reason"],[216,152,216,32],[216,156,216,37],[216,160,216,41],[216,161,216,42,"_onClose"],[216,169,216,50],[216,170,216,51],[216,187,216,68],[216,189,216,70,"reason"],[216,195,216,76],[216,196,216,77],[216,197,216,78],[217,6,217,4],[218,6,218,4],[219,0,219,0],[220,0,220,0],[221,0,221,0],[222,0,222,0],[223,4,218,4],[224,6,218,4,"key"],[224,9,218,4],[225,6,218,4,"value"],[225,11,218,4],[225,13,223,4],[225,22,223,4,"onOpen"],[225,28,223,10,"onOpen"],[225,29,223,10],[225,31,223,13],[226,8,224,8],[226,12,224,12],[226,13,224,13,"readyState"],[226,23,224,23],[226,26,224,26],[226,32,224,32],[227,8,225,8,"SocketWithoutUpgrade"],[227,28,225,28],[227,29,225,29,"priorWebsocketSuccess"],[227,50,225,50],[227,53,226,12],[227,64,226,23],[227,69,226,28],[227,73,226,32],[227,74,226,33,"transport"],[227,83,226,42],[227,84,226,43,"name"],[227,88,226,47],[228,8,227,8],[228,12,227,12],[228,13,227,13,"emitReserved"],[228,25,227,25],[228,26,227,26],[228,32,227,32],[228,33,227,33],[229,8,228,8],[229,12,228,12],[229,13,228,13,"flush"],[229,18,228,18],[229,19,228,19],[229,20,228,20],[230,6,229,4],[231,6,230,4],[232,0,231,0],[233,0,232,0],[234,0,233,0],[235,0,234,0],[236,4,230,4],[237,6,230,4,"key"],[237,9,230,4],[238,6,230,4,"value"],[238,11,230,4],[238,13,235,4],[238,22,235,4,"_onPacket"],[238,31,235,13,"_onPacket"],[238,32,235,14,"packet"],[238,38,235,20],[238,40,235,22],[239,8,236,8],[239,12,236,12],[239,21,236,21],[239,26,236,26],[239,30,236,30],[239,31,236,31,"readyState"],[239,41,236,41],[239,45,237,12],[239,51,237,18],[239,56,237,23],[239,60,237,27],[239,61,237,28,"readyState"],[239,71,237,38],[239,75,238,12],[239,84,238,21],[239,89,238,26],[239,93,238,30],[239,94,238,31,"readyState"],[239,104,238,41],[239,106,238,43],[240,10,239,12],[240,14,239,16],[240,15,239,17,"emitReserved"],[240,27,239,29],[240,28,239,30],[240,36,239,38],[240,38,239,40,"packet"],[240,44,239,46],[240,45,239,47],[241,10,240,12],[242,10,241,12],[242,14,241,16],[242,15,241,17,"emitReserved"],[242,27,241,29],[242,28,241,30],[242,39,241,41],[242,40,241,42],[243,10,242,12],[243,18,242,20,"packet"],[243,24,242,26],[243,25,242,27,"type"],[243,29,242,31],[244,12,243,16],[244,17,243,21],[244,23,243,27],[245,14,244,20],[245,18,244,24],[245,19,244,25,"onHandshake"],[245,30,244,36],[245,31,244,37,"JSON"],[245,35,244,41],[245,36,244,42,"parse"],[245,41,244,47],[245,42,244,48,"packet"],[245,48,244,54],[245,49,244,55,"data"],[245,53,244,59],[245,54,244,60],[245,55,244,61],[246,14,245,20],[247,12,246,16],[247,17,246,21],[247,23,246,27],[248,14,247,20],[248,18,247,24],[248,19,247,25,"_sendPacket"],[248,30,247,36],[248,31,247,37],[248,37,247,43],[248,38,247,44],[249,14,248,20],[249,18,248,24],[249,19,248,25,"emitReserved"],[249,31,248,37],[249,32,248,38],[249,38,248,44],[249,39,248,45],[250,14,249,20],[250,18,249,24],[250,19,249,25,"emitReserved"],[250,31,249,37],[250,32,249,38],[250,38,249,44],[250,39,249,45],[251,14,250,20],[251,18,250,24],[251,19,250,25,"_resetPingTimeout"],[251,36,250,42],[251,37,250,43],[251,38,250,44],[252,14,251,20],[253,12,252,16],[253,17,252,21],[253,24,252,28],[254,14,253,20],[254,18,253,26,"err"],[254,21,253,29],[254,24,253,32],[254,28,253,36,"Error"],[254,33,253,41],[254,34,253,42],[254,48,253,56],[254,49,253,57],[255,14,254,20],[256,14,255,20,"err"],[256,17,255,23],[256,18,255,24,"code"],[256,22,255,28],[256,25,255,31,"packet"],[256,31,255,37],[256,32,255,38,"data"],[256,36,255,42],[257,14,256,20],[257,18,256,24],[257,19,256,25,"_onError"],[257,27,256,33],[257,28,256,34,"err"],[257,31,256,37],[257,32,256,38],[258,14,257,20],[259,12,258,16],[259,17,258,21],[259,26,258,30],[260,14,259,20],[260,18,259,24],[260,19,259,25,"emitReserved"],[260,31,259,37],[260,32,259,38],[260,38,259,44],[260,40,259,46,"packet"],[260,46,259,52],[260,47,259,53,"data"],[260,51,259,57],[260,52,259,58],[261,14,260,20],[261,18,260,24],[261,19,260,25,"emitReserved"],[261,31,260,37],[261,32,260,38],[261,41,260,47],[261,43,260,49,"packet"],[261,49,260,55],[261,50,260,56,"data"],[261,54,260,60],[261,55,260,61],[262,14,261,20],[263,10,262,12],[264,8,263,8],[264,9,263,9],[264,15,264,13],[264,16,265,8],[265,6,266,4],[266,6,267,4],[267,0,268,0],[268,0,269,0],[269,0,270,0],[270,0,271,0],[271,0,272,0],[272,4,267,4],[273,6,267,4,"key"],[273,9,267,4],[274,6,267,4,"value"],[274,11,267,4],[274,13,273,4],[274,22,273,4,"onHandshake"],[274,33,273,15,"onHandshake"],[274,34,273,16,"data"],[274,38,273,20],[274,40,273,22],[275,8,274,8],[275,12,274,12],[275,13,274,13,"emitReserved"],[275,25,274,25],[275,26,274,26],[275,37,274,37],[275,39,274,39,"data"],[275,43,274,43],[275,44,274,44],[276,8,275,8],[276,12,275,12],[276,13,275,13,"id"],[276,15,275,15],[276,18,275,18,"data"],[276,22,275,22],[276,23,275,23,"sid"],[276,26,275,26],[277,8,276,8],[277,12,276,12],[277,13,276,13,"transport"],[277,22,276,22],[277,23,276,23,"query"],[277,28,276,28],[277,29,276,29,"sid"],[277,32,276,32],[277,35,276,35,"data"],[277,39,276,39],[277,40,276,40,"sid"],[277,43,276,43],[278,8,277,8],[278,12,277,12],[278,13,277,13,"_pingInterval"],[278,26,277,26],[278,29,277,29,"data"],[278,33,277,33],[278,34,277,34,"pingInterval"],[278,46,277,46],[279,8,278,8],[279,12,278,12],[279,13,278,13,"_pingTimeout"],[279,25,278,25],[279,28,278,28,"data"],[279,32,278,32],[279,33,278,33,"pingTimeout"],[279,44,278,44],[280,8,279,8],[280,12,279,12],[280,13,279,13,"_maxPayload"],[280,24,279,24],[280,27,279,27,"data"],[280,31,279,31],[280,32,279,32,"maxPayload"],[280,42,279,42],[281,8,280,8],[281,12,280,12],[281,13,280,13,"onOpen"],[281,19,280,19],[281,20,280,20],[281,21,280,21],[282,8,281,8],[283,8,282,8],[283,12,282,12],[283,20,282,20],[283,25,282,25],[283,29,282,29],[283,30,282,30,"readyState"],[283,40,282,40],[283,42,283,12],[284,8,284,8],[284,12,284,12],[284,13,284,13,"_resetPingTimeout"],[284,30,284,30],[284,31,284,31],[284,32,284,32],[285,6,285,4],[286,6,286,4],[287,0,287,0],[288,0,288,0],[289,0,289,0],[290,0,290,0],[291,4,286,4],[292,6,286,4,"key"],[292,9,286,4],[293,6,286,4,"value"],[293,11,286,4],[293,13,291,4],[293,22,291,4,"_resetPingTimeout"],[293,39,291,21,"_resetPingTimeout"],[293,40,291,21],[293,42,291,24],[294,8,292,8],[294,12,292,12],[294,13,292,13,"clearTimeoutFn"],[294,27,292,27],[294,28,292,28],[294,32,292,32],[294,33,292,33,"_pingTimeoutTimer"],[294,50,292,50],[294,51,292,51],[295,8,293,8],[295,12,293,14,"delay"],[295,17,293,19],[295,20,293,22],[295,24,293,26],[295,25,293,27,"_pingInterval"],[295,38,293,40],[295,41,293,43],[295,45,293,47],[295,46,293,48,"_pingTimeout"],[295,58,293,60],[296,8,294,8],[296,12,294,12],[296,13,294,13,"_pingTimeoutTime"],[296,29,294,29],[296,32,294,32,"Date"],[296,36,294,36],[296,37,294,37,"now"],[296,40,294,40],[296,41,294,41],[296,42,294,42],[296,45,294,45,"delay"],[296,50,294,50],[297,8,295,8],[297,12,295,12],[297,13,295,13,"_pingTimeoutTimer"],[297,30,295,30],[297,33,295,33],[297,37,295,37],[297,38,295,38,"setTimeoutFn"],[297,50,295,50],[297,51,295,51],[297,57,295,57],[298,10,296,12],[298,14,296,16],[298,15,296,17,"_onClose"],[298,23,296,25],[298,24,296,26],[298,38,296,40],[298,39,296,41],[299,8,297,8],[299,9,297,9],[299,11,297,11,"delay"],[299,16,297,16],[299,17,297,17],[300,8,298,8],[300,12,298,12],[300,16,298,16],[300,17,298,17,"opts"],[300,21,298,21],[300,22,298,22,"autoUnref"],[300,31,298,31],[300,33,298,33],[301,10,299,12],[301,14,299,16],[301,15,299,17,"_pingTimeoutTimer"],[301,32,299,34],[301,33,299,35,"unref"],[301,38,299,40],[301,39,299,41],[301,40,299,42],[302,8,300,8],[303,6,301,4],[304,6,302,4],[305,0,303,0],[306,0,304,0],[307,0,305,0],[308,0,306,0],[309,4,302,4],[310,6,302,4,"key"],[310,9,302,4],[311,6,302,4,"value"],[311,11,302,4],[311,13,307,4],[311,22,307,4,"_onDrain"],[311,30,307,12,"_onDrain"],[311,31,307,12],[311,33,307,15],[312,8,308,8],[312,12,308,12],[312,13,308,13,"writeBuffer"],[312,24,308,24],[312,25,308,25,"splice"],[312,31,308,31],[312,32,308,32],[312,33,308,33],[312,35,308,35],[312,39,308,39],[312,40,308,40,"_prevBufferLen"],[312,54,308,54],[312,55,308,55],[313,8,309,8],[314,8,310,8],[315,8,311,8],[316,8,312,8],[316,12,312,12],[316,13,312,13,"_prevBufferLen"],[316,27,312,27],[316,30,312,30],[316,31,312,31],[317,8,313,8],[317,12,313,12],[317,13,313,13],[317,18,313,18],[317,22,313,22],[317,23,313,23,"writeBuffer"],[317,34,313,34],[317,35,313,35,"length"],[317,41,313,41],[317,43,313,43],[318,10,314,12],[318,14,314,16],[318,15,314,17,"emitReserved"],[318,27,314,29],[318,28,314,30],[318,35,314,37],[318,36,314,38],[319,8,315,8],[319,9,315,9],[319,15,316,13],[320,10,317,12],[320,14,317,16],[320,15,317,17,"flush"],[320,20,317,22],[320,21,317,23],[320,22,317,24],[321,8,318,8],[322,6,319,4],[323,6,320,4],[324,0,321,0],[325,0,322,0],[326,0,323,0],[327,0,324,0],[328,4,320,4],[329,6,320,4,"key"],[329,9,320,4],[330,6,320,4,"value"],[330,11,320,4],[330,13,325,4],[330,22,325,4,"flush"],[330,27,325,9,"flush"],[330,28,325,9],[330,30,325,12],[331,8,326,8],[331,12,326,12],[331,20,326,20],[331,25,326,25],[331,29,326,29],[331,30,326,30,"readyState"],[331,40,326,40],[331,44,327,12],[331,48,327,16],[331,49,327,17,"transport"],[331,58,327,26],[331,59,327,27,"writable"],[331,67,327,35],[331,71,328,12],[331,72,328,13],[331,76,328,17],[331,77,328,18,"upgrading"],[331,86,328,27],[331,90,329,12],[331,94,329,16],[331,95,329,17,"writeBuffer"],[331,106,329,28],[331,107,329,29,"length"],[331,113,329,35],[331,115,329,37],[332,10,330,12],[332,14,330,18,"packets"],[332,21,330,25],[332,24,330,28],[332,28,330,32],[332,29,330,33,"_getWritablePackets"],[332,48,330,52],[332,49,330,53],[332,50,330,54],[333,10,331,12],[333,14,331,16],[333,15,331,17,"transport"],[333,24,331,26],[333,25,331,27,"send"],[333,29,331,31],[333,30,331,32,"packets"],[333,37,331,39],[333,38,331,40],[334,10,332,12],[335,10,333,12],[336,10,334,12],[336,14,334,16],[336,15,334,17,"_prevBufferLen"],[336,29,334,31],[336,32,334,34,"packets"],[336,39,334,41],[336,40,334,42,"length"],[336,46,334,48],[337,10,335,12],[337,14,335,16],[337,15,335,17,"emitReserved"],[337,27,335,29],[337,28,335,30],[337,35,335,37],[337,36,335,38],[338,8,336,8],[339,6,337,4],[340,6,338,4],[341,0,339,0],[342,0,340,0],[343,0,341,0],[344,0,342,0],[345,0,343,0],[346,4,338,4],[347,6,338,4,"key"],[347,9,338,4],[348,6,338,4,"value"],[348,11,338,4],[348,13,344,4],[348,22,344,4,"_getWritablePackets"],[348,41,344,23,"_getWritablePackets"],[348,42,344,23],[348,44,344,26],[349,8,345,8],[349,12,345,14,"shouldCheckPayloadSize"],[349,34,345,36],[349,37,345,39],[349,41,345,43],[349,42,345,44,"_maxPayload"],[349,53,345,55],[349,57,346,12],[349,61,346,16],[349,62,346,17,"transport"],[349,71,346,26],[349,72,346,27,"name"],[349,76,346,31],[349,81,346,36],[349,90,346,45],[349,94,347,12],[349,98,347,16],[349,99,347,17,"writeBuffer"],[349,110,347,28],[349,111,347,29,"length"],[349,117,347,35],[349,120,347,38],[349,121,347,39],[350,8,348,8],[350,12,348,12],[350,13,348,13,"shouldCheckPayloadSize"],[350,35,348,35],[350,37,348,37],[351,10,349,12],[351,17,349,19],[351,21,349,23],[351,22,349,24,"writeBuffer"],[351,33,349,35],[352,8,350,8],[353,8,351,8],[353,12,351,12,"payloadSize"],[353,23,351,23],[353,26,351,26],[353,27,351,27],[353,28,351,28],[353,29,351,29],[354,8,352,8],[354,13,352,13],[354,17,352,17,"i"],[354,18,352,18],[354,21,352,21],[354,22,352,22],[354,24,352,24,"i"],[354,25,352,25],[354,28,352,28],[354,32,352,32],[354,33,352,33,"writeBuffer"],[354,44,352,44],[354,45,352,45,"length"],[354,51,352,51],[354,53,352,53,"i"],[354,54,352,54],[354,56,352,56],[354,58,352,58],[355,10,353,12],[355,14,353,18,"data"],[355,18,353,22],[355,21,353,25],[355,25,353,29],[355,26,353,30,"writeBuffer"],[355,37,353,41],[355,38,353,42,"i"],[355,39,353,43],[355,40,353,44],[355,41,353,45,"data"],[355,45,353,49],[356,10,354,12],[356,14,354,16,"data"],[356,18,354,20],[356,20,354,22],[357,12,355,16,"payloadSize"],[357,23,355,27],[357,27,355,31],[357,31,355,31,"byteLength"],[357,47,355,41],[357,49,355,42,"data"],[357,53,355,46],[357,54,355,47],[358,10,356,12],[359,10,357,12],[359,14,357,16,"i"],[359,15,357,17],[359,18,357,20],[359,19,357,21],[359,23,357,25,"payloadSize"],[359,34,357,36],[359,37,357,39],[359,41,357,43],[359,42,357,44,"_maxPayload"],[359,53,357,55],[359,55,357,57],[360,12,358,16],[360,19,358,23],[360,23,358,27],[360,24,358,28,"writeBuffer"],[360,35,358,39],[360,36,358,40,"slice"],[360,41,358,45],[360,42,358,46],[360,43,358,47],[360,45,358,49,"i"],[360,46,358,50],[360,47,358,51],[361,10,359,12],[362,10,360,12,"payloadSize"],[362,21,360,23],[362,25,360,27],[362,26,360,28],[362,27,360,29],[362,28,360,30],[363,8,361,8],[364,8,362,8],[364,15,362,15],[364,19,362,19],[364,20,362,20,"writeBuffer"],[364,31,362,31],[365,6,363,4],[366,6,364,4],[367,0,365,0],[368,0,366,0],[369,0,367,0],[370,0,368,0],[371,0,369,0],[372,0,370,0],[373,0,371,0],[374,0,372,0],[375,6,373,4],[376,4,373,4],[377,6,373,4,"key"],[377,9,373,4],[378,6,373,4,"value"],[378,11,373,4],[378,13,373,18],[378,22,373,18,"_hasPingExpired"],[378,37,373,33,"_hasPingExpired"],[378,38,373,33],[378,40,373,36],[379,8,374,8],[379,12,374,12],[379,13,374,13],[379,17,374,17],[379,18,374,18,"_pingTimeoutTime"],[379,34,374,34],[379,36,375,12],[379,43,375,19],[379,47,375,23],[380,8,376,8],[380,12,376,14,"hasExpired"],[380,22,376,24],[380,25,376,27,"Date"],[380,29,376,31],[380,30,376,32,"now"],[380,33,376,35],[380,34,376,36],[380,35,376,37],[380,38,376,40],[380,42,376,44],[380,43,376,45,"_pingTimeoutTime"],[380,59,376,61],[381,8,377,8],[381,12,377,12,"hasExpired"],[381,22,377,22],[381,24,377,24],[382,10,378,12],[382,14,378,16],[382,15,378,17,"_pingTimeoutTime"],[382,31,378,33],[382,34,378,36],[382,35,378,37],[383,10,379,12],[383,14,379,12,"nextTick"],[383,35,379,20],[383,37,379,21],[383,43,379,27],[384,12,380,16],[384,16,380,20],[384,17,380,21,"_onClose"],[384,25,380,29],[384,26,380,30],[384,40,380,44],[384,41,380,45],[385,10,381,12],[385,11,381,13],[385,13,381,15],[385,17,381,19],[385,18,381,20,"setTimeoutFn"],[385,30,381,32],[385,31,381,33],[386,8,382,8],[387,8,383,8],[387,15,383,15,"hasExpired"],[387,25,383,25],[388,6,384,4],[389,6,385,4],[390,0,386,0],[391,0,387,0],[392,0,388,0],[393,0,389,0],[394,0,390,0],[395,0,391,0],[396,0,392,0],[397,4,385,4],[398,6,385,4,"key"],[398,9,385,4],[399,6,385,4,"value"],[399,11,385,4],[399,13,393,4],[399,22,393,4,"write"],[399,27,393,9,"write"],[399,28,393,10,"msg"],[399,31,393,13],[399,33,393,15,"options"],[399,40,393,22],[399,42,393,24,"fn"],[399,44,393,26],[399,46,393,28],[400,8,394,8],[400,12,394,12],[400,13,394,13,"_sendPacket"],[400,24,394,24],[400,25,394,25],[400,34,394,34],[400,36,394,36,"msg"],[400,39,394,39],[400,41,394,41,"options"],[400,48,394,48],[400,50,394,50,"fn"],[400,52,394,52],[400,53,394,53],[401,8,395,8],[401,15,395,15],[401,19,395,19],[402,6,396,4],[403,6,397,4],[404,0,398,0],[405,0,399,0],[406,0,400,0],[407,0,401,0],[408,0,402,0],[409,0,403,0],[410,0,404,0],[411,4,397,4],[412,6,397,4,"key"],[412,9,397,4],[413,6,397,4,"value"],[413,11,397,4],[413,13,405,4],[413,22,405,4,"send"],[413,26,405,8,"send"],[413,27,405,9,"msg"],[413,30,405,12],[413,32,405,14,"options"],[413,39,405,21],[413,41,405,23,"fn"],[413,43,405,25],[413,45,405,27],[414,8,406,8],[414,12,406,12],[414,13,406,13,"_sendPacket"],[414,24,406,24],[414,25,406,25],[414,34,406,34],[414,36,406,36,"msg"],[414,39,406,39],[414,41,406,41,"options"],[414,48,406,48],[414,50,406,50,"fn"],[414,52,406,52],[414,53,406,53],[415,8,407,8],[415,15,407,15],[415,19,407,19],[416,6,408,4],[417,6,409,4],[418,0,410,0],[419,0,411,0],[420,0,412,0],[421,0,413,0],[422,0,414,0],[423,0,415,0],[424,0,416,0],[425,0,417,0],[426,4,409,4],[427,6,409,4,"key"],[427,9,409,4],[428,6,409,4,"value"],[428,11,409,4],[428,13,418,4],[428,22,418,4,"_sendPacket"],[428,33,418,15,"_sendPacket"],[428,34,418,16,"type"],[428,38,418,20],[428,40,418,22,"data"],[428,44,418,26],[428,46,418,28,"options"],[428,53,418,35],[428,55,418,37,"fn"],[428,57,418,39],[428,59,418,41],[429,8,419,8],[429,12,419,12],[429,22,419,22],[429,27,419,27],[429,34,419,34,"data"],[429,38,419,38],[429,40,419,40],[430,10,420,12,"fn"],[430,12,420,14],[430,15,420,17,"data"],[430,19,420,21],[431,10,421,12,"data"],[431,14,421,16],[431,17,421,19,"undefined"],[431,26,421,28],[432,8,422,8],[433,8,423,8],[433,12,423,12],[433,22,423,22],[433,27,423,27],[433,34,423,34,"options"],[433,41,423,41],[433,43,423,43],[434,10,424,12,"fn"],[434,12,424,14],[434,15,424,17,"options"],[434,22,424,24],[435,10,425,12,"options"],[435,17,425,19],[435,20,425,22],[435,24,425,26],[436,8,426,8],[437,8,427,8],[437,12,427,12],[437,21,427,21],[437,26,427,26],[437,30,427,30],[437,31,427,31,"readyState"],[437,41,427,41],[437,45,427,45],[437,53,427,53],[437,58,427,58],[437,62,427,62],[437,63,427,63,"readyState"],[437,73,427,73],[437,75,427,75],[438,10,428,12],[439,8,429,8],[440,8,430,8,"options"],[440,15,430,15],[440,18,430,18,"options"],[440,25,430,25],[440,29,430,29],[440,30,430,30],[440,31,430,31],[441,8,431,8,"options"],[441,15,431,15],[441,16,431,16,"compress"],[441,24,431,24],[441,27,431,27],[441,32,431,32],[441,37,431,37,"options"],[441,44,431,44],[441,45,431,45,"compress"],[441,53,431,53],[442,8,432,8],[442,12,432,14,"packet"],[442,18,432,20],[442,21,432,23],[443,10,433,12,"type"],[443,14,433,16],[443,16,433,18,"type"],[443,20,433,22],[444,10,434,12,"data"],[444,14,434,16],[444,16,434,18,"data"],[444,20,434,22],[445,10,435,12,"options"],[445,17,435,19],[445,19,435,21,"options"],[446,8,436,8],[446,9,436,9],[447,8,437,8],[447,12,437,12],[447,13,437,13,"emitReserved"],[447,25,437,25],[447,26,437,26],[447,40,437,40],[447,42,437,42,"packet"],[447,48,437,48],[447,49,437,49],[448,8,438,8],[448,12,438,12],[448,13,438,13,"writeBuffer"],[448,24,438,24],[448,25,438,25,"push"],[448,29,438,29],[448,30,438,30,"packet"],[448,36,438,36],[448,37,438,37],[449,8,439,8],[449,12,439,12,"fn"],[449,14,439,14],[449,16,440,12],[449,20,440,16],[449,21,440,17,"once"],[449,25,440,21],[449,26,440,22],[449,33,440,29],[449,35,440,31,"fn"],[449,37,440,33],[449,38,440,34],[450,8,441,8],[450,12,441,12],[450,13,441,13,"flush"],[450,18,441,18],[450,19,441,19],[450,20,441,20],[451,6,442,4],[452,6,443,4],[453,0,444,0],[454,0,445,0],[455,4,443,4],[456,6,443,4,"key"],[456,9,443,4],[457,6,443,4,"value"],[457,11,443,4],[457,13,446,4],[457,22,446,4,"close"],[457,27,446,9,"close"],[457,28,446,9],[457,30,446,12],[458,8,447,8],[458,12,447,14,"close"],[458,17,447,19],[458,20,447,22,"close"],[458,21,447,22],[458,26,447,28],[459,10,448,12],[459,14,448,16],[459,15,448,17,"_onClose"],[459,23,448,25],[459,24,448,26],[459,38,448,40],[459,39,448,41],[460,10,449,12],[460,14,449,16],[460,15,449,17,"transport"],[460,24,449,26],[460,25,449,27,"close"],[460,30,449,32],[460,31,449,33],[460,32,449,34],[461,8,450,8],[461,9,450,9],[462,8,451,8],[462,12,451,14,"cleanupAndClose"],[462,27,451,29],[462,30,451,32,"cleanupAndClose"],[462,31,451,32],[462,36,451,38],[463,10,452,12],[463,14,452,16],[463,15,452,17,"off"],[463,18,452,20],[463,19,452,21],[463,28,452,30],[463,30,452,32,"cleanupAndClose"],[463,45,452,47],[463,46,452,48],[464,10,453,12],[464,14,453,16],[464,15,453,17,"off"],[464,18,453,20],[464,19,453,21],[464,33,453,35],[464,35,453,37,"cleanupAndClose"],[464,50,453,52],[464,51,453,53],[465,10,454,12,"close"],[465,15,454,17],[465,16,454,18],[465,17,454,19],[466,8,455,8],[466,9,455,9],[467,8,456,8],[467,12,456,14,"waitForUpgrade"],[467,26,456,28],[467,29,456,31,"waitForUpgrade"],[467,30,456,31],[467,35,456,37],[468,10,457,12],[469,10,458,12],[469,14,458,16],[469,15,458,17,"once"],[469,19,458,21],[469,20,458,22],[469,29,458,31],[469,31,458,33,"cleanupAndClose"],[469,46,458,48],[469,47,458,49],[470,10,459,12],[470,14,459,16],[470,15,459,17,"once"],[470,19,459,21],[470,20,459,22],[470,34,459,36],[470,36,459,38,"cleanupAndClose"],[470,51,459,53],[470,52,459,54],[471,8,460,8],[471,9,460,9],[472,8,461,8],[472,12,461,12],[472,21,461,21],[472,26,461,26],[472,30,461,30],[472,31,461,31,"readyState"],[472,41,461,41],[472,45,461,45],[472,51,461,51],[472,56,461,56],[472,60,461,60],[472,61,461,61,"readyState"],[472,71,461,71],[472,73,461,73],[473,10,462,12],[473,14,462,16],[473,15,462,17,"readyState"],[473,25,462,27],[473,28,462,30],[473,37,462,39],[474,10,463,12],[474,14,463,16],[474,18,463,20],[474,19,463,21,"writeBuffer"],[474,30,463,32],[474,31,463,33,"length"],[474,37,463,39],[474,39,463,41],[475,12,464,16],[475,16,464,20],[475,17,464,21,"once"],[475,21,464,25],[475,22,464,26],[475,29,464,33],[475,31,464,35],[475,37,464,41],[476,14,465,20],[476,18,465,24],[476,22,465,28],[476,23,465,29,"upgrading"],[476,32,465,38],[476,34,465,40],[477,16,466,24,"waitForUpgrade"],[477,30,466,38],[477,31,466,39],[477,32,466,40],[478,14,467,20],[478,15,467,21],[478,21,468,25],[479,16,469,24,"close"],[479,21,469,29],[479,22,469,30],[479,23,469,31],[480,14,470,20],[481,12,471,16],[481,13,471,17],[481,14,471,18],[482,10,472,12],[482,11,472,13],[482,17,473,17],[482,21,473,21],[482,25,473,25],[482,26,473,26,"upgrading"],[482,35,473,35],[482,37,473,37],[483,12,474,16,"waitForUpgrade"],[483,26,474,30],[483,27,474,31],[483,28,474,32],[484,10,475,12],[484,11,475,13],[484,17,476,17],[485,12,477,16,"close"],[485,17,477,21],[485,18,477,22],[485,19,477,23],[486,10,478,12],[487,8,479,8],[488,8,480,8],[488,15,480,15],[488,19,480,19],[489,6,481,4],[490,6,482,4],[491,0,483,0],[492,0,484,0],[493,0,485,0],[494,0,486,0],[495,4,482,4],[496,6,482,4,"key"],[496,9,482,4],[497,6,482,4,"value"],[497,11,482,4],[497,13,487,4],[497,22,487,4,"_onError"],[497,30,487,12,"_onError"],[497,31,487,13,"err"],[497,34,487,16],[497,36,487,18],[498,8,488,8,"SocketWithoutUpgrade"],[498,28,488,28],[498,29,488,29,"priorWebsocketSuccess"],[498,50,488,50],[498,53,488,53],[498,58,488,58],[499,8,489,8],[499,12,489,12],[499,16,489,16],[499,17,489,17,"opts"],[499,21,489,21],[499,22,489,22,"tryAllTransports"],[499,38,489,38],[499,42,490,12],[499,46,490,16],[499,47,490,17,"transports"],[499,57,490,27],[499,58,490,28,"length"],[499,64,490,34],[499,67,490,37],[499,68,490,38],[499,72,491,12],[499,76,491,16],[499,77,491,17,"readyState"],[499,87,491,27],[499,92,491,32],[499,101,491,41],[499,103,491,43],[500,10,492,12],[500,14,492,16],[500,15,492,17,"transports"],[500,25,492,27],[500,26,492,28,"shift"],[500,31,492,33],[500,32,492,34],[500,33,492,35],[501,10,493,12],[501,17,493,19],[501,21,493,23],[501,22,493,24,"_open"],[501,27,493,29],[501,28,493,30],[501,29,493,31],[502,8,494,8],[503,8,495,8],[503,12,495,12],[503,13,495,13,"emitReserved"],[503,25,495,25],[503,26,495,26],[503,33,495,33],[503,35,495,35,"err"],[503,38,495,38],[503,39,495,39],[504,8,496,8],[504,12,496,12],[504,13,496,13,"_onClose"],[504,21,496,21],[504,22,496,22],[504,39,496,39],[504,41,496,41,"err"],[504,44,496,44],[504,45,496,45],[505,6,497,4],[506,6,498,4],[507,0,499,0],[508,0,500,0],[509,0,501,0],[510,0,502,0],[511,4,498,4],[512,6,498,4,"key"],[512,9,498,4],[513,6,498,4,"value"],[513,11,498,4],[513,13,503,4],[513,22,503,4,"_onClose"],[513,30,503,12,"_onClose"],[513,31,503,13,"reason"],[513,37,503,19],[513,39,503,21,"description"],[513,50,503,32],[513,52,503,34],[514,8,504,8],[514,12,504,12],[514,21,504,21],[514,26,504,26],[514,30,504,30],[514,31,504,31,"readyState"],[514,41,504,41],[514,45,505,12],[514,51,505,18],[514,56,505,23],[514,60,505,27],[514,61,505,28,"readyState"],[514,71,505,38],[514,75,506,12],[514,84,506,21],[514,89,506,26],[514,93,506,30],[514,94,506,31,"readyState"],[514,104,506,41],[514,106,506,43],[515,10,507,12],[516,10,508,12],[516,14,508,16],[516,15,508,17,"clearTimeoutFn"],[516,29,508,31],[516,30,508,32],[516,34,508,36],[516,35,508,37,"_pingTimeoutTimer"],[516,52,508,54],[516,53,508,55],[517,10,509,12],[518,10,510,12],[518,14,510,16],[518,15,510,17,"transport"],[518,24,510,26],[518,25,510,27,"removeAllListeners"],[518,43,510,45],[518,44,510,46],[518,51,510,53],[518,52,510,54],[519,10,511,12],[520,10,512,12],[520,14,512,16],[520,15,512,17,"transport"],[520,24,512,26],[520,25,512,27,"close"],[520,30,512,32],[520,31,512,33],[520,32,512,34],[521,10,513,12],[522,10,514,12],[522,14,514,16],[522,15,514,17,"transport"],[522,24,514,26],[522,25,514,27,"removeAllListeners"],[522,43,514,45],[522,44,514,46],[522,45,514,47],[523,10,515,12],[523,14,515,16,"withEventListeners"],[523,32,515,34],[523,34,515,36],[524,12,516,16],[524,16,516,20],[524,20,516,24],[524,21,516,25,"_beforeunloadEventListener"],[524,47,516,51],[524,49,516,53],[525,14,517,20,"removeEventListener"],[525,33,517,39],[525,34,517,40],[525,48,517,54],[525,50,517,56],[525,54,517,60],[525,55,517,61,"_beforeunloadEventListener"],[525,81,517,87],[525,83,517,89],[525,88,517,94],[525,89,517,95],[526,12,518,16],[527,12,519,16],[527,16,519,20],[527,20,519,24],[527,21,519,25,"_offlineEventListener"],[527,42,519,46],[527,44,519,48],[528,14,520,20],[528,18,520,26,"i"],[528,19,520,27],[528,22,520,30,"OFFLINE_EVENT_LISTENERS"],[528,45,520,53],[528,46,520,54,"indexOf"],[528,53,520,61],[528,54,520,62],[528,58,520,66],[528,59,520,67,"_offlineEventListener"],[528,80,520,88],[528,81,520,89],[529,14,521,20],[529,18,521,24,"i"],[529,19,521,25],[529,24,521,30],[529,25,521,31],[529,26,521,32],[529,28,521,34],[530,16,522,24,"OFFLINE_EVENT_LISTENERS"],[530,39,522,47],[530,40,522,48,"splice"],[530,46,522,54],[530,47,522,55,"i"],[530,48,522,56],[530,50,522,58],[530,51,522,59],[530,52,522,60],[531,14,523,20],[532,12,524,16],[533,10,525,12],[534,10,526,12],[535,10,527,12],[535,14,527,16],[535,15,527,17,"readyState"],[535,25,527,27],[535,28,527,30],[535,36,527,38],[536,10,528,12],[537,10,529,12],[537,14,529,16],[537,15,529,17,"id"],[537,17,529,19],[537,20,529,22],[537,24,529,26],[538,10,530,12],[539,10,531,12],[539,14,531,16],[539,15,531,17,"emitReserved"],[539,27,531,29],[539,28,531,30],[539,35,531,37],[539,37,531,39,"reason"],[539,43,531,45],[539,45,531,47,"description"],[539,56,531,58],[539,57,531,59],[540,10,532,12],[541,10,533,12],[542,10,534,12],[542,14,534,16],[542,15,534,17,"writeBuffer"],[542,26,534,28],[542,29,534,31],[542,31,534,33],[543,10,535,12],[543,14,535,16],[543,15,535,17,"_prevBufferLen"],[543,29,535,31],[543,32,535,34],[543,33,535,35],[544,8,536,8],[545,6,537,4],[546,4,537,5],[547,2,537,5],[547,4,41,42,"Emitter"],[547,29,41,49],[548,2,539,0,"SocketWithoutUpgrade"],[548,22,539,20],[548,23,539,21,"protocol"],[548,31,539,29],[548,34,539,32,"protocol"],[548,50,539,40],[549,2,540,0],[550,0,541,0],[551,0,542,0],[552,0,543,0],[553,0,544,0],[554,0,545,0],[555,0,546,0],[556,0,547,0],[557,0,548,0],[558,0,549,0],[559,0,550,0],[560,0,551,0],[561,0,552,0],[562,0,553,0],[563,0,554,0],[564,0,555,0],[565,0,556,0],[566,0,557,0],[567,0,558,0],[568,0,559,0],[569,0,560,0],[570,0,561,0],[571,0,562,0],[572,2,540,0],[572,6,563,13,"SocketWithUpgrade"],[572,23,563,30],[572,26,563,30,"exports"],[572,33,563,30],[572,34,563,30,"SocketWithUpgrade"],[572,51,563,30],[572,77,563,30,"_SocketWithoutUpgrade"],[572,98,563,30],[573,4,564,4],[573,13,564,4,"SocketWithUpgrade"],[573,31,564,4],[573,33,564,18],[574,6,564,18],[574,10,564,18,"_this2"],[574,16,564,18],[575,6,564,18],[575,10,564,18,"_classCallCheck2"],[575,26,564,18],[575,27,564,18,"default"],[575,34,564,18],[575,42,564,18,"SocketWithUpgrade"],[575,59,564,18],[576,6,565,8,"_this2"],[576,12,565,8],[576,15,565,8,"_callSuper"],[576,25,565,8],[576,32,565,8,"SocketWithUpgrade"],[576,49,565,8],[576,51,565,17,"arguments"],[576,60,565,26],[577,6,566,8,"_this2"],[577,12,566,8],[577,13,566,13,"_upgrades"],[577,22,566,22],[577,25,566,25],[577,27,566,27],[578,6,566,28],[578,13,566,28,"_this2"],[578,19,566,28],[579,4,567,4],[580,4,567,5],[580,8,567,5,"_inherits2"],[580,18,567,5],[580,19,567,5,"default"],[580,26,567,5],[580,28,567,5,"SocketWithUpgrade"],[580,45,567,5],[580,47,567,5,"_SocketWithoutUpgrade"],[580,68,567,5],[581,4,567,5],[581,15,567,5,"_createClass2"],[581,28,567,5],[581,29,567,5,"default"],[581,36,567,5],[581,38,567,5,"SocketWithUpgrade"],[581,55,567,5],[582,6,567,5,"key"],[582,9,567,5],[583,6,567,5,"value"],[583,11,567,5],[583,13,568,4],[583,22,568,4,"onOpen"],[583,28,568,10,"onOpen"],[583,29,568,10],[583,31,568,13],[584,8,569,8,"_superPropGet"],[584,21,569,8],[584,22,569,8,"SocketWithUpgrade"],[584,39,569,8],[585,8,570,8],[585,12,570,12],[585,18,570,18],[585,23,570,23],[585,27,570,27],[585,28,570,28,"readyState"],[585,38,570,38],[585,42,570,42],[585,46,570,46],[585,47,570,47,"opts"],[585,51,570,51],[585,52,570,52,"upgrade"],[585,59,570,59],[585,61,570,61],[586,10,571,12],[586,15,571,17],[586,19,571,21,"i"],[586,20,571,22],[586,23,571,25],[586,24,571,26],[586,26,571,28,"i"],[586,27,571,29],[586,30,571,32],[586,34,571,36],[586,35,571,37,"_upgrades"],[586,44,571,46],[586,45,571,47,"length"],[586,51,571,53],[586,53,571,55,"i"],[586,54,571,56],[586,56,571,58],[586,58,571,60],[587,12,572,16],[587,16,572,20],[587,17,572,21,"_probe"],[587,23,572,27],[587,24,572,28],[587,28,572,32],[587,29,572,33,"_upgrades"],[587,38,572,42],[587,39,572,43,"i"],[587,40,572,44],[587,41,572,45],[587,42,572,46],[588,10,573,12],[589,8,574,8],[590,6,575,4],[591,6,576,4],[592,0,577,0],[593,0,578,0],[594,0,579,0],[595,0,580,0],[596,0,581,0],[597,4,576,4],[598,6,576,4,"key"],[598,9,576,4],[599,6,576,4,"value"],[599,11,576,4],[599,13,582,4],[599,22,582,4,"_probe"],[599,28,582,10,"_probe"],[599,29,582,11,"name"],[599,33,582,15],[599,35,582,17],[600,8,583,8],[600,12,583,12,"transport"],[600,21,583,21],[600,24,583,24],[600,28,583,28],[600,29,583,29,"createTransport"],[600,44,583,44],[600,45,583,45,"name"],[600,49,583,49],[600,50,583,50],[601,8,584,8],[601,12,584,12,"failed"],[601,18,584,18],[601,21,584,21],[601,26,584,26],[602,8,585,8,"SocketWithoutUpgrade"],[602,28,585,28],[602,29,585,29,"priorWebsocketSuccess"],[602,50,585,50],[602,53,585,53],[602,58,585,58],[603,8,586,8],[603,12,586,14,"onTransportOpen"],[603,27,586,29],[603,30,586,32,"onTransportOpen"],[603,31,586,32],[603,36,586,38],[604,10,587,12],[604,14,587,16,"failed"],[604,20,587,22],[604,22,588,16],[605,10,589,12,"transport"],[605,19,589,21],[605,20,589,22,"send"],[605,24,589,26],[605,25,589,27],[605,26,589,28],[606,12,589,30,"type"],[606,16,589,34],[606,18,589,36],[606,24,589,42],[607,12,589,44,"data"],[607,16,589,48],[607,18,589,50],[608,10,589,58],[608,11,589,59],[608,12,589,60],[608,13,589,61],[609,10,590,12,"transport"],[609,19,590,21],[609,20,590,22,"once"],[609,24,590,26],[609,25,590,27],[609,33,590,35],[609,35,590,38,"msg"],[609,38,590,41],[609,42,590,46],[610,12,591,16],[610,16,591,20,"failed"],[610,22,591,26],[610,24,592,20],[611,12,593,16],[611,16,593,20],[611,22,593,26],[611,27,593,31,"msg"],[611,30,593,34],[611,31,593,35,"type"],[611,35,593,39],[611,39,593,43],[611,46,593,50],[611,51,593,55,"msg"],[611,54,593,58],[611,55,593,59,"data"],[611,59,593,63],[611,61,593,65],[612,14,594,20],[612,18,594,24],[612,19,594,25,"upgrading"],[612,28,594,34],[612,31,594,37],[612,35,594,41],[613,14,595,20],[613,18,595,24],[613,19,595,25,"emitReserved"],[613,31,595,37],[613,32,595,38],[613,43,595,49],[613,45,595,51,"transport"],[613,54,595,60],[613,55,595,61],[614,14,596,20],[614,18,596,24],[614,19,596,25,"transport"],[614,28,596,34],[614,30,597,24],[615,14,598,20,"SocketWithoutUpgrade"],[615,34,598,40],[615,35,598,41,"priorWebsocketSuccess"],[615,56,598,62],[615,59,599,24],[615,70,599,35],[615,75,599,40,"transport"],[615,84,599,49],[615,85,599,50,"name"],[615,89,599,54],[616,14,600,20],[616,18,600,24],[616,19,600,25,"transport"],[616,28,600,34],[616,29,600,35,"pause"],[616,34,600,40],[616,35,600,41],[616,41,600,47],[617,16,601,24],[617,20,601,28,"failed"],[617,26,601,34],[617,28,602,28],[618,16,603,24],[618,20,603,28],[618,28,603,36],[618,33,603,41],[618,37,603,45],[618,38,603,46,"readyState"],[618,48,603,56],[618,50,604,28],[619,16,605,24,"cleanup"],[619,23,605,31],[619,24,605,32],[619,25,605,33],[620,16,606,24],[620,20,606,28],[620,21,606,29,"setTransport"],[620,33,606,41],[620,34,606,42,"transport"],[620,43,606,51],[620,44,606,52],[621,16,607,24,"transport"],[621,25,607,33],[621,26,607,34,"send"],[621,30,607,38],[621,31,607,39],[621,32,607,40],[622,18,607,42,"type"],[622,22,607,46],[622,24,607,48],[623,16,607,58],[623,17,607,59],[623,18,607,60],[623,19,607,61],[624,16,608,24],[624,20,608,28],[624,21,608,29,"emitReserved"],[624,33,608,41],[624,34,608,42],[624,43,608,51],[624,45,608,53,"transport"],[624,54,608,62],[624,55,608,63],[625,16,609,24,"transport"],[625,25,609,33],[625,28,609,36],[625,32,609,40],[626,16,610,24],[626,20,610,28],[626,21,610,29,"upgrading"],[626,30,610,38],[626,33,610,41],[626,38,610,46],[627,16,611,24],[627,20,611,28],[627,21,611,29,"flush"],[627,26,611,34],[627,27,611,35],[627,28,611,36],[628,14,612,20],[628,15,612,21],[628,16,612,22],[629,12,613,16],[629,13,613,17],[629,19,614,21],[630,14,615,20],[630,18,615,26,"err"],[630,21,615,29],[630,24,615,32],[630,28,615,36,"Error"],[630,33,615,41],[630,34,615,42],[630,47,615,55],[630,48,615,56],[631,14,616,20],[632,14,617,20,"err"],[632,17,617,23],[632,18,617,24,"transport"],[632,27,617,33],[632,30,617,36,"transport"],[632,39,617,45],[632,40,617,46,"name"],[632,44,617,50],[633,14,618,20],[633,18,618,24],[633,19,618,25,"emitReserved"],[633,31,618,37],[633,32,618,38],[633,46,618,52],[633,48,618,54,"err"],[633,51,618,57],[633,52,618,58],[634,12,619,16],[635,10,620,12],[635,11,620,13],[635,12,620,14],[636,8,621,8],[636,9,621,9],[637,8,622,8],[637,17,622,17,"freezeTransport"],[637,32,622,32,"freezeTransport"],[637,33,622,32],[637,35,622,35],[638,10,623,12],[638,14,623,16,"failed"],[638,20,623,22],[638,22,624,16],[639,10,625,12],[640,10,626,12,"failed"],[640,16,626,18],[640,19,626,21],[640,23,626,25],[641,10,627,12,"cleanup"],[641,17,627,19],[641,18,627,20],[641,19,627,21],[642,10,628,12,"transport"],[642,19,628,21],[642,20,628,22,"close"],[642,25,628,27],[642,26,628,28],[642,27,628,29],[643,10,629,12,"transport"],[643,19,629,21],[643,22,629,24],[643,26,629,28],[644,8,630,8],[645,8,631,8],[646,8,632,8],[646,12,632,14,"onerror"],[646,19,632,21],[646,22,632,25,"err"],[646,25,632,28],[646,29,632,33],[647,10,633,12],[647,14,633,18,"error"],[647,19,633,23],[647,22,633,26],[647,26,633,30,"Error"],[647,31,633,35],[647,32,633,36],[647,47,633,51],[647,50,633,54,"err"],[647,53,633,57],[647,54,633,58],[648,10,634,12],[649,10,635,12,"error"],[649,15,635,17],[649,16,635,18,"transport"],[649,25,635,27],[649,28,635,30,"transport"],[649,37,635,39],[649,38,635,40,"name"],[649,42,635,44],[650,10,636,12,"freezeTransport"],[650,25,636,27],[650,26,636,28],[650,27,636,29],[651,10,637,12],[651,14,637,16],[651,15,637,17,"emitReserved"],[651,27,637,29],[651,28,637,30],[651,42,637,44],[651,44,637,46,"error"],[651,49,637,51],[651,50,637,52],[652,8,638,8],[652,9,638,9],[653,8,639,8],[653,17,639,17,"onTransportClose"],[653,33,639,33,"onTransportClose"],[653,34,639,33],[653,36,639,36],[654,10,640,12,"onerror"],[654,17,640,19],[654,18,640,20],[654,36,640,38],[654,37,640,39],[655,8,641,8],[656,8,642,8],[657,8,643,8],[657,17,643,17,"onclose"],[657,24,643,24,"onclose"],[657,25,643,24],[657,27,643,27],[658,10,644,12,"onerror"],[658,17,644,19],[658,18,644,20],[658,33,644,35],[658,34,644,36],[659,8,645,8],[660,8,646,8],[661,8,647,8],[661,17,647,17,"onupgrade"],[661,26,647,26,"onupgrade"],[661,27,647,27,"to"],[661,29,647,29],[661,31,647,31],[662,10,648,12],[662,14,648,16,"transport"],[662,23,648,25],[662,27,648,29,"to"],[662,29,648,31],[662,30,648,32,"name"],[662,34,648,36],[662,39,648,41,"transport"],[662,48,648,50],[662,49,648,51,"name"],[662,53,648,55],[662,55,648,57],[663,12,649,16,"freezeTransport"],[663,27,649,31],[663,28,649,32],[663,29,649,33],[664,10,650,12],[665,8,651,8],[666,8,652,8],[667,8,653,8],[667,12,653,14,"cleanup"],[667,19,653,21],[667,22,653,24,"cleanup"],[667,23,653,24],[667,28,653,30],[668,10,654,12,"transport"],[668,19,654,21],[668,20,654,22,"removeListener"],[668,34,654,36],[668,35,654,37],[668,41,654,43],[668,43,654,45,"onTransportOpen"],[668,58,654,60],[668,59,654,61],[669,10,655,12,"transport"],[669,19,655,21],[669,20,655,22,"removeListener"],[669,34,655,36],[669,35,655,37],[669,42,655,44],[669,44,655,46,"onerror"],[669,51,655,53],[669,52,655,54],[670,10,656,12,"transport"],[670,19,656,21],[670,20,656,22,"removeListener"],[670,34,656,36],[670,35,656,37],[670,42,656,44],[670,44,656,46,"onTransportClose"],[670,60,656,62],[670,61,656,63],[671,10,657,12],[671,14,657,16],[671,15,657,17,"off"],[671,18,657,20],[671,19,657,21],[671,26,657,28],[671,28,657,30,"onclose"],[671,35,657,37],[671,36,657,38],[672,10,658,12],[672,14,658,16],[672,15,658,17,"off"],[672,18,658,20],[672,19,658,21],[672,30,658,32],[672,32,658,34,"onupgrade"],[672,41,658,43],[672,42,658,44],[673,8,659,8],[673,9,659,9],[674,8,660,8,"transport"],[674,17,660,17],[674,18,660,18,"once"],[674,22,660,22],[674,23,660,23],[674,29,660,29],[674,31,660,31,"onTransportOpen"],[674,46,660,46],[674,47,660,47],[675,8,661,8,"transport"],[675,17,661,17],[675,18,661,18,"once"],[675,22,661,22],[675,23,661,23],[675,30,661,30],[675,32,661,32,"onerror"],[675,39,661,39],[675,40,661,40],[676,8,662,8,"transport"],[676,17,662,17],[676,18,662,18,"once"],[676,22,662,22],[676,23,662,23],[676,30,662,30],[676,32,662,32,"onTransportClose"],[676,48,662,48],[676,49,662,49],[677,8,663,8],[677,12,663,12],[677,13,663,13,"once"],[677,17,663,17],[677,18,663,18],[677,25,663,25],[677,27,663,27,"onclose"],[677,34,663,34],[677,35,663,35],[678,8,664,8],[678,12,664,12],[678,13,664,13,"once"],[678,17,664,17],[678,18,664,18],[678,29,664,29],[678,31,664,31,"onupgrade"],[678,40,664,40],[678,41,664,41],[679,8,665,8],[679,12,665,12],[679,16,665,16],[679,17,665,17,"_upgrades"],[679,26,665,26],[679,27,665,27,"indexOf"],[679,34,665,34],[679,35,665,35],[679,49,665,49],[679,50,665,50],[679,55,665,55],[679,56,665,56],[679,57,665,57],[679,61,666,12,"name"],[679,65,666,16],[679,70,666,21],[679,84,666,35],[679,86,666,37],[680,10,667,12],[681,10,668,12],[681,14,668,16],[681,15,668,17,"setTimeoutFn"],[681,27,668,29],[681,28,668,30],[681,34,668,36],[682,12,669,16],[682,16,669,20],[682,17,669,21,"failed"],[682,23,669,27],[682,25,669,29],[683,14,670,20,"transport"],[683,23,670,29],[683,24,670,30,"open"],[683,28,670,34],[683,29,670,35],[683,30,670,36],[684,12,671,16],[685,10,672,12],[685,11,672,13],[685,13,672,15],[685,16,672,18],[685,17,672,19],[686,8,673,8],[686,9,673,9],[686,15,674,13],[687,10,675,12,"transport"],[687,19,675,21],[687,20,675,22,"open"],[687,24,675,26],[687,25,675,27],[687,26,675,28],[688,8,676,8],[689,6,677,4],[690,4,677,5],[691,6,677,5,"key"],[691,9,677,5],[692,6,677,5,"value"],[692,11,677,5],[692,13,678,4],[692,22,678,4,"onHandshake"],[692,33,678,15,"onHandshake"],[692,34,678,16,"data"],[692,38,678,20],[692,40,678,22],[693,8,679,8],[693,12,679,12],[693,13,679,13,"_upgrades"],[693,22,679,22],[693,25,679,25],[693,29,679,29],[693,30,679,30,"_filterUpgrades"],[693,45,679,45],[693,46,679,46,"data"],[693,50,679,50],[693,51,679,51,"upgrades"],[693,59,679,59],[693,60,679,60],[694,8,680,8,"_superPropGet"],[694,21,680,8],[694,22,680,8,"SocketWithUpgrade"],[694,39,680,8],[694,66,680,26,"data"],[694,70,680,30],[695,6,681,4],[696,6,682,4],[697,0,683,0],[698,0,684,0],[699,0,685,0],[700,0,686,0],[701,0,687,0],[702,4,682,4],[703,6,682,4,"key"],[703,9,682,4],[704,6,682,4,"value"],[704,11,682,4],[704,13,688,4],[704,22,688,4,"_filterUpgrades"],[704,37,688,19,"_filterUpgrades"],[704,38,688,20,"upgrades"],[704,46,688,28],[704,48,688,30],[705,8,689,8],[705,12,689,14,"filteredUpgrades"],[705,28,689,30],[705,31,689,33],[705,33,689,35],[706,8,690,8],[706,13,690,13],[706,17,690,17,"i"],[706,18,690,18],[706,21,690,21],[706,22,690,22],[706,24,690,24,"i"],[706,25,690,25],[706,28,690,28,"upgrades"],[706,36,690,36],[706,37,690,37,"length"],[706,43,690,43],[706,45,690,45,"i"],[706,46,690,46],[706,48,690,48],[706,50,690,50],[707,10,691,12],[707,14,691,16],[707,15,691,17],[707,19,691,21],[707,20,691,22,"transports"],[707,30,691,32],[707,31,691,33,"indexOf"],[707,38,691,40],[707,39,691,41,"upgrades"],[707,47,691,49],[707,48,691,50,"i"],[707,49,691,51],[707,50,691,52],[707,51,691,53],[707,53,692,16,"filteredUpgrades"],[707,69,692,32],[707,70,692,33,"push"],[707,74,692,37],[707,75,692,38,"upgrades"],[707,83,692,46],[707,84,692,47,"i"],[707,85,692,48],[707,86,692,49],[707,87,692,50],[708,8,693,8],[709,8,694,8],[709,15,694,15,"filteredUpgrades"],[709,31,694,31],[710,6,695,4],[711,4,695,5],[712,2,695,5],[712,4,563,39,"SocketWithoutUpgrade"],[712,24,563,59],[713,2,697,0],[714,0,698,0],[715,0,699,0],[716,0,700,0],[717,0,701,0],[718,0,702,0],[719,0,703,0],[720,0,704,0],[721,0,705,0],[722,0,706,0],[723,0,707,0],[724,0,708,0],[725,0,709,0],[726,0,710,0],[727,0,711,0],[728,0,712,0],[729,0,713,0],[730,0,714,0],[731,0,715,0],[732,2,697,0],[732,6,716,13,"Socket"],[732,12,716,19],[732,15,716,19,"exports"],[732,22,716,19],[732,23,716,19,"Socket"],[732,29,716,19],[732,55,716,19,"_SocketWithUpgrade"],[732,73,716,19],[733,4,717,4],[733,13,717,4,"Socket"],[733,20,717,16,"uri"],[733,23,717,19],[733,25,717,32],[734,6,717,32],[734,10,717,21,"opts"],[734,14,717,25],[734,17,717,25,"arguments"],[734,26,717,25],[734,27,717,25,"length"],[734,33,717,25],[734,41,717,25,"arguments"],[734,50,717,25],[734,58,717,25,"undefined"],[734,67,717,25],[734,70,717,25,"arguments"],[734,79,717,25],[734,85,717,28],[734,86,717,29],[734,87,717,30],[735,6,717,30],[735,10,717,30,"_classCallCheck2"],[735,26,717,30],[735,27,717,30,"default"],[735,34,717,30],[735,42,717,30,"Socket"],[735,48,717,30],[736,6,718,8],[736,10,718,14,"o"],[736,11,718,15],[736,14,718,18],[736,21,718,25,"uri"],[736,24,718,28],[736,29,718,33],[736,37,718,41],[736,40,718,44,"uri"],[736,43,718,47],[736,46,718,50,"opts"],[736,50,718,54],[737,6,719,8],[737,10,719,12],[737,11,719,13,"o"],[737,12,719,14],[737,13,719,15,"transports"],[737,23,719,25],[737,27,720,13,"o"],[737,28,720,14],[737,29,720,15,"transports"],[737,39,720,25],[737,43,720,29],[737,50,720,36,"o"],[737,51,720,37],[737,52,720,38,"transports"],[737,62,720,48],[737,63,720,49],[737,64,720,50],[737,65,720,51],[737,70,720,56],[737,78,720,65],[737,80,720,67],[738,8,721,12,"o"],[738,9,721,13],[738,10,721,14,"transports"],[738,20,721,24],[738,23,721,27],[738,24,721,28,"o"],[738,25,721,29],[738,26,721,30,"transports"],[738,36,721,40],[738,40,721,44],[738,41,721,45],[738,50,721,54],[738,52,721,56],[738,63,721,67],[738,65,721,69],[738,79,721,83],[738,80,721,84],[738,82,722,17,"map"],[738,85,722,20],[738,86,722,22,"transportName"],[738,99,722,35],[738,103,722,40,"DEFAULT_TRANSPORTS"],[738,120,722,58],[738,121,722,59,"transportName"],[738,134,722,72],[738,135,722,73],[738,136,722,74],[738,137,723,17,"filter"],[738,143,723,23],[738,144,723,25,"t"],[738,145,723,26],[738,149,723,31],[738,150,723,32],[738,151,723,33,"t"],[738,152,723,34],[738,153,723,35],[739,6,724,8],[740,6,724,9],[740,13,724,9,"_callSuper"],[740,23,724,9],[740,30,724,9,"Socket"],[740,36,724,9],[740,39,725,14,"uri"],[740,42,725,17],[740,44,725,19,"o"],[740,45,725,20],[741,4,726,4],[742,4,726,5],[742,8,726,5,"_inherits2"],[742,18,726,5],[742,19,726,5,"default"],[742,26,726,5],[742,28,726,5,"Socket"],[742,34,726,5],[742,36,726,5,"_SocketWithUpgrade"],[742,54,726,5],[743,4,726,5],[743,15,726,5,"_createClass2"],[743,28,726,5],[743,29,726,5,"default"],[743,36,726,5],[743,38,726,5,"Socket"],[743,44,726,5],[744,2,726,5],[744,4,716,28,"SocketWithUpgrade"],[744,21,716,45],[745,0,716,45],[745,3]],"functionMap":{"names":["<global>","addEventListener$argument_1","OFFLINE_EVENT_LISTENERS.forEach$argument_0","SocketWithoutUpgrade","SocketWithoutUpgrade#constructor","opts.transports.forEach$argument_0","_beforeunloadEventListener","_offlineEventListener","SocketWithoutUpgrade#createTransport","SocketWithoutUpgrade#_open","setTimeoutFn$argument_0","SocketWithoutUpgrade#setTransport","transport.on.on.on.on$argument_1","SocketWithoutUpgrade#onOpen","SocketWithoutUpgrade#_onPacket","SocketWithoutUpgrade#onHandshake","SocketWithoutUpgrade#_resetPingTimeout","SocketWithoutUpgrade#_onDrain","SocketWithoutUpgrade#flush","SocketWithoutUpgrade#_getWritablePackets","SocketWithoutUpgrade#_hasPingExpired","nextTick$argument_0","SocketWithoutUpgrade#write","SocketWithoutUpgrade#send","SocketWithoutUpgrade#_sendPacket","SocketWithoutUpgrade#close","close","cleanupAndClose","waitForUpgrade","once$argument_1","SocketWithoutUpgrade#_onError","SocketWithoutUpgrade#_onClose","SocketWithUpgrade","SocketWithUpgrade#constructor","SocketWithUpgrade#onOpen","SocketWithUpgrade#_probe","onTransportOpen","transport.once$argument_1","transport.pause$argument_0","freezeTransport","onerror","onTransportClose","onclose","onupgrade","cleanup","SocketWithUpgrade#onHandshake","SocketWithUpgrade#_filterUpgrades","Socket","Socket#constructor","map$argument_0","map.filter$argument_0"],"mappings":"AAA;gCCa;wCCC,wBD;KDC;OGyB;ICO;gCCkD;SDI;kDE2B;iBFM;6CGI;iBHI;KDQ;IKQ;KLiB;IMM;8BCG;aDE;KNY;IQM;yBCW,oDD;KRC;IUM;KVM;IWM;KX+B;IYO;KZY;IaM;mDNI;SME;KbI;IcM;KdY;IeM;KfY;IgBO;KhBmB;kBiBU;qBCM;aDE;KjBG;ImBS;KnBG;IoBS;KpBG;IqBU;KrBwB;IsBI;sBCC;SDG;gCEC;SFI;+BGC;SHI;mCII;iBJO;KtBU;I2BM;K3BU;I4BM;K5BkC;CHC;OgCyB;ICC;KDG;IEC;KFO;IGO;gCCI;qCCI;yCCU;qBDY;aDQ;SDC;QIC;SJQ;wBKE;SLM;QMC;SNE;QOE;SPE;QQE;SRI;wBSE;STM;8BzBS;ayBI;KHK;IaC;KbG;IcO;KdO;ChCC;O+CoB;ICC;qBCK,oDD;wBEC,UF;KDG;C/CC"}},"type":"js/module"}]}