{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/readOnlyError","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"tW9vjPH6bEH6zBBMaoehmzXhDcQ=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"aU3Lrys8xTVpYSDJal2nhppojC8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4DwyfFXBA53CJWVTVj5w3kH1PUg=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"]}},{"name":"../transport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"q68AWRvh2qc0QUlp41HSOL9aMUA=","exportNames":["*"]}},{"name":"../util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":42,"index":87}}],"key":"kanFP5HUYYYoVhDf3d7saim1ZXY=","exportNames":["*"]}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":64,"index":152}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Polling = void 0;\n  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/readOnlyError\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6], \"@babel/runtime/helpers/inherits\"));\n  var _transport = require(_dependencyMap[7], \"../transport.js\");\n  var _util = require(_dependencyMap[8], \"../util.js\");\n  var _engine = require(_dependencyMap[9], \"engine.io-parser\");\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }\n  var Polling = exports.Polling = /*#__PURE__*/function (_Transport) {\n    function Polling() {\n      var _this;\n      (0, _classCallCheck2.default)(this, Polling);\n      _this = _callSuper(this, Polling, arguments);\n      _this._polling = false;\n      return _this;\n    }\n    (0, _inherits2.default)(Polling, _Transport);\n    return (0, _createClass2.default)(Polling, [{\n      key: \"name\",\n      get: function () {\n        return \"polling\";\n      }\n      /**\n       * Opens the socket (triggers polling). We write a PING message to determine\n       * when the transport is open.\n       *\n       * @protected\n       */\n    }, {\n      key: \"doOpen\",\n      value: function doOpen() {\n        this._poll();\n      }\n      /**\n       * Pauses polling.\n       *\n       * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n       * @package\n       */\n    }, {\n      key: \"pause\",\n      value: function pause(onPause) {\n        this.readyState = \"pausing\";\n        var pause = () => {\n          this.readyState = \"paused\";\n          onPause();\n        };\n        if (this._polling || !this.writable) {\n          var total = 0;\n          if (this._polling) {\n            total++;\n            this.once(\"pollComplete\", function () {\n              --total || pause();\n            });\n          }\n          if (!this.writable) {\n            total++;\n            this.once(\"drain\", function () {\n              --total || pause();\n            });\n          }\n        } else {\n          pause();\n        }\n      }\n      /**\n       * Starts polling cycle.\n       *\n       * @private\n       */\n    }, {\n      key: \"_poll\",\n      value: function _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n      }\n      /**\n       * Overloads onData to detect payloads.\n       *\n       * @protected\n       */\n    }, {\n      key: \"onData\",\n      value: function onData(data) {\n        var callback = packet => {\n          // if its the first message we consider the transport open\n          if (\"opening\" === this.readyState && packet.type === \"open\") {\n            this.onOpen();\n          }\n          // if its a close packet, we close the ongoing requests\n          if (\"close\" === packet.type) {\n            this.onClose({\n              description: \"transport closed by the server\"\n            });\n            return false;\n          }\n          // otherwise bypass onData and handle the message\n          this.onPacket(packet);\n        };\n        // decode payload\n        (0, _engine.decodePayload)(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n          // if we got data we're not polling\n          this._polling = false;\n          this.emitReserved(\"pollComplete\");\n          if (\"open\" === this.readyState) {\n            this._poll();\n          } else {}\n        }\n      }\n      /**\n       * For polling, send a close packet.\n       *\n       * @protected\n       */\n    }, {\n      key: \"doClose\",\n      value: function doClose() {\n        var close = () => {\n          this.write([{\n            type: \"close\"\n          }]);\n        };\n        if (\"open\" === this.readyState) {\n          close();\n        } else {\n          // in case we're trying to close while\n          // handshaking is in progress (GH-164)\n          this.once(\"open\", close);\n        }\n      }\n      /**\n       * Writes a packets payload.\n       *\n       * @param {Array} packets - data packets\n       * @protected\n       */\n    }, {\n      key: \"write\",\n      value: function write(packets) {\n        this.writable = false;\n        (0, _engine.encodePayload)(packets, data => {\n          this.doWrite(data, () => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          });\n        });\n      }\n      /**\n       * Generates uri for connection.\n       *\n       * @private\n       */\n    }, {\n      key: \"uri\",\n      value: function uri() {\n        var schema = this.opts.secure ? \"https\" : \"http\";\n        var query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n          query[this.opts.timestampParam] = (0, _util.randomString)();\n        }\n        if (!this.supportsBinary && !query.sid) {\n          query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n      }\n    }]);\n  }(_transport.Transport);\n});","lineCount":181,"map":[[13,2,1,0],[13,6,1,0,"_transport"],[13,16,1,0],[13,19,1,0,"require"],[13,26,1,0],[13,27,1,0,"_dependencyMap"],[13,41,1,0],[14,2,2,0],[14,6,2,0,"_util"],[14,11,2,0],[14,14,2,0,"require"],[14,21,2,0],[14,22,2,0,"_dependencyMap"],[14,36,2,0],[15,2,3,0],[15,6,3,0,"_engine"],[15,13,3,0],[15,16,3,0,"require"],[15,23,3,0],[15,24,3,0,"_dependencyMap"],[15,38,3,0],[16,2,3,64],[16,11,3,64,"_callSuper"],[16,22,3,64,"t"],[16,23,3,64],[16,25,3,64,"o"],[16,26,3,64],[16,28,3,64,"e"],[16,29,3,64],[16,40,3,64,"o"],[16,41,3,64],[16,48,3,64,"_getPrototypeOf2"],[16,64,3,64],[16,65,3,64,"default"],[16,72,3,64],[16,74,3,64,"o"],[16,75,3,64],[16,82,3,64,"_possibleConstructorReturn2"],[16,109,3,64],[16,110,3,64,"default"],[16,117,3,64],[16,119,3,64,"t"],[16,120,3,64],[16,122,3,64,"_isNativeReflectConstruct"],[16,147,3,64],[16,152,3,64,"Reflect"],[16,159,3,64],[16,160,3,64,"construct"],[16,169,3,64],[16,170,3,64,"o"],[16,171,3,64],[16,173,3,64,"e"],[16,174,3,64],[16,186,3,64,"_getPrototypeOf2"],[16,202,3,64],[16,203,3,64,"default"],[16,210,3,64],[16,212,3,64,"t"],[16,213,3,64],[16,215,3,64,"constructor"],[16,226,3,64],[16,230,3,64,"o"],[16,231,3,64],[16,232,3,64,"apply"],[16,237,3,64],[16,238,3,64,"t"],[16,239,3,64],[16,241,3,64,"e"],[16,242,3,64],[17,2,3,64],[17,11,3,64,"_isNativeReflectConstruct"],[17,37,3,64],[17,51,3,64,"t"],[17,52,3,64],[17,56,3,64,"Boolean"],[17,63,3,64],[17,64,3,64,"prototype"],[17,73,3,64],[17,74,3,64,"valueOf"],[17,81,3,64],[17,82,3,64,"call"],[17,86,3,64],[17,87,3,64,"Reflect"],[17,94,3,64],[17,95,3,64,"construct"],[17,104,3,64],[17,105,3,64,"Boolean"],[17,112,3,64],[17,145,3,64,"t"],[17,146,3,64],[17,159,3,64,"_isNativeReflectConstruct"],[17,184,3,64],[17,196,3,64,"_isNativeReflectConstruct"],[17,197,3,64],[17,210,3,64,"t"],[17,211,3,64],[18,2,3,64],[18,6,4,13,"Polling"],[18,13,4,20],[18,16,4,20,"exports"],[18,23,4,20],[18,24,4,20,"Polling"],[18,31,4,20],[18,57,4,20,"_Transport"],[18,67,4,20],[19,4,5,4],[19,13,5,4,"Polling"],[19,21,5,4],[19,23,5,18],[20,6,5,18],[20,10,5,18,"_this"],[20,15,5,18],[21,6,5,18],[21,10,5,18,"_classCallCheck2"],[21,26,5,18],[21,27,5,18,"default"],[21,34,5,18],[21,42,5,18,"Polling"],[21,49,5,18],[22,6,6,8,"_this"],[22,11,6,8],[22,14,6,8,"_callSuper"],[22,24,6,8],[22,31,6,8,"Polling"],[22,38,6,8],[22,40,6,17,"arguments"],[22,49,6,26],[23,6,7,8,"_this"],[23,11,7,8],[23,12,7,13,"_polling"],[23,20,7,21],[23,23,7,24],[23,28,7,29],[24,6,7,30],[24,13,7,30,"_this"],[24,18,7,30],[25,4,8,4],[26,4,8,5],[26,8,8,5,"_inherits2"],[26,18,8,5],[26,19,8,5,"default"],[26,26,8,5],[26,28,8,5,"Polling"],[26,35,8,5],[26,37,8,5,"_Transport"],[26,47,8,5],[27,4,8,5],[27,15,8,5,"_createClass2"],[27,28,8,5],[27,29,8,5,"default"],[27,36,8,5],[27,38,8,5,"Polling"],[27,45,8,5],[28,6,8,5,"key"],[28,9,8,5],[29,6,8,5,"get"],[29,9,8,5],[29,11,9,4],[29,20,9,4,"get"],[29,21,9,4],[29,23,9,15],[30,8,10,8],[30,15,10,15],[30,24,10,24],[31,6,11,4],[32,6,12,4],[33,0,13,0],[34,0,14,0],[35,0,15,0],[36,0,16,0],[37,0,17,0],[38,4,12,4],[39,6,12,4,"key"],[39,9,12,4],[40,6,12,4,"value"],[40,11,12,4],[40,13,18,4],[40,22,18,4,"doOpen"],[40,28,18,10,"doOpen"],[40,29,18,10],[40,31,18,13],[41,8,19,8],[41,12,19,12],[41,13,19,13,"_poll"],[41,18,19,18],[41,19,19,19],[41,20,19,20],[42,6,20,4],[43,6,21,4],[44,0,22,0],[45,0,23,0],[46,0,24,0],[47,0,25,0],[48,0,26,0],[49,4,21,4],[50,6,21,4,"key"],[50,9,21,4],[51,6,21,4,"value"],[51,11,21,4],[51,13,27,4],[51,22,27,4,"pause"],[51,27,27,9,"pause"],[51,28,27,10,"onPause"],[51,35,27,17],[51,37,27,19],[52,8,28,8],[52,12,28,12],[52,13,28,13,"readyState"],[52,23,28,23],[52,26,28,26],[52,35,28,35],[53,8,29,8],[53,12,29,14,"pause"],[53,17,29,19],[53,20,29,22,"pause"],[53,21,29,22],[53,26,29,28],[54,10,30,12],[54,14,30,16],[54,15,30,17,"readyState"],[54,25,30,27],[54,28,30,30],[54,36,30,38],[55,10,31,12,"onPause"],[55,17,31,19],[55,18,31,20],[55,19,31,21],[56,8,32,8],[56,9,32,9],[57,8,33,8],[57,12,33,12],[57,16,33,16],[57,17,33,17,"_polling"],[57,25,33,25],[57,29,33,29],[57,30,33,30],[57,34,33,34],[57,35,33,35,"writable"],[57,43,33,43],[57,45,33,45],[58,10,34,12],[58,14,34,16,"total"],[58,19,34,21],[58,22,34,24],[58,23,34,25],[59,10,35,12],[59,14,35,16],[59,18,35,20],[59,19,35,21,"_polling"],[59,27,35,29],[59,29,35,31],[60,12,36,16,"total"],[60,17,36,21],[60,19,36,23],[61,12,37,16],[61,16,37,20],[61,17,37,21,"once"],[61,21,37,25],[61,22,37,26],[61,36,37,40],[61,38,37,42],[61,50,37,54],[62,14,38,20],[62,16,38,22,"total"],[62,21,38,27],[62,25,38,31,"pause"],[62,30,38,36],[62,31,38,37],[62,32,38,38],[63,12,39,16],[63,13,39,17],[63,14,39,18],[64,10,40,12],[65,10,41,12],[65,14,41,16],[65,15,41,17],[65,19,41,21],[65,20,41,22,"writable"],[65,28,41,30],[65,30,41,32],[66,12,42,16,"total"],[66,17,42,21],[66,19,42,23],[67,12,43,16],[67,16,43,20],[67,17,43,21,"once"],[67,21,43,25],[67,22,43,26],[67,29,43,33],[67,31,43,35],[67,43,43,47],[68,14,44,20],[68,16,44,22,"total"],[68,21,44,27],[68,25,44,31,"pause"],[68,30,44,36],[68,31,44,37],[68,32,44,38],[69,12,45,16],[69,13,45,17],[69,14,45,18],[70,10,46,12],[71,8,47,8],[71,9,47,9],[71,15,48,13],[72,10,49,12,"pause"],[72,15,49,17],[72,16,49,18],[72,17,49,19],[73,8,50,8],[74,6,51,4],[75,6,52,4],[76,0,53,0],[77,0,54,0],[78,0,55,0],[79,0,56,0],[80,4,52,4],[81,6,52,4,"key"],[81,9,52,4],[82,6,52,4,"value"],[82,11,52,4],[82,13,57,4],[82,22,57,4,"_poll"],[82,27,57,9,"_poll"],[82,28,57,9],[82,30,57,12],[83,8,58,8],[83,12,58,12],[83,13,58,13,"_polling"],[83,21,58,21],[83,24,58,24],[83,28,58,28],[84,8,59,8],[84,12,59,12],[84,13,59,13,"doPoll"],[84,19,59,19],[84,20,59,20],[84,21,59,21],[85,8,60,8],[85,12,60,12],[85,13,60,13,"emitReserved"],[85,25,60,25],[85,26,60,26],[85,32,60,32],[85,33,60,33],[86,6,61,4],[87,6,62,4],[88,0,63,0],[89,0,64,0],[90,0,65,0],[91,0,66,0],[92,4,62,4],[93,6,62,4,"key"],[93,9,62,4],[94,6,62,4,"value"],[94,11,62,4],[94,13,67,4],[94,22,67,4,"onData"],[94,28,67,10,"onData"],[94,29,67,11,"data"],[94,33,67,15],[94,35,67,17],[95,8,68,8],[95,12,68,14,"callback"],[95,20,68,22],[95,23,68,26,"packet"],[95,29,68,32],[95,33,68,37],[96,10,69,12],[97,10,70,12],[97,14,70,16],[97,23,70,25],[97,28,70,30],[97,32,70,34],[97,33,70,35,"readyState"],[97,43,70,45],[97,47,70,49,"packet"],[97,53,70,55],[97,54,70,56,"type"],[97,58,70,60],[97,63,70,65],[97,69,70,71],[97,71,70,73],[98,12,71,16],[98,16,71,20],[98,17,71,21,"onOpen"],[98,23,71,27],[98,24,71,28],[98,25,71,29],[99,10,72,12],[100,10,73,12],[101,10,74,12],[101,14,74,16],[101,21,74,23],[101,26,74,28,"packet"],[101,32,74,34],[101,33,74,35,"type"],[101,37,74,39],[101,39,74,41],[102,12,75,16],[102,16,75,20],[102,17,75,21,"onClose"],[102,24,75,28],[102,25,75,29],[103,14,75,31,"description"],[103,25,75,42],[103,27,75,44],[104,12,75,77],[104,13,75,78],[104,14,75,79],[105,12,76,16],[105,19,76,23],[105,24,76,28],[106,10,77,12],[107,10,78,12],[108,10,79,12],[108,14,79,16],[108,15,79,17,"onPacket"],[108,23,79,25],[108,24,79,26,"packet"],[108,30,79,32],[108,31,79,33],[109,8,80,8],[109,9,80,9],[110,8,81,8],[111,8,82,8],[111,12,82,8,"decodePayload"],[111,33,82,21],[111,35,82,22,"data"],[111,39,82,26],[111,41,82,28],[111,45,82,32],[111,46,82,33,"socket"],[111,52,82,39],[111,53,82,40,"binaryType"],[111,63,82,50],[111,64,82,51],[111,65,82,52,"forEach"],[111,72,82,59],[111,73,82,60,"callback"],[111,81,82,68],[111,82,82,69],[112,8,83,8],[113,8,84,8],[113,12,84,12],[113,20,84,20],[113,25,84,25],[113,29,84,29],[113,30,84,30,"readyState"],[113,40,84,40],[113,42,84,42],[114,10,85,12],[115,10,86,12],[115,14,86,16],[115,15,86,17,"_polling"],[115,23,86,25],[115,26,86,28],[115,31,86,33],[116,10,87,12],[116,14,87,16],[116,15,87,17,"emitReserved"],[116,27,87,29],[116,28,87,30],[116,42,87,44],[116,43,87,45],[117,10,88,12],[117,14,88,16],[117,20,88,22],[117,25,88,27],[117,29,88,31],[117,30,88,32,"readyState"],[117,40,88,42],[117,42,88,44],[118,12,89,16],[118,16,89,20],[118,17,89,21,"_poll"],[118,22,89,26],[118,23,89,27],[118,24,89,28],[119,10,90,12],[119,11,90,13],[119,17,91,17],[119,18,92,12],[120,8,93,8],[121,6,94,4],[122,6,95,4],[123,0,96,0],[124,0,97,0],[125,0,98,0],[126,0,99,0],[127,4,95,4],[128,6,95,4,"key"],[128,9,95,4],[129,6,95,4,"value"],[129,11,95,4],[129,13,100,4],[129,22,100,4,"doClose"],[129,29,100,11,"doClose"],[129,30,100,11],[129,32,100,14],[130,8,101,8],[130,12,101,14,"close"],[130,17,101,19],[130,20,101,22,"close"],[130,21,101,22],[130,26,101,28],[131,10,102,12],[131,14,102,16],[131,15,102,17,"write"],[131,20,102,22],[131,21,102,23],[131,22,102,24],[132,12,102,26,"type"],[132,16,102,30],[132,18,102,32],[133,10,102,40],[133,11,102,41],[133,12,102,42],[133,13,102,43],[134,8,103,8],[134,9,103,9],[135,8,104,8],[135,12,104,12],[135,18,104,18],[135,23,104,23],[135,27,104,27],[135,28,104,28,"readyState"],[135,38,104,38],[135,40,104,40],[136,10,105,12,"close"],[136,15,105,17],[136,16,105,18],[136,17,105,19],[137,8,106,8],[137,9,106,9],[137,15,107,13],[138,10,108,12],[139,10,109,12],[140,10,110,12],[140,14,110,16],[140,15,110,17,"once"],[140,19,110,21],[140,20,110,22],[140,26,110,28],[140,28,110,30,"close"],[140,33,110,35],[140,34,110,36],[141,8,111,8],[142,6,112,4],[143,6,113,4],[144,0,114,0],[145,0,115,0],[146,0,116,0],[147,0,117,0],[148,0,118,0],[149,4,113,4],[150,6,113,4,"key"],[150,9,113,4],[151,6,113,4,"value"],[151,11,113,4],[151,13,119,4],[151,22,119,4,"write"],[151,27,119,9,"write"],[151,28,119,10,"packets"],[151,35,119,17],[151,37,119,19],[152,8,120,8],[152,12,120,12],[152,13,120,13,"writable"],[152,21,120,21],[152,24,120,24],[152,29,120,29],[153,8,121,8],[153,12,121,8,"encodePayload"],[153,33,121,21],[153,35,121,22,"packets"],[153,42,121,29],[153,44,121,32,"data"],[153,48,121,36],[153,52,121,41],[154,10,122,12],[154,14,122,16],[154,15,122,17,"doWrite"],[154,22,122,24],[154,23,122,25,"data"],[154,27,122,29],[154,29,122,31],[154,35,122,37],[155,12,123,16],[155,16,123,20],[155,17,123,21,"writable"],[155,25,123,29],[155,28,123,32],[155,32,123,36],[156,12,124,16],[156,16,124,20],[156,17,124,21,"emitReserved"],[156,29,124,33],[156,30,124,34],[156,37,124,41],[156,38,124,42],[157,10,125,12],[157,11,125,13],[157,12,125,14],[158,8,126,8],[158,9,126,9],[158,10,126,10],[159,6,127,4],[160,6,128,4],[161,0,129,0],[162,0,130,0],[163,0,131,0],[164,0,132,0],[165,4,128,4],[166,6,128,4,"key"],[166,9,128,4],[167,6,128,4,"value"],[167,11,128,4],[167,13,133,4],[167,22,133,4,"uri"],[167,25,133,7,"uri"],[167,26,133,7],[167,28,133,10],[168,8,134,8],[168,12,134,14,"schema"],[168,18,134,20],[168,21,134,23],[168,25,134,27],[168,26,134,28,"opts"],[168,30,134,32],[168,31,134,33,"secure"],[168,37,134,39],[168,40,134,42],[168,47,134,49],[168,50,134,52],[168,56,134,58],[169,8,135,8],[169,12,135,14,"query"],[169,17,135,19],[169,20,135,22],[169,24,135,26],[169,25,135,27,"query"],[169,30,135,32],[169,34,135,36],[169,35,135,37],[169,36,135,38],[170,8,136,8],[171,8,137,8],[171,12,137,12],[171,17,137,17],[171,22,137,22],[171,26,137,26],[171,27,137,27,"opts"],[171,31,137,31],[171,32,137,32,"timestampRequests"],[171,49,137,49],[171,51,137,51],[172,10,138,12,"query"],[172,15,138,17],[172,16,138,18],[172,20,138,22],[172,21,138,23,"opts"],[172,25,138,27],[172,26,138,28,"timestampParam"],[172,40,138,42],[172,41,138,43],[172,44,138,46],[172,48,138,46,"randomString"],[172,66,138,58],[172,68,138,59],[172,69,138,60],[173,8,139,8],[174,8,140,8],[174,12,140,12],[174,13,140,13],[174,17,140,17],[174,18,140,18,"supportsBinary"],[174,32,140,32],[174,36,140,36],[174,37,140,37,"query"],[174,42,140,42],[174,43,140,43,"sid"],[174,46,140,46],[174,48,140,48],[175,10,141,12,"query"],[175,15,141,17],[175,16,141,18,"b64"],[175,19,141,21],[175,22,141,24],[175,23,141,25],[176,8,142,8],[177,8,143,8],[177,15,143,15],[177,19,143,19],[177,20,143,20,"createUri"],[177,29,143,29],[177,30,143,30,"schema"],[177,36,143,36],[177,38,143,38,"query"],[177,43,143,43],[177,44,143,44],[178,6,144,4],[179,4,144,5],[180,2,144,5],[180,4,4,29,"Transport"],[180,24,4,38],[181,0,4,38],[181,3]],"functionMap":{"names":["<global>","Polling","Polling#constructor","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#_poll","Polling#onData","callback","Polling#doClose","close","Polling#write","encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;OCG;ICC;KDG;IEC;KFE;IGO;KHE;IIO;sBCE;SDG;0CEK;iBFE;mCEI;iBFE;KJM;IOM;KPI;IQM;yBCC;SDY;KRc;IUM;sBCC;SDE;KVS;IYO;+BCE;+BCC;aDG;SDC;KZC;IeM;KfW;CDC"}},"type":"js/module"}]}