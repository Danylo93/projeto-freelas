version: '3.8'

services:
  # Infraestrutura
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:29093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092,CONTROLLER://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks: [core]
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8085:8080"]
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on: [kafka]
    networks: [core]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports: ["6379:6379"]
    networks: [core]

  mongo:
    image: mongo:7
    container_name: mongo
    ports: ["27017:27017"]
    networks: [core]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servi√ßos Core
  firebase-service:
    build:
      context: ./services/common
      dockerfile: firebase-service/Dockerfile
    container_name: firebase-service
    networks: [core]
    environment:
      - FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
      - FIREBASE_CREDENTIALS_PATH=${FIREBASE_CREDENTIALS_PATH}
      - PYTHONPATH=/app
    working_dir: /app/firebase-service
    volumes:
      - ./services/common:/app
      - ./config/firebase-credentials.json:/app/firebase-credentials.json:ro
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import firebase_admin; print(\"Firebase OK\")' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  auth-service:
    build:
      context: ./services/common
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    ports: ["8010:8010"]
    networks: [core]
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=freelas
      - JWT_SECRET=${JWT_SECRET:-dev-secret}
      - PYTHONPATH=/app
    depends_on: [mongo]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8010/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  request-service:
    build:
      context: ./services/common
      dockerfile: request-service/Dockerfile
    container_name: request-service
    ports: ["8011:8011"]
    networks: [core]
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=freelas
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
      - PYTHONPATH=/app
    volumes:
      - ./config/firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on: [mongo, kafka, firebase-service]
    command: ["python", "request-service/main_optimized.py"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8011/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  provider-service:
    build:
      context: ./services/common
      dockerfile: provider-service/Dockerfile
    container_name: provider-service
    ports: ["8012:8012"]
    networks: [core]
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=freelas
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
      - PYTHONPATH=/app
    volumes:
      - ./config/firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on: [mongo, kafka, firebase-service]
    command: ["python", "provider-service/main_optimized.py"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8012/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  matching-service:
    build:
      context: ./services/common
      dockerfile: matching-service/Dockerfile
    container_name: matching-service
    ports: ["8013:8013"]
    networks: [core]
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=freelas
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONPATH=/app
    depends_on: [mongo, kafka]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8013/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  notification-service:
    build:
      context: ./services/common
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    ports: ["8014:8014"]
    networks: [core]
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=freelas
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONPATH=/app
    depends_on: [mongo, kafka]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8014/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    build:
      context: ./services/common
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports: ["8000:8000"]
    networks: [core]
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8010
      - REQUEST_SERVICE_URL=http://request-service:8011
      - PROVIDER_SERVICE_URL=http://provider-service:8012
      - MATCHING_SERVICE_URL=http://matching-service:8013
      - NOTIFICATION_SERVICE_URL=http://notification-service:8014
      - PYTHONPATH=/app
    depends_on: [auth-service, request-service, provider-service, matching-service, notification-service]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  core:
    driver: bridge
