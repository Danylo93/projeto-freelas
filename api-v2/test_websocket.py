#!/usr/bin/env python3
"""
Teste de conectividade WebSocket para API Gateway
"""
import asyncio
import websockets
import json
import sys

async def test_websocket_connection():
    """Testa conex√£o WebSocket com o API Gateway"""
    
    # URL do WebSocket
    ws_url = "ws://localhost:8000/ws"
    
    # Dados de teste (token falso para teste)
    test_data = {
        "user_id": "test_user_123",
        "user_type": 1,  # Prestador
        "token": "fake_token_for_testing"
    }
    
    print(f"üîå [TEST] Conectando ao WebSocket: {ws_url}")
    
    try:
        # Construir URL com par√¢metros
        full_url = f"{ws_url}?user_id={test_data['user_id']}&user_type={test_data['user_type']}&token={test_data['token']}"
        
        async with websockets.connect(full_url) as websocket:
            print("‚úÖ [TEST] WebSocket conectado com sucesso!")
            
            # Enviar mensagem de ping
            ping_message = {
                "type": "ping",
                "timestamp": 1234567890
            }
            
            await websocket.send(json.dumps(ping_message))
            print("üì§ [TEST] Mensagem ping enviada")
            
            # Aguardar resposta
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                response_data = json.loads(response)
                print(f"üì® [TEST] Resposta recebida: {response_data}")
                
                if response_data.get("type") == "pong":
                    print("‚úÖ [TEST] Pong recebido - conex√£o funcionando!")
                else:
                    print(f"‚ö†Ô∏è [TEST] Resposta inesperada: {response_data}")
                    
            except asyncio.TimeoutError:
                print("‚è∞ [TEST] Timeout aguardando resposta")
            
            # Testar entrada em sala
            join_room_message = {
                "type": "join_room",
                "room": "test_room"
            }
            
            await websocket.send(json.dumps(join_room_message))
            print("üì§ [TEST] Mensagem join_room enviada")
            
            # Aguardar confirma√ß√£o
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                response_data = json.loads(response)
                print(f"üì® [TEST] Resposta join_room: {response_data}")
                
                if response_data.get("type") == "room_joined":
                    print("‚úÖ [TEST] Entrada na sala confirmada!")
                else:
                    print(f"‚ö†Ô∏è [TEST] Resposta inesperada: {response_data}")
                    
            except asyncio.TimeoutError:
                print("‚è∞ [TEST] Timeout aguardando confirma√ß√£o de sala")
            
            print("‚úÖ [TEST] Teste WebSocket conclu√≠do com sucesso!")
            
    except websockets.exceptions.ConnectionRefused:
        print("‚ùå [TEST] Erro: Conex√£o recusada. Verifique se o API Gateway est√° rodando na porta 8000")
        return False
    except websockets.exceptions.InvalidURI:
        print("‚ùå [TEST] Erro: URI inv√°lida")
        return False
    except Exception as e:
        print(f"‚ùå [TEST] Erro inesperado: {e}")
        return False
    
    return True

async def test_notification_send():
    """Testa envio de notifica√ß√£o via WebSocket"""
    
    print("\nüîî [TEST] Testando envio de notifica√ß√£o...")
    
    # Simular notifica√ß√£o para prestador
    notification_data = {
        "type": "new_request",
        "request_id": "test_request_123",
        "client_name": "Cliente Teste",
        "category": "Limpeza",
        "description": "Servi√ßo de teste",
        "price": 50.00,
        "client_latitude": -23.5505,
        "client_longitude": -46.6333
    }
    
    # Aqui voc√™ poderia implementar um teste mais completo
    # simulando o envio de notifica√ß√£o para um prestador espec√≠fico
    print(f"üì§ [TEST] Dados de notifica√ß√£o: {notification_data}")
    print("‚úÖ [TEST] Teste de notifica√ß√£o simulado")

if __name__ == "__main__":
    print("üöÄ [TEST] Iniciando testes WebSocket...")
    
    # Executar teste de conex√£o
    result = asyncio.run(test_websocket_connection())
    
    if result:
        # Executar teste de notifica√ß√£o
        asyncio.run(test_notification_send())
        print("\nüéâ [TEST] Todos os testes passaram!")
        sys.exit(0)
    else:
        print("\n‚ùå [TEST] Testes falharam!")
        sys.exit(1)

