
services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:29093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092,CONTROLLER://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks: [core]
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8085:8080"]
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on: [kafka]
    networks: [core]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports: ["6379:6379"]
    networks: [core]

  mongo:
    image: mongo:7
    container_name: mongo
    ports: ["27017:27017"]
    networks: [core]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ----------------- NOSSOS SERVIÃ‡OS -----------------

  api-gateway:
    build:
      context: ./services/common
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports: ["8000:8000"]
    networks: [core]
    depends_on:
      - provider-service
      - request-service
      - auth-service
      - matching-service
      - payment-service
      - admin-service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8014
      - PROVIDER_SERVICE_URL=http://provider-service:8011
      - REQUEST_SERVICE_URL=http://request-service:8012
      - MATCHING_SERVICE_URL=http://matching-service:8013
      - PAYMENT_SERVICE_URL=http://payment-service:8016
      - ADMIN_SERVICE_URL=http://admin-service:8017
      - SOCKET_SERVICE_URL=http://socket-gateway:8015
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  provider-service:
    build:
      context: ./services/common
      dockerfile: provider-service/Dockerfile
    container_name: provider-service
    networks: [core]
    depends_on:
      mongo:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - ./services/common/provider-service/.env
    environment:
      - PYTHONPATH=/app
    working_dir: /app/provider-service
    volumes:
      - ./services/common:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8011/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10


  request-service:
    build:
      context: ./services/common
      dockerfile: request-service/Dockerfile
    container_name: request-service
    networks: [core]
    depends_on:
      mongo:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - ./services/common/request-service/.env
    environment:
      - PYTHONPATH=/app
    working_dir: /app/request-service
    volumes:
      - ./services/common:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8012/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  matching-service:
    build:
      context: ./services/common
      dockerfile: matching-service/Dockerfile
    container_name: matching-service
    networks: [core]
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - ./services/common/matching-service/.env
    working_dir: /app/matching-service
    volumes:
      - ./services/common:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8013/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  auth-service:
    build: ./services/common/auth-service
    container_name: auth-service
    networks: [core]
    depends_on: [mongo]
    env_file:
      - ./services/common/auth-service/.env
    volumes:
      - ./services/common/auth-service:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8014/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  socket-gateway:
    build:
      context: ./services/common/socket-gateway
      dockerfile: Dockerfile
    container_name: socket-gateway
    ports: ["8015:8015"]
    networks: [core]
    depends_on:
      provider-service:
        condition: service_healthy
      request-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./services/common/socket-gateway/.env
    environment:
      PYTHONPATH: /app
      KAFKA_BOOTSTRAP: kafka:29092
    working_dir: /app/socket-gateway
    volumes:
      - ./services/common:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8015/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  notification-service:
    build:
      context: ./services/common
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    ports: ["8016:8016"]
    networks: [core]
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      KAFKA_BOOTSTRAP: kafka:29092
      MONGO_URL: mongodb://mongo:27017
      DB_NAME: freelas
    working_dir: /app/notification-service
    volumes:
      - ./services/common:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8016/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  payment-service:
    build:
      context: ./services/common
      dockerfile: payment-service/Dockerfile
    container_name: payment-service
    networks: [core]
    env_file:
      - ./services/common/payment-service/.env
    working_dir: /app/payment-service
    volumes:
      - ./services/common:/app

  admin-service:
    build:
      context: ./services/common
      dockerfile: admin-service/Dockerfile
    container_name: admin-service
    networks: [core]
    env_file:
      - ./services/common/admin-service/.env
    working_dir: /app/admin-service
    volumes:
      - ./services/common:/app

networks:
  core:
    driver: bridge
