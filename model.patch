diff --git a/frontend/components/ui/AppBar.tsx b/frontend/components/ui/AppBar.tsx
index c4280c6..740b1f3 100644
--- a/frontend/components/ui/AppBar.tsx
+++ b/frontend/components/ui/AppBar.tsx
@@ -6,8 +6,6 @@ import {
   ViewStyle,
   TextStyle,
   TouchableOpacity,
-  StatusBar,
-  Platform,
 } from 'react-native';
 import { useSafeAreaInsets } from 'react-native-safe-area-context';
 
@@ -93,35 +91,11 @@ export const AppBar: React.FC<AppBarProps> = ({
 
     return baseStyle;
   };
-        break;
-    }
-
-    return baseStyle;
-  };
-
-  const getSubtitleStyle = (): TextStyle => {
-    return {
-      ...theme.typography.bodyMedium,
-      color: theme.colors.onSurfaceVariant,
-      marginTop: theme.spacing.xs,
-    };
-  };
-
-  const getIconStyle = (): ViewStyle => {
-    return {
-      padding: theme.spacing.sm,
-      borderRadius: theme.borderRadius.md,
-    };
-  };
 
-  const renderLeftContent = () => {
+  const renderLeftAction = () => {
     if (showBackButton) {
       return (
-        <TouchableOpacity
-          style={[getIconStyle(), iconStyle]}
-          onPress={onBackPress}
-          activeOpacity={0.7}
-        >
+        <TouchableOpacity onPress={onBackPress} style={[styles.iconButton, iconStyle]}>
           <Text style={styles.backIcon}>‚Üê</Text>
         </TouchableOpacity>
       );
@@ -129,11 +103,7 @@ export const AppBar: React.FC<AppBarProps> = ({
 
     if (leftIcon) {
       return (
-        <TouchableOpacity
-          style={[getIconStyle(), iconStyle]}
-          onPress={onLeftIconPress}
-          activeOpacity={0.7}
-        >
+        <TouchableOpacity onPress={onLeftIconPress} style={[styles.iconButton, iconStyle]}>
           {leftIcon}
         </TouchableOpacity>
       );
@@ -142,14 +112,10 @@ export const AppBar: React.FC<AppBarProps> = ({
     return <View style={styles.placeholder} />;
   };
 
-  const renderRightContent = () => {
+  const renderRightAction = () => {
     if (rightIcon) {
       return (
-        <TouchableOpacity
-          style={[getIconStyle(), iconStyle]}
-          onPress={onRightIconPress}
-          activeOpacity={0.7}
-        >
+        <TouchableOpacity onPress={onRightIconPress} style={[styles.iconButton, iconStyle]}>
           {rightIcon}
         </TouchableOpacity>
       );
@@ -158,38 +124,27 @@ export const AppBar: React.FC<AppBarProps> = ({
     return <View style={styles.placeholder} />;
   };
 
-  const renderTitle = () => {
-    if (!title) return null;
-
-    return (
-      <View style={styles.titleContainer}>
-        <Text style={[getTitleStyle(), titleStyle]}>
-          {title}
-        </Text>
-        {subtitle && (
-          <Text style={[getSubtitleStyle(), subtitleStyle]}>
-            {subtitle}
-          </Text>
-        )}
-      </View>
-    );
-  };
-
   return (
-    <>
-      <StatusBar
-        barStyle={theme.isDark ? 'light-content' : 'dark-content'}
-        backgroundColor={theme.colors.surface}
-        translucent={Platform.OS === 'android'}
-      />
-      <View style={[getAppBarStyle(), style]}>
-        <View style={styles.content}>
-          {renderLeftContent()}
-          {renderTitle()}
-          {renderRightContent()}
+    <View style={[getAppBarStyle(), style]}>
+      <View style={styles.content}>
+        {renderLeftAction()}
+        
+        <View style={styles.titleContainer}>
+          {title && (
+            <Text style={[getTitleStyle(), titleStyle]}>
+              {title}
+            </Text>
+          )}
+          {subtitle && (
+            <Text style={[styles.subtitle, subtitleStyle]}>
+              {subtitle}
+            </Text>
+          )}
         </View>
+
+        {renderRightAction()}
       </View>
-    </>
+    </View>
   );
 };
 
@@ -204,6 +159,17 @@ const styles = StyleSheet.create({
     alignItems: 'center',
     paddingHorizontal: 16,
   },
+  subtitle: {
+    fontSize: 14,
+    color: '#666666',
+    marginTop: 4,
+  },
+  iconButton: {
+    width: 40,
+    height: 40,
+    justifyContent: 'center',
+    alignItems: 'center',
+  },
   backIcon: {
     fontSize: 20,
     fontWeight: '600',
@@ -215,123 +181,4 @@ const styles = StyleSheet.create({
   },
 });
 
-// AppBar espec√≠fico para telas principais
-export interface MainAppBarProps extends Omit<AppBarProps, 'title' | 'rightIcon'> {
-  user?: {
-    name: string;
-    avatar?: string;
-  };
-  notifications?: {
-    count: number;
-    onPress: () => void;
-  };
-  onProfilePress?: () => void;
-}
-
-export const MainAppBar: React.FC<MainAppBarProps> = ({
-  user,
-  notifications,
-  onProfilePress,
-  ...props
-}) => {
-  const renderProfileIcon = () => {
-    if (user?.avatar) {
-      return (
-        <View style={styles.avatarContainer}>
-          <Text style={styles.avatarText}>{user.avatar}</Text>
-        </View>
-      );
-    }
-    
-    return (
-      <TouchableOpacity 
-        style={styles.profileButton}
-        onPress={onProfilePress}
-      >
-        <Text style={styles.profileIcon}>üë§</Text>
-      </TouchableOpacity>
-    );
-  };
-      );
-    }
-
-    return (
-      <View style={[styles.avatarPlaceholder, { backgroundColor: theme.colors.primaryContainer }]}>
-        <Text style={[styles.avatarText, { color: theme.colors.onPrimaryContainer }]}>
-          {user?.name?.charAt(0).toUpperCase() || 'U'}
-        </Text>
-      </View>
-    );
-  };
-
-  const renderNotificationIcon = () => {
-    if (!notifications) return null;
-
-    return (
-      <View style={styles.notificationContainer}>
-        <Text style={styles.notificationIcon}>üîî</Text>
-        {notifications.count > 0 && (
-          <View style={[styles.notificationBadge, { backgroundColor: theme.colors.error }]}>
-            <Text style={[styles.notificationCount, { color: theme.colors.onError }]}>
-              {notifications.count > 99 ? '99+' : notifications.count}
-            </Text>
-          </View>
-        )}
-      </View>
-    );
-  };
-
-  return (
-    <AppBar
-      title={user?.name || 'Ol√°!'}
-      subtitle="Como posso ajudar?"
-      leftIcon={renderProfileIcon()}
-      rightIcon={renderNotificationIcon()}
-      onLeftIconPress={onProfilePress}
-      onRightIconPress={notifications?.onPress}
-      {...props}
-    />
-  );
-};
-
-const mainAppBarStyles = StyleSheet.create({
-  avatarContainer: {
-    width: 40,
-    height: 40,
-    borderRadius: 20,
-    alignItems: 'center',
-    justifyContent: 'center',
-  },
-  avatarPlaceholder: {
-    width: 40,
-    height: 40,
-    borderRadius: 20,
-    alignItems: 'center',
-    justifyContent: 'center',
-  },
-  avatarText: {
-    fontSize: 16,
-    fontWeight: '600',
-  },
-  notificationContainer: {
-    position: 'relative',
-    padding: 8,
-  },
-  notificationIcon: {
-    fontSize: 20,
-  },
-  notificationBadge: {
-    position: 'absolute',
-    top: 4,
-    right: 4,
-    minWidth: 16,
-    height: 16,
-    borderRadius: 8,
-    alignItems: 'center',
-    justifyContent: 'center',
-  },
-  notificationCount: {
-    fontSize: 10,
-    fontWeight: '600',
-  },
-});
+export default AppBar;
diff --git a/model.patch b/model.patch
index 848ad28..43dc5e7 100644
--- a/model.patch
+++ b/model.patch
@@ -1,440 +0,0 @@
-diff --git a/frontend/components/FirebaseAnimatedMapView.tsx b/frontend/components/FirebaseAnimatedMapView.tsx
-new file mode 100644
-index 0000000..724e2dc
---- /dev/null
-+++ b/frontend/components/FirebaseAnimatedMapView.tsx
-@@ -0,0 +1,10 @@
-+import React from 'react';
-+import { View, Text } from 'react-native';
-+
-+export default function FirebaseAnimatedMapView() {
-+  return (
-+    <View>
-+      <Text>Mapa em desenvolvimento</Text>
-+    </View>
-+  );
-+}
-\ No newline at end of file
-diff --git a/model.patch b/model.patch
-index 4cffde5..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,418 +0,0 @@
--diff --git a/frontend/contexts/LocationContext.tsx b/frontend/contexts/LocationContext.tsx
--index 29a46ee..450c451 100644
----- a/frontend/contexts/LocationContext.tsx
--+++ b/frontend/contexts/LocationContext.tsx
--@@ -1,98 +1,47 @@
---import React, { createContext, useContext, useState, ReactNode } from 'react';
---
---interface LocationData {
---  latitude: number;
---  longitude: number;
---  accuracy: number | null;
---  timestamp: number;
---}
--+import React, { createContext, useContext, ReactNode } from 'react';
-- 
-- interface LocationContextData {
---  location: LocationData | null;
--+  location: null;
--   isLoading: boolean;
--   hasPermission: boolean;
--   requestPermissions: () => Promise<boolean>;
---  getCurrentLocation: () => Promise<LocationData | null>;
--+  getCurrentLocation: () => Promise<null>;
--   watchLocation: boolean;
--   setWatchLocation: (watch: boolean) => void;
--   locationError: string | null;
-- }
-- 
---const LocationContext = createContext<LocationContextData>({} as LocationContextData);
--+const LocationContext = createContext<LocationContextData>({
--+  location: null,
--+  isLoading: false,
--+  hasPermission: false,
--+  requestPermissions: async () => false,
--+  getCurrentLocation: async () => null,
--+  watchLocation: false,
--+  setWatchLocation: () => {},
--+  locationError: null,
--+});
-- 
-- export function useLocation(): LocationContextData {
---  const context = useContext(LocationContext);
---  if (!context) {
---    throw new Error('useLocation deve ser usado dentro de um LocationProvider');
---  }
---  return context;
---}
---
---interface LocationProviderProps {
---  children: ReactNode;
--+  return useContext(LocationContext);
-- }
-- 
---export function LocationProvider({ children }: LocationProviderProps) {
---  const [location, setLocation] = useState<LocationData | null>(null);
---  const [isLoading, setIsLoading] = useState(false);
---  const [hasPermission, setHasPermission] = useState(false);
---  const [watchLocation, setWatchLocation] = useState(false);
---  const [locationError, setLocationError] = useState<string | null>(null);
---
---  const requestPermissions = async (): Promise<boolean> => {
---    // Implementa√ß√£o simplificada para funcionar
---    setHasPermission(true);
---    return true;
---  };
---
---  const getCurrentLocation = async (): Promise<LocationData | null> => {
---    // Mock de localiza√ß√£o para desenvolvimento
---    const mockLocation: LocationData = {
---      latitude: -23.5505,
---      longitude: -46.6333,
---      accuracy: 10,
---      timestamp: Date.now(),
---    };
---    setLocation(mockLocation);
---    return mockLocation;
--+export function LocationProvider({ children }: { children: ReactNode }) {
--+  const value = {
--+    location: null,
--+    isLoading: false,
--+    hasPermission: false,
--+    requestPermissions: async () => false,
--+    getCurrentLocation: async () => null,
--+    watchLocation: false,
--+    setWatchLocation: () => {},
--+    locationError: null,
--   };
-- 
--   return (
---    <LocationContext.Provider
---      value={{
---        location,
---        isLoading,
---        hasPermission,
---        requestPermissions,
---        getCurrentLocation,
---        watchLocation,
---        setWatchLocation,
---        locationError,
---      }}
---    >
--+    <LocationContext.Provider value={value}>
--       {children}
--     </LocationContext.Provider>
--   );
-- }
-- 
---export function calculateDistance(
---  lat1: number,
---  lon1: number,
---  lat2: number,
---  lon2: number
---): number {
---  const R = 6371;
---  const dLat = toRadians(lat2 - lat1);
---  const dLon = toRadians(lon2 - lon1);
---  const a =
---    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
---    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
---    Math.sin(dLon / 2) * Math.sin(dLon / 2);
---  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
---  return R * c;
---}
---
---function toRadians(degrees: number): number {
---  return degrees * (Math.PI / 180);
---}
---
--diff --git a/model.patch b/model.patch
--index 4cd33b6..e69de29 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,285 +0,0 @@
---diff --git a/frontend/contexts/LocationContext.tsx b/frontend/contexts/LocationContext.tsx
---index 7265581..29a46ee 100644
------ a/frontend/contexts/LocationContext.tsx
---+++ b/frontend/contexts/LocationContext.tsx
---@@ -95,119 +95,4 @@ export function calculateDistance(
--- function toRadians(degrees: number): number {
---   return degrees * (Math.PI / 180);
--- }
----  const [location, setLocation] = useState<LocationData | null>(null);
----  const [isLoading, setIsLoading] = useState(false);
----  const [hasPermission, setHasPermission] = useState(false);
----  const [watchLocation, setWatchLocation] = useState(false);
----  const [locationError, setLocationError] = useState<string | null>(null);
----
----  // Solicitar permiss√µes de localiza√ß√£o
----  const requestPermissions = async (): Promise<boolean> => {
----    try {
----      setIsLoading(true);
----      
----      const { status } = await Location.requestForegroundPermissionsAsync();
----      const permission = status === 'granted';
----      
----      setHasPermission(permission);
----      
----      if (!permission) {
----        Alert.alert(
----          'Permiss√£o Negada',
----          'A permiss√£o de localiza√ß√£o √© necess√°ria para encontrar prestadores pr√≥ximos a voc√™.',
----          [{ text: 'OK' }]
----        );
----        setLocationError('Permiss√£o de localiza√ß√£o negada');
----      } else {
----        setLocationError(null);
----      }
----
----      return permission;
----    } catch (error) {
----      console.error('Erro ao solicitar permiss√µes de localiza√ß√£o:', error);
----      setLocationError('Erro ao solicitar permiss√µes');
----      return false;
----    } finally {
----      setIsLoading(false);
----    }
----  };
----
----  // Obter localiza√ß√£o atual
----  const getCurrentLocation = async (): Promise<LocationData | null> => {
----    try {
----      if (!hasPermission) {
----        const granted = await requestPermissions();
----        if (!granted) return null;
----      }
----
----      setIsLoading(true);
----      setLocationError(null);
----
----      const locationResult = await Location.getCurrentPositionAsync({
----        accuracy: Location.Accuracy.Balanced,
----      });
----
----      const locationData: LocationData = {
----        latitude: locationResult.coords.latitude,
----        longitude: locationResult.coords.longitude,
----        accuracy: locationResult.coords.accuracy,
----        timestamp: locationResult.timestamp,
----      };
----
----      setLocation(locationData);
----      return locationData;
----
----    } catch (error: any) {
----      console.error('Erro ao obter localiza√ß√£o:', error);
----      setLocationError('N√£o foi poss√≠vel obter sua localiza√ß√£o');
----      return null;
----    } finally {
----      setIsLoading(false);
----    }
----  };
----
----  // Efeitos
----  useEffect(() => {
----    Location.getForegroundPermissionsAsync().then(({ status }) => {
----      setHasPermission(status === 'granted');
----    });
----  }, []);
----
----  return (
----    <LocationContext.Provider
----      value={{
----        location,
----        isLoading,
----        hasPermission,
----        requestPermissions,
----        getCurrentLocation,
----        watchLocation,
----        setWatchLocation,
----        locationError,
----      }}
----    >
----      {children}
----    </LocationContext.Provider>
----  );
----}
----
----export function calculateDistance(
----  lat1: number,
----  lon1: number,
----  lat2: number,
----  lon2: number
----): number {
----  const R = 6371;
----  const dLat = toRadians(lat2 - lat1);
----  const dLon = toRadians(lon2 - lon1);
----  const a =
----    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
----    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
----    Math.sin(dLon / 2) * Math.sin(dLon / 2);
----  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
----  return R * c;
----}
--- 
----function toRadians(degrees: number): number {
----  return degrees * (Math.PI / 180);
----}
---diff --git a/model.patch b/model.patch
---index 09bab19..e69de29 100644
------ a/model.patch
---+++ b/model.patch
---@@ -1,156 +0,0 @@
----diff --git a/frontend/app/index.tsx b/frontend/app/index.tsx
----index 469b15f..075f127 100644
------- a/frontend/app/index.tsx
----+++ b/frontend/app/index.tsx
----@@ -1,127 +1,41 @@
-----import React, { useEffect, useRef, useState } from 'react';
-----import { View, Text, StyleSheet, Animated, Easing } from 'react-native';
-----import { Ionicons } from '@expo/vector-icons';
-----import { useAuth } from '../contexts/AuthContext';
-----import AuthScreen from './auth/index';
-----import { useRouter } from 'expo-router';
----+import React from 'react';
----+import { View, Text, StyleSheet } from 'react-native';
---- 
---- export default function Index() {
-----  const { user, isLoading, isAuthenticated } = useAuth();
-----  const [showSplash, setShowSplash] = useState(true);
-----  const router = useRouter();
-----  
-----  console.log('üîç [INDEX] Estado atual:', { 
-----    isLoading, 
-----    isAuthenticated, 
-----    hasUser: !!user, 
-----    userType: user?.user_type 
-----  });
-----
-----  const scaleAnim = useRef(new Animated.Value(0)).current;
-----  const fadeAnim = useRef(new Animated.Value(0)).current;
-----
-----  // TODOS OS HOOKS DEVEM ESTAR NO TOPO - ANTES DE QUALQUER RETURN
-----  useEffect(() => {
-----    // Se n√£o est√° carregando e j√° temos dados de auth, esconder splash
-----    if (!isLoading) {
-----      const timer = setTimeout(() => {
-----        setShowSplash(false);
-----      }, 2000); // 2 segundos de splash
-----      
-----      return () => clearTimeout(timer);
-----    }
-----  }, [isLoading]);
-----
-----  useEffect(() => {
-----    if (showSplash) {
-----      Animated.parallel([
-----        Animated.timing(scaleAnim, {
-----          toValue: 1,
-----          duration: 800,
-----          easing: Easing.elastic(1.2),
-----          useNativeDriver: true,
-----        }),
-----        Animated.timing(fadeAnim, {
-----          toValue: 1,
-----          duration: 600,
-----          useNativeDriver: true,
-----        }),
-----      ]).start();
-----    }
-----  }, [fadeAnim, scaleAnim, showSplash]);
-----
-----  // Hook para navega√ß√£o - DEVE ESTAR NO TOPO
-----  useEffect(() => {
-----    if (isAuthenticated && user && !showSplash && !isLoading) {
-----      console.log('‚û°Ô∏è [INDEX] Redirecionando para UberStyleApp');
-----      console.log('üè† [INDEX] Navegando para telas de home');
-----      router.replace('/(tabs)');
-----    }
-----  }, [isAuthenticated, user, showSplash, isLoading, router]);
-----
-----  const SplashScreen = () => {
-----    return (
-----      <View style={styles.splashContainer}>
-----        <Animated.View
-----          style={[
-----            styles.logoContainer,
-----            {
-----              transform: [{ scale: scaleAnim }],
-----            },
-----          ]}
-----        >
-----          <Ionicons name="construct" size={80} color="#007AFF" />
-----        </Animated.View>
-----        
-----        <Animated.View style={[styles.textContainer, { opacity: fadeAnim }]}>
-----          <Text style={styles.appName}>Servi√ßoApp</Text>
-----          <Text style={styles.tagline}>üîß Conectando voc√™ aos melhores profissionais</Text>
-----        </Animated.View>
-----      </View>
-----    );
-----  };
-----
-----  // Mostrar splash screen enquanto est√° carregando ou durante anima√ß√£o
-----  if (isLoading || showSplash) {
-----    console.log('üîÑ [INDEX] Mostrando splash screen');
-----    return <SplashScreen />;
-----  }
-----
-----  if (!isAuthenticated || !user) {
-----    console.log('‚ùå [INDEX] Usu√°rio n√£o autenticado, mostrando AuthScreen');
-----    return <AuthScreen />;
-----  }
-----
-----  console.log('‚úÖ [INDEX] Usu√°rio autenticado:', user.name, 'Tipo:', user.user_type);
-----
-----  // Show loading while navigating
-----  return <SplashScreen />;
----+  return (
----+    <View style={styles.container}>
----+      <Text style={styles.title}>Servi√ßoApp</Text>
----+      <Text style={styles.subtitle}>Conectando voc√™ aos melhores profissionais</Text>
----+      <Text style={styles.status}>Frontend funcionando!</Text>
----+    </View>
----+  );
---- }
---- 
---- const styles = StyleSheet.create({
-----  splashContainer: {
----+  container: {
----     flex: 1,
----     backgroundColor: '#ffffff',
----     justifyContent: 'center',
----     alignItems: 'center',
----+    padding: 20,
----   },
-----  logoContainer: {
-----    marginBottom: 30,
-----    alignItems: 'center',
-----  },
-----  textContainer: {
-----    alignItems: 'center',
-----  },
-----  appName: {
----+  title: {
----     fontSize: 32,
----     fontWeight: 'bold',
----     color: '#007AFF',
-----    marginBottom: 8,
----+    marginBottom: 16,
----+    textAlign: 'center',
----   },
-----  tagline: {
-----    fontSize: 16,
----+  subtitle: {
----+    fontSize: 18,
----     color: '#666',
----     textAlign: 'center',
-----    paddingHorizontal: 20,
----+    marginBottom: 24,
----+  },
----+  status: {
----+    fontSize: 16,
----+    color: '#28a745',
----+    fontWeight: '600',
----+    textAlign: 'center',
----   },
---- });
----\ No newline at end of file
