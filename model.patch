diff --git a/frontend/app/index.tsx b/frontend/app/index.tsx
index 469b15f..075f127 100644
--- a/frontend/app/index.tsx
+++ b/frontend/app/index.tsx
@@ -1,127 +1,41 @@
-import React, { useEffect, useRef, useState } from 'react';
-import { View, Text, StyleSheet, Animated, Easing } from 'react-native';
-import { Ionicons } from '@expo/vector-icons';
-import { useAuth } from '../contexts/AuthContext';
-import AuthScreen from './auth/index';
-import { useRouter } from 'expo-router';
+import React from 'react';
+import { View, Text, StyleSheet } from 'react-native';
 
 export default function Index() {
-  const { user, isLoading, isAuthenticated } = useAuth();
-  const [showSplash, setShowSplash] = useState(true);
-  const router = useRouter();
-  
-  console.log('üîç [INDEX] Estado atual:', { 
-    isLoading, 
-    isAuthenticated, 
-    hasUser: !!user, 
-    userType: user?.user_type 
-  });
-
-  const scaleAnim = useRef(new Animated.Value(0)).current;
-  const fadeAnim = useRef(new Animated.Value(0)).current;
-
-  // TODOS OS HOOKS DEVEM ESTAR NO TOPO - ANTES DE QUALQUER RETURN
-  useEffect(() => {
-    // Se n√£o est√° carregando e j√° temos dados de auth, esconder splash
-    if (!isLoading) {
-      const timer = setTimeout(() => {
-        setShowSplash(false);
-      }, 2000); // 2 segundos de splash
-      
-      return () => clearTimeout(timer);
-    }
-  }, [isLoading]);
-
-  useEffect(() => {
-    if (showSplash) {
-      Animated.parallel([
-        Animated.timing(scaleAnim, {
-          toValue: 1,
-          duration: 800,
-          easing: Easing.elastic(1.2),
-          useNativeDriver: true,
-        }),
-        Animated.timing(fadeAnim, {
-          toValue: 1,
-          duration: 600,
-          useNativeDriver: true,
-        }),
-      ]).start();
-    }
-  }, [fadeAnim, scaleAnim, showSplash]);
-
-  // Hook para navega√ß√£o - DEVE ESTAR NO TOPO
-  useEffect(() => {
-    if (isAuthenticated && user && !showSplash && !isLoading) {
-      console.log('‚û°Ô∏è [INDEX] Redirecionando para UberStyleApp');
-      console.log('üè† [INDEX] Navegando para telas de home');
-      router.replace('/(tabs)');
-    }
-  }, [isAuthenticated, user, showSplash, isLoading, router]);
-
-  const SplashScreen = () => {
-    return (
-      <View style={styles.splashContainer}>
-        <Animated.View
-          style={[
-            styles.logoContainer,
-            {
-              transform: [{ scale: scaleAnim }],
-            },
-          ]}
-        >
-          <Ionicons name="construct" size={80} color="#007AFF" />
-        </Animated.View>
-        
-        <Animated.View style={[styles.textContainer, { opacity: fadeAnim }]}>
-          <Text style={styles.appName}>Servi√ßoApp</Text>
-          <Text style={styles.tagline}>üîß Conectando voc√™ aos melhores profissionais</Text>
-        </Animated.View>
-      </View>
-    );
-  };
-
-  // Mostrar splash screen enquanto est√° carregando ou durante anima√ß√£o
-  if (isLoading || showSplash) {
-    console.log('üîÑ [INDEX] Mostrando splash screen');
-    return <SplashScreen />;
-  }
-
-  if (!isAuthenticated || !user) {
-    console.log('‚ùå [INDEX] Usu√°rio n√£o autenticado, mostrando AuthScreen');
-    return <AuthScreen />;
-  }
-
-  console.log('‚úÖ [INDEX] Usu√°rio autenticado:', user.name, 'Tipo:', user.user_type);
-
-  // Show loading while navigating
-  return <SplashScreen />;
+  return (
+    <View style={styles.container}>
+      <Text style={styles.title}>Servi√ßoApp</Text>
+      <Text style={styles.subtitle}>Conectando voc√™ aos melhores profissionais</Text>
+      <Text style={styles.status}>Frontend funcionando!</Text>
+    </View>
+  );
 }
 
 const styles = StyleSheet.create({
-  splashContainer: {
+  container: {
     flex: 1,
     backgroundColor: '#ffffff',
     justifyContent: 'center',
     alignItems: 'center',
+    padding: 20,
   },
-  logoContainer: {
-    marginBottom: 30,
-    alignItems: 'center',
-  },
-  textContainer: {
-    alignItems: 'center',
-  },
-  appName: {
+  title: {
     fontSize: 32,
     fontWeight: 'bold',
     color: '#007AFF',
-    marginBottom: 8,
+    marginBottom: 16,
+    textAlign: 'center',
   },
-  tagline: {
-    fontSize: 16,
+  subtitle: {
+    fontSize: 18,
     color: '#666',
     textAlign: 'center',
-    paddingHorizontal: 20,
+    marginBottom: 24,
+  },
+  status: {
+    fontSize: 16,
+    color: '#28a745',
+    fontWeight: '600',
+    textAlign: 'center',
   },
 });
\ No newline at end of file
