diff --git a/frontend/components/map/UberStyleMap.tsx b/frontend/components/map/UberStyleMap.tsx
index 148a646..4b2507b 100644
--- a/frontend/components/map/UberStyleMap.tsx
+++ b/frontend/components/map/UberStyleMap.tsx
@@ -1,14 +1,17 @@
 import React, { useEffect, useState, useRef } from 'react';
 import { View, Text, StyleSheet, Animated, Platform } from 'react-native';
 
-// Importa√ß√£o condicional para evitar erro na web
+// Importa√ß√£o condicional corrigida
 let MapView: any, Marker: any, Polyline: any, PROVIDER_GOOGLE: any;
 if (Platform.OS !== 'web') {
-  const MapComponents = require('react-native-maps');
-  MapView = MapComponents.default;
-  Marker = MapComponents.Marker;
-  Polyline = MapComponents.Polyline;
-  PROVIDER_GOOGLE = MapComponents.PROVIDER_GOOGLE;
+  try {
+    MapView = require('react-native-maps').default;
+    Marker = require('react-native-maps').Marker;
+    Polyline = require('react-native-maps').Polyline;
+    PROVIDER_GOOGLE = require('react-native-maps').PROVIDER_GOOGLE;
+  } catch (error) {
+    console.warn('react-native-maps n√£o dispon√≠vel');
+  }
 }
 import { Ionicons } from '@expo/vector-icons';
 import { distanceService, LocationCoords, DistanceInfo } from '../../services/distanceService';
diff --git a/model.patch b/model.patch
index 4f00330..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,1725 +0,0 @@
-diff --git a/model.patch b/model.patch
-index 4d64bb7..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,1720 +0,0 @@
--diff --git a/frontend/components/modern/MapView.tsx b/frontend/components/modern/MapView.tsx
--index 0f7f011..8be592c 100644
----- a/frontend/components/modern/MapView.tsx
--+++ b/frontend/components/modern/MapView.tsx
--@@ -1,334 +1,53 @@
---import React, { useRef, useEffect, useState } from 'react';
---import {
---  View,
---  StyleSheet,
---  Animated,
---  Dimensions,
---  TouchableOpacity,
---  Text,
---} from 'react-native';
---import MapView, { Marker, Region } from 'react-native-maps';
---import { Ionicons } from '@expo/vector-icons';
---import * as Location from 'expo-location';
---
---const { width, height } = Dimensions.get('window');
---
---interface MapViewProps {
---  userLocation?: {
---    latitude: number;
---    longitude: number;
---    address?: string;
---  };
---  providers?: Array<{
---    id: string;
---    name: string;
---    latitude: number;
---    longitude: number;
---    category: string;
---    rating: number;
---  }>;
---  onLocationPress?: () => void;
---  showProviders?: boolean;
---  centerOnUser?: boolean;
---}
---
---export const MapView: React.FC<MapViewProps> = ({
---  userLocation,
---  providers = [],
---  onLocationPress,
---  showProviders = false,
---  centerOnUser = true,
---}) => {
---  const mapAnimation = useRef(new Animated.Value(0)).current;
---  const pulseAnimation = useRef(new Animated.Value(1)).current;
---  const [mapReady, setMapReady] = useState(false);
---
---  useEffect(() => {
---    // Anima√ß√£o de entrada do mapa
---    Animated.timing(mapAnimation, {
---      toValue: 1,
---      duration: 800,
---      useNativeDriver: true,
---    }).start(() => setMapReady(true));
---
---    // Anima√ß√£o de pulso para localiza√ß√£o do usu√°rio
---    const pulseLoop = Animated.loop(
---      Animated.sequence([
---        Animated.timing(pulseAnimation, {
---          toValue: 1.3,
---          duration: 1000,
---          useNativeDriver: true,
---        }),
---        Animated.timing(pulseAnimation, {
---          toValue: 1,
---          duration: 1000,
---          useNativeDriver: true,
---        }),
---      ])
---    );
---    pulseLoop.start();
---
---    return () => pulseLoop.stop();
---  }, []);
---
---  const renderUserLocation = () => {
---    if (!userLocation) return null;
--+import React from 'react';
--+import { View, Text, StyleSheet, Platform } from 'react-native';
-- 
--+// Componente placeholder para substituir MapView
--+export default function MapView(props: any) {
--+  if (Platform.OS === 'web') {
--     return (
---      <View style={styles.userLocationContainer}>
---        <Animated.View
---          style={[
---            styles.userLocationPulse,
---            {
---              transform: [{ scale: pulseAnimation }],
---            },
---          ]}
---        />
---        <View style={styles.userLocationDot} />
--+      <View style={[styles.webMapContainer, props.style]}>
--+        <View style={styles.webMapPlaceholder}>
--+          <Text style={styles.webMapIcon}>üó∫Ô∏è</Text>
--+          <Text style={styles.webMapText}>
--+            Mapa dispon√≠vel apenas no app mobile
--+          </Text>
--+        </View>
--       </View>
--     );
---  };
---
---  const renderProviders = () => {
---    if (!showProviders || !providers.length) return null;
---
---    return providers.map((provider, index) => (
---      <Animated.View
---        key={provider.id}
---        style={[
---          styles.providerMarker,
---          {
---            opacity: mapAnimation,
---            transform: [
---              {
---                translateY: mapAnimation.interpolate({
---                  inputRange: [0, 1],
---                  outputRange: [50, 0],
---                }),
---              },
---            ],
---          },
---        ]}
---      >
---        <View style={styles.providerPin}>
---          <Text style={styles.providerEmoji}>üîß</Text>
---        </View>
---        <View style={styles.providerInfo}>
---          <Text style={styles.providerName}>{provider.name}</Text>
---          <View style={styles.providerRating}>
---            <Ionicons name="star" size={12} color="#FFD700" />
---            <Text style={styles.ratingText}>{provider.rating}</Text>
---          </View>
---        </View>
---      </Animated.View>
---    ));
---  };
--+  }
-- 
--+  // No mobile, usar um placeholder simples por enquanto
--   return (
---    <View style={styles.container}>
---      {/* Mapa simulado com gradiente */}
---      <Animated.View
---        style={[
---          styles.mapContainer,
---          {
---            opacity: mapAnimation,
---            transform: [
---              {
---                scale: mapAnimation.interpolate({
---                  inputRange: [0, 1],
---                  outputRange: [0.8, 1],
---                }),
---              },
---            ],
---          },
---        ]}
---      >
---        {/* Grid de ruas simulado */}
---        <View style={styles.streetGrid}>
---          {Array.from({ length: 8 }).map((_, i) => (
---            <View key={`h-${i}`} style={[styles.street, styles.horizontalStreet, { top: i * 60 }]} />
---          ))}
---          {Array.from({ length: 6 }).map((_, i) => (
---            <View key={`v-${i}`} style={[styles.street, styles.verticalStreet, { left: i * 60 }]} />
---          ))}
---        </View>
---
---        {/* Localiza√ß√£o do usu√°rio */}
---        {renderUserLocation()}
---
---        {/* Prestadores */}
---        {renderProviders()}
---      </Animated.View>
---
---      {/* Controles do mapa */}
---      <View style={styles.mapControls}>
---        <TouchableOpacity style={styles.controlButton} onPress={onLocationPress}>
---          <Ionicons name="locate" size={24} color="#007AFF" />
---        </TouchableOpacity>
---        <TouchableOpacity style={styles.controlButton}>
---          <Ionicons name="layers" size={24} color="#007AFF" />
---        </TouchableOpacity>
--+    <View style={[styles.webMapContainer, props.style]}>
--+      <View style={styles.webMapPlaceholder}>
--+        <Text style={styles.webMapIcon}>üó∫Ô∏è</Text>
--+        <Text style={styles.webMapText}>
--+          Mapa em desenvolvimento
--+        </Text>
--       </View>
---
---      {/* Indicador de carregamento */}
---      {!mapReady && (
---        <View style={styles.loadingOverlay}>
---          <Animated.View
---            style={[
---              styles.loadingSpinner,
---              {
---                transform: [
---                  {
---                    rotate: mapAnimation.interpolate({
---                      inputRange: [0, 1],
---                      outputRange: ['0deg', '360deg'],
---                    }),
---                  },
---                ],
---              },
---            ]}
---          >
---            <Ionicons name="location" size={32} color="#007AFF" />
---          </Animated.View>
---        </View>
---      )}
--     </View>
--   );
---};
--+}
-- 
-- const styles = StyleSheet.create({
---  container: {
--+  webMapContainer: {
--     flex: 1,
---    backgroundColor: '#F0F0F0',
---  },
---  mapContainer: {
---    flex: 1,
---    backgroundColor: '#E8F4FD',
---    position: 'relative',
---    overflow: 'hidden',
---  },
---  streetGrid: {
---    position: 'absolute',
---    top: 0,
---    left: 0,
---    right: 0,
---    bottom: 0,
---  },
---  street: {
---    position: 'absolute',
---    backgroundColor: '#FFFFFF',
---  },
---  horizontalStreet: {
---    height: 2,
---    width: '100%',
---  },
---  verticalStreet: {
---    width: 2,
---    height: '100%',
---  },
---  userLocationContainer: {
---    position: 'absolute',
---    top: '50%',
---    left: '50%',
---    marginTop: -20,
---    marginLeft: -20,
---    alignItems: 'center',
--+    backgroundColor: '#f0f0f0',
--     justifyContent: 'center',
---  },
---  userLocationPulse: {
---    position: 'absolute',
---    width: 40,
---    height: 40,
---    borderRadius: 20,
---    backgroundColor: 'rgba(0, 122, 255, 0.3)',
---  },
---  userLocationDot: {
---    width: 16,
---    height: 16,
---    borderRadius: 8,
---    backgroundColor: '#007AFF',
---    borderWidth: 3,
---    borderColor: '#FFFFFF',
---    shadowColor: '#000',
---    shadowOffset: { width: 0, height: 2 },
---    shadowOpacity: 0.3,
---    shadowRadius: 4,
---    elevation: 5,
---  },
---  providerMarker: {
---    position: 'absolute',
--     alignItems: 'center',
--+    borderRadius: 12,
--   },
---  providerPin: {
---    width: 36,
---    height: 36,
---    borderRadius: 18,
---    backgroundColor: '#FFFFFF',
--+  webMapPlaceholder: {
--     alignItems: 'center',
--     justifyContent: 'center',
---    shadowColor: '#000',
---    shadowOffset: { width: 0, height: 2 },
---    shadowOpacity: 0.2,
---    shadowRadius: 4,
---    elevation: 3,
---  },
---  providerEmoji: {
---    fontSize: 18,
--   },
---  providerInfo: {
---    marginTop: 4,
---    alignItems: 'center',
---    backgroundColor: 'rgba(255, 255, 255, 0.9)',
---    paddingHorizontal: 8,
---    paddingVertical: 4,
---    borderRadius: 8,
---  },
---  providerName: {
---    fontSize: 12,
---    fontWeight: '600',
---    color: '#1C1C1E',
--+  webMapIcon: {
--+    fontSize: 48,
--+    marginBottom: 16,
--   },
---  providerRating: {
---    flexDirection: 'row',
---    alignItems: 'center',
---    marginTop: 2,
---  },
---  ratingText: {
---    fontSize: 10,
--+  webMapText: {
--+    fontSize: 16,
--     color: '#666',
---    marginLeft: 2,
---  },
---  mapControls: {
---    position: 'absolute',
---    right: 16,
---    top: 60,
---    gap: 12,
---  },
---  controlButton: {
---    width: 48,
---    height: 48,
---    borderRadius: 24,
---    backgroundColor: '#FFFFFF',
---    alignItems: 'center',
---    justifyContent: 'center',
---    shadowColor: '#000',
---    shadowOffset: { width: 0, height: 2 },
---    shadowOpacity: 0.1,
---    shadowRadius: 4,
---    elevation: 3,
---  },
---  loadingOverlay: {
---    position: 'absolute',
---    top: 0,
---    left: 0,
---    right: 0,
---    bottom: 0,
---    backgroundColor: 'rgba(255, 255, 255, 0.8)',
---    alignItems: 'center',
---    justifyContent: 'center',
---  },
---  loadingSpinner: {
---    alignItems: 'center',
---    justifyContent: 'center',
--+    textAlign: 'center',
--   },
-- });
--diff --git a/model.patch b/model.patch
--index 1d10192..5893dec 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,1345 +0,0 @@
---diff --git a/model.patch b/model.patch
---index c4410b3..e69de29 100644
------ a/model.patch
---+++ b/model.patch
---@@ -1,1340 +0,0 @@
----diff --git a/frontend/components/CustomMapView.tsx b/frontend/components/CustomMapView.tsx
----index 540768e..f9b03d2 100644
------- a/frontend/components/CustomMapView.tsx
----+++ b/frontend/components/CustomMapView.tsx
----@@ -1,7 +1,14 @@
---- 
---- import React, { useEffect, useRef, useState } from 'react';
---- import { Platform, View, Text, StyleSheet } from 'react-native';
-----import MapView, { Marker } from 'react-native-maps';
----+
----+// Importa√ß√£o condicional para evitar erro na web
----+let MapView: any, Marker: any;
----+if (Platform.OS !== 'web') {
----+  const MapComponents = require('react-native-maps');
----+  MapView = MapComponents.default;
----+  Marker = MapComponents.Marker;
----+}
---- import MapViewDirections from 'react-native-maps-directions';
---- import Constants from 'expo-constants';
---- 
----diff --git a/model.patch b/model.patch
----index 6688e49..e69de29 100644
------- a/model.patch
----+++ b/model.patch
----@@ -1,1315 +0,0 @@
-----diff --git a/frontend/components/map/UberStyleMap.tsx b/frontend/components/map/UberStyleMap.tsx
-----index a9d4043..148a646 100644
-------- a/frontend/components/map/UberStyleMap.tsx
-----+++ b/frontend/components/map/UberStyleMap.tsx
-----@@ -1,6 +1,15 @@
----- import React, { useEffect, useState, useRef } from 'react';
------import { View, Text, StyleSheet, Animated } from 'react-native';
------import MapView, { Marker, Polyline, PROVIDER_GOOGLE } from 'react-native-maps';
-----+import { View, Text, StyleSheet, Animated, Platform } from 'react-native';
-----+
-----+// Importa√ß√£o condicional para evitar erro na web
-----+let MapView: any, Marker: any, Polyline: any, PROVIDER_GOOGLE: any;
-----+if (Platform.OS !== 'web') {
-----+  const MapComponents = require('react-native-maps');
-----+  MapView = MapComponents.default;
-----+  Marker = MapComponents.Marker;
-----+  Polyline = MapComponents.Polyline;
-----+  PROVIDER_GOOGLE = MapComponents.PROVIDER_GOOGLE;
-----+}
----- import { Ionicons } from '@expo/vector-icons';
----- import { distanceService, LocationCoords, DistanceInfo } from '../../services/distanceService';
----- 
-----@@ -23,7 +32,7 @@ export const UberStyleMap: React.FC<UberStyleMapProps> = ({
-----   style,
-----   mapType = 'standard',
----- }) => {
------  const mapRef = useRef<MapView>(null);
-----+  const mapRef = useRef<any>(null);
-----   const [distanceInfo, setDistanceInfo] = useState<DistanceInfo | null>(null);
-----   const [routeCoordinates, setRouteCoordinates] = useState<LocationCoords[]>([]);
-----   const fadeAnim = useRef(new Animated.Value(0)).current;
-----@@ -41,7 +50,9 @@ export const UberStyleMap: React.FC<UberStyleMapProps> = ({
-----       const region = distanceService.calculateMapRegion(clientLocation, providerLocation, 0.02);
-----       
-----       setTimeout(() => {
------        mapRef.current?.animateToRegion(region, 1000);
-----+        if (Platform.OS !== 'web' && mapRef.current) {
-----+          mapRef.current.animateToRegion(region, 1000);
-----+        }
-----       }, 500);
----- 
-----       // Animar entrada das informa√ß√µes
-----@@ -135,6 +146,34 @@ export const UberStyleMap: React.FC<UberStyleMapProps> = ({
-----     );
-----   };
----- 
-----+  // Renderizar vers√£o web (placeholder)
-----+  if (Platform.OS === 'web') {
-----+    return (
-----+      <View style={[styles.container, style]}>
-----+        <View style={styles.webMapContainer}>
-----+          <View style={styles.webMapPlaceholder}>
-----+            <View style={styles.webMapIcon}>üó∫Ô∏è</View>
-----+            <Text style={styles.webMapText}>
-----+              Mapa dispon√≠vel apenas no app mobile
-----+            </Text>
-----+            {showDistanceInfo && distanceInfo && (
-----+              <View style={styles.webDistanceInfo}>
-----+                <Text style={styles.webDistanceText}>
-----+                  Dist√¢ncia: {distanceInfo.formattedDistance}
-----+                </Text>
-----+                <Text style={styles.webDistanceText}>
-----+                  Tempo: {distanceInfo.formattedDuration}
-----+                </Text>
-----+              </View>
-----+            )}
-----+          </View>
-----+        </View>
-----+        {renderDistanceInfo()}
-----+      </View>
-----+    );
-----+  }
-----+
-----+  // Renderizar vers√£o mobile com mapa real
-----   return (
-----     <View style={[styles.container, style]}>
-----       <MapView
-----@@ -171,6 +210,43 @@ const styles = StyleSheet.create({
-----   map: {
-----     flex: 1,
-----   },
-----+  webMapContainer: {
-----+    flex: 1,
-----+    backgroundColor: '#f0f0f0',
-----+    justifyContent: 'center',
-----+    alignItems: 'center',
-----+    borderRadius: 12,
-----+  },
-----+  webMapPlaceholder: {
-----+    alignItems: 'center',
-----+    justifyContent: 'center',
-----+  },
-----+  webMapIcon: {
-----+    fontSize: 48,
-----+    marginBottom: 16,
-----+  },
-----+  webMapText: {
-----+    fontSize: 16,
-----+    color: '#666',
-----+    textAlign: 'center',
-----+    marginBottom: 20,
-----+  },
-----+  webDistanceInfo: {
-----+    backgroundColor: '#fff',
-----+    borderRadius: 8,
-----+    padding: 16,
-----+    alignItems: 'center',
-----+    shadowColor: '#000',
-----+    shadowOffset: { width: 0, height: 2 },
-----+    shadowOpacity: 0.1,
-----+    shadowRadius: 4,
-----+    elevation: 3,
-----+  },
-----+  webDistanceText: {
-----+    fontSize: 14,
-----+    color: '#333',
-----+    marginBottom: 4,
-----+  },
-----   distanceCard: {
-----     position: 'absolute',
-----     top: 60,
-----diff --git a/model.patch b/model.patch
-----index 9d6eee1..e69de29 100644
-------- a/model.patch
-----+++ b/model.patch
-----@@ -1,1189 +0,0 @@
------diff --git a/frontend/app/(tabs)/_layout.tsx b/frontend/app/(tabs)/_layout.tsx
------index 5bbed19..88e2104 100644
--------- a/frontend/app/(tabs)/_layout.tsx
------+++ b/frontend/app/(tabs)/_layout.tsx
------@@ -1,7 +1,11 @@
------ import { Tabs } from 'expo-router';
------ import React from 'react';
------+import { Ionicons } from '@expo/vector-icons';
------+import { useAuth } from '../../contexts/AuthContext';
------ 
------ export default function TabLayout() {
------+  const { isProvider } = useAuth();
------+
------   return (
------     <Tabs
------       screenOptions={{
------@@ -21,9 +25,13 @@ export default function TabLayout() {
------       <Tabs.Screen
------         name="index"
------         options={{
-------          title: 'In√≠cio',
------+          title: isProvider ? 'Solicita√ß√µes' : 'In√≠cio',
------           tabBarIcon: ({ color, size }) => (
-------            <TabIcon name="üè†" color={color} />
------+            <Ionicons 
------+              name={isProvider ? 'briefcase-outline' : 'home-outline'} 
------+              size={size} 
------+              color={color} 
------+            />
------           ),
------         }}
------       />
------@@ -32,7 +40,7 @@ export default function TabLayout() {
------         options={{
------           title: 'Hist√≥rico',
------           tabBarIcon: ({ color, size }) => (
-------            <TabIcon name="üïê" color={color} />
------+            <Ionicons name="time-outline" size={size} color={color} />
------           ),
------         }}
------       />
------@@ -41,14 +49,10 @@ export default function TabLayout() {
------         options={{
------           title: 'Perfil',
------           tabBarIcon: ({ color, size }) => (
-------            <TabIcon name="üë§" color={color} />
------+            <Ionicons name="person-outline" size={size} color={color} />
------           ),
------         }}
------       />
------     </Tabs>
------   );
------ }
-------
-------function TabIcon({ name, color }: { name: string; color: string }) {
-------  return <span style={{ fontSize: 20, color }}>{name}</span>;
-------}
------\ No newline at end of file
------diff --git a/model.patch b/model.patch
------index 2e5bed0..e69de29 100644
--------- a/model.patch
------+++ b/model.patch
------@@ -1,1126 +0,0 @@
-------diff --git a/frontend/app/(tabs)/_layout.tsx b/frontend/app/(tabs)/_layout.tsx
-------index 9fca42e..5bbed19 100644
---------- a/frontend/app/(tabs)/_layout.tsx
-------+++ b/frontend/app/(tabs)/_layout.tsx
-------@@ -1,11 +1,7 @@
------- import { Tabs } from 'expo-router';
------- import React from 'react';
--------import { Ionicons } from '@expo/vector-icons';
--------import { useAuth } from '../../contexts/AuthContext';
------- 
------- export default function TabLayout() {
--------  const { isProvider } = useAuth();
--------
-------   return (
-------     <Tabs
-------       screenOptions={{
-------@@ -25,13 +21,9 @@ export default function TabLayout() {
-------       <Tabs.Screen
-------         name="index"
-------         options={{
--------          title: isProvider ? 'Solicita√ß√µes' : 'In√≠cio',
-------+          title: 'In√≠cio',
-------           tabBarIcon: ({ color, size }) => (
--------            <Ionicons 
--------              name={isProvider ? 'briefcase-outline' : 'home-outline'} 
--------              size={size} 
--------              color={color} 
--------            />
-------+            <TabIcon name="üè†" color={color} />
-------           ),
-------         }}
-------       />
-------@@ -40,7 +32,7 @@ export default function TabLayout() {
-------         options={{
-------           title: 'Hist√≥rico',
-------           tabBarIcon: ({ color, size }) => (
--------            <Ionicons name="time-outline" size={size} color={color} />
-------+            <TabIcon name="üïê" color={color} />
-------           ),
-------         }}
-------       />
-------@@ -49,10 +41,14 @@ export default function TabLayout() {
-------         options={{
-------           title: 'Perfil',
-------           tabBarIcon: ({ color, size }) => (
--------            <Ionicons name="person-outline" size={size} color={color} />
-------+            <TabIcon name="üë§" color={color} />
-------           ),
-------         }}
-------       />
-------     </Tabs>
-------   );
-------+}
-------+
-------+function TabIcon({ name, color }: { name: string; color: string }) {
-------+  return <span style={{ fontSize: 20, color }}>{name}</span>;
------- }
-------\ No newline at end of file
-------diff --git a/model.patch b/model.patch
-------index 1383dcc..e69de29 100644
---------- a/model.patch
-------+++ b/model.patch
-------@@ -1,1063 +0,0 @@
--------diff --git a/model.patch b/model.patch
--------index ed602f1..e69de29 100644
----------- a/model.patch
--------+++ b/model.patch
--------@@ -1,1058 +0,0 @@
---------diff --git a/frontend/app/(tabs)/index.tsx b/frontend/app/(tabs)/index.tsx
---------index f17c585..4ed307e 100644
------------ a/frontend/app/(tabs)/index.tsx
---------+++ b/frontend/app/(tabs)/index.tsx
---------@@ -1,195 +1,34 @@
----------import React, { useEffect, useState } from 'react';
---------+import React from 'react';
--------- import {
---------   View,
---------   Text,
---------   StyleSheet,
---------   ScrollView,
---------   TouchableOpacity,
----------  Alert,
----------  RefreshControl,
--------- } from 'react-native';
----------import { useAuth } from '../../contexts/AuthContext';
----------import { Ionicons } from '@expo/vector-icons';
----------import { API_BASE_URL } from '../../utils/config';
----------import axios from 'axios';
--------- 
----------interface ServiceCategory {
----------  id: string;
----------  name: string;
----------  icon: string;
----------  description: string;
----------}
----------
----------interface ServiceRequest {
----------  id: string;
----------  client_name: string;
----------  category: string;
----------  description: string;
----------  price: number;
----------  distance?: number;
----------  created_at: string;
----------  status: string;
----------}
----------
----------const serviceCategories: ServiceCategory[] = [
----------  { id: 'eletricista', name: 'Eletricista', icon: 'flash', description: 'Servi√ßos el√©tricos' },
----------  { id: 'encanador', name: 'Encanador', icon: 'water', description: 'Servi√ßos hidr√°ulicos' },
----------  { id: 'pintor', name: 'Pintor', icon: 'brush', description: 'Pintura e decora√ß√£o' },
----------  { id: 'marceneiro', name: 'Marceneiro', icon: 'hammer', description: 'M√≥veis e madeira' },
----------  { id: 'jardineiro', name: 'Jardineiro', icon: 'leaf', description: 'Jardim e paisagismo' },
----------  { id: 'faxineiro', name: 'Faxineiro', icon: 'sparkles', description: 'Limpeza geral' },
---------+const serviceCategories = [
---------+  { id: 'eletricista', name: 'Eletricista', icon: '‚ö°', description: 'Servi√ßos el√©tricos' },
---------+  { id: 'encanador', name: 'Encanador', icon: 'üîß', description: 'Servi√ßos hidr√°ulicos' },
---------+  { id: 'pintor', name: 'Pintor', icon: 'üé®', description: 'Pintura e decora√ß√£o' },
---------+  { id: 'marceneiro', name: 'Marceneiro', icon: 'üî®', description: 'M√≥veis e madeira' },
---------+  { id: 'jardineiro', name: 'Jardineiro', icon: 'üå±', description: 'Jardim e paisagismo' },
---------+  { id: 'faxineiro', name: 'Faxineiro', icon: '‚ú®', description: 'Limpeza geral' },
--------- ];
--------- 
--------- export default function HomeScreen() {
----------  const { user, isProvider } = useAuth();
----------  const [requests, setRequests] = useState<ServiceRequest[]>([]);
----------  const [isLoading, setIsLoading] = useState(false);
----------  const [refreshing, setRefreshing] = useState(false);
----------
----------  useEffect(() => {
----------    if (isProvider) {
----------      loadAvailableRequests();
----------    }
----------  }, [isProvider]);
----------
----------  const loadAvailableRequests = async () => {
----------    try {
----------      setIsLoading(true);
----------      const response = await axios.get(`${API_BASE_URL}/requests`);
----------      
----------      // Filtrar apenas solicita√ß√µes pendentes
----------      const availableRequests = response.data.filter((req: any) => 
----------        req.status === 'pending' || req.status === 'waiting'
----------      );
----------      
----------      setRequests(availableRequests);
----------    } catch (error) {
----------      console.error('Erro ao carregar solicita√ß√µes:', error);
----------    } finally {
----------      setIsLoading(false);
----------    }
----------  };
----------
----------  const onRefresh = async () => {
----------    setRefreshing(true);
----------    if (isProvider) {
----------      await loadAvailableRequests();
----------    }
----------    setRefreshing(false);
----------  };
----------
---------   const handleRequestService = (categoryId: string) => {
----------    Alert.alert(
----------      'Solicitar Servi√ßo',
----------      `Deseja solicitar um servi√ßo de ${serviceCategories.find(c => c.id === categoryId)?.name}?`,
----------      [
----------        { text: 'Cancelar', style: 'cancel' },
----------        { 
----------          text: 'Solicitar', 
----------          onPress: () => {
----------            // TODO: Implementar tela de cria√ß√£o de solicita√ß√£o
----------            Alert.alert('Em breve', 'Funcionalidade em desenvolvimento');
----------          }
----------        }
----------      ]
----------    );
----------  };
----------
----------  const handleAcceptRequest = async (requestId: string) => {
----------    try {
----------      Alert.alert(
----------        'Aceitar Solicita√ß√£o',
----------        'Deseja aceitar esta solicita√ß√£o?',
----------        [
----------          { text: 'Cancelar', style: 'cancel' },
----------          { 
----------            text: 'Aceitar',
----------            onPress: async () => {
----------              try {
----------                await axios.post(`${API_BASE_URL}/requests/${requestId}/accept`);
----------                Alert.alert('Sucesso', 'Solicita√ß√£o aceita com sucesso!');
----------                loadAvailableRequests();
----------              } catch (error) {
----------                Alert.alert('Erro', 'N√£o foi poss√≠vel aceitar a solicita√ß√£o');
----------              }
----------            }
----------          }
----------        ]
----------      );
----------    } catch (error) {
----------      console.error('Erro ao aceitar solicita√ß√£o:', error);
----------    }
---------+    alert(`Solicitar servi√ßo: ${categoryId}`);
---------   };
--------- 
----------  if (isProvider) {
----------    return (
----------      <ScrollView 
----------        style={styles.container}
----------        refreshControl={
----------          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
----------        }
----------      >
----------        <View style={styles.header}>
----------          <Text style={styles.welcomeText}>Ol√°, {user?.name}!</Text>
----------          <Text style={styles.subtitleText}>Solicita√ß√µes dispon√≠veis</Text>
----------        </View>
----------
----------        <View style={styles.content}>
----------          {requests.length === 0 ? (
----------            <View style={styles.emptyState}>
----------              <Ionicons name="briefcase-outline" size={64} color="#ccc" />
----------              <Text style={styles.emptyStateText}>
----------                Nenhuma solicita√ß√£o dispon√≠vel no momento
----------              </Text>
----------              <Text style={styles.emptyStateSubtext}>
----------                Novas solicita√ß√µes aparecer√£o aqui
----------              </Text>
----------            </View>
----------          ) : (
----------            requests.map((request) => (
----------              <View key={request.id} style={styles.requestCard}>
----------                <View style={styles.requestHeader}>
----------                  <Text style={styles.requestCategory}>{request.category}</Text>
----------                  <Text style={styles.requestPrice}>R$ {request.price}</Text>
----------                </View>
----------                
----------                <Text style={styles.requestClient}>Cliente: {request.client_name}</Text>
----------                <Text style={styles.requestDescription}>{request.description}</Text>
----------                
----------                {request.distance && (
----------                  <Text style={styles.requestDistance}>
----------                    üìç {request.distance}km de dist√¢ncia
----------                  </Text>
----------                )}
----------                
----------                <TouchableOpacity
----------                  style={styles.acceptButton}
----------                  onPress={() => handleAcceptRequest(request.id)}
----------                >
----------                  <Text style={styles.acceptButtonText}>Aceitar Solicita√ß√£o</Text>
----------                </TouchableOpacity>
----------              </View>
----------            ))
----------          )}
----------        </View>
----------      </ScrollView>
----------    );
----------  }
----------
----------  // Interface para clientes
---------   return (
----------    <ScrollView 
----------      style={styles.container}
----------      refreshControl={
----------        <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
----------      }
----------    >
---------+    <View style={styles.container}>
---------       <View style={styles.header}>
----------        <Text style={styles.welcomeText}>Ol√°, {user?.name}!</Text>
---------+        <Text style={styles.welcomeText}>Ol√°! üëã</Text>
---------         <Text style={styles.subtitleText}>Que servi√ßo voc√™ precisa?</Text>
---------       </View>
--------- 
----------      <View style={styles.content}>
---------+      <ScrollView style={styles.content}>
---------         <Text style={styles.sectionTitle}>Categorias de Servi√ßos</Text>
---------         
---------         <View style={styles.categoriesGrid}>
---------@@ -200,15 +39,15 @@ export default function HomeScreen() {
---------               onPress={() => handleRequestService(category.id)}
---------             >
---------               <View style={styles.categoryIcon}>
----------                <Ionicons name={category.icon as any} size={32} color="#667eea" />
---------+                <Text style={styles.iconText}>{category.icon}</Text>
---------               </View>
---------               <Text style={styles.categoryName}>{category.name}</Text>
---------               <Text style={styles.categoryDescription}>{category.description}</Text>
---------             </TouchableOpacity>
---------           ))}
---------         </View>
----------      </View>
----------    </ScrollView>
---------+      </ScrollView>
---------+    </View>
---------   );
--------- }
--------- 
---------@@ -235,6 +74,7 @@ const styles = StyleSheet.create({
---------     opacity: 0.9,
---------   },
---------   content: {
---------+    flex: 1,
---------     padding: 20,
---------   },
---------   sectionTitle: {
---------@@ -270,6 +110,9 @@ const styles = StyleSheet.create({
---------     alignItems: 'center',
---------     marginBottom: 12,
---------   },
---------+  iconText: {
---------+    fontSize: 24,
---------+  },
---------   categoryName: {
---------     fontSize: 16,
---------     fontWeight: '700',
---------@@ -282,76 +125,4 @@ const styles = StyleSheet.create({
---------     color: '#666',
---------     textAlign: 'center',
---------   },
----------  requestCard: {
----------    backgroundColor: '#ffffff',
----------    borderRadius: 16,
----------    padding: 20,
----------    marginBottom: 16,
----------    elevation: 2,
----------    shadowColor: '#000',
----------    shadowOffset: { width: 0, height: 2 },
----------    shadowOpacity: 0.1,
----------    shadowRadius: 4,
----------  },
----------  requestHeader: {
----------    flexDirection: 'row',
----------    justifyContent: 'space-between',
----------    alignItems: 'center',
----------    marginBottom: 12,
----------  },
----------  requestCategory: {
----------    fontSize: 18,
----------    fontWeight: '700',
----------    color: '#667eea',
----------  },
----------  requestPrice: {
----------    fontSize: 18,
----------    fontWeight: '700',
----------    color: '#28a745',
----------  },
----------  requestClient: {
----------    fontSize: 16,
----------    fontWeight: '600',
----------    color: '#333',
----------    marginBottom: 8,
----------  },
----------  requestDescription: {
----------    fontSize: 14,
----------    color: '#666',
----------    marginBottom: 12,
----------    lineHeight: 20,
----------  },
----------  requestDistance: {
----------    fontSize: 14,
----------    color: '#666',
----------    marginBottom: 16,
----------  },
----------  acceptButton: {
----------    backgroundColor: '#667eea',
----------    paddingVertical: 12,
----------    borderRadius: 8,
----------    alignItems: 'center',
----------  },
----------  acceptButtonText: {
----------    fontSize: 16,
----------    fontWeight: '700',
----------    color: '#ffffff',
----------  },
----------  emptyState: {
----------    alignItems: 'center',
----------    paddingVertical: 60,
----------  },
----------  emptyStateText: {
----------    fontSize: 18,
----------    fontWeight: '600',
----------    color: '#666',
----------    marginTop: 16,
----------    textAlign: 'center',
----------  },
----------  emptyStateSubtext: {
----------    fontSize: 14,
----------    color: '#999',
----------    marginTop: 8,
----------    textAlign: 'center',
----------  },
--------- });
---------\ No newline at end of file
---------diff --git a/model.patch b/model.patch
---------index 359f034..99807a6 100644
------------ a/model.patch
---------+++ b/model.patch
---------@@ -1,726 +0,0 @@
----------diff --git a/frontend/components/ui/AppBar.tsx b/frontend/components/ui/AppBar.tsx
----------index c4280c6..740b1f3 100644
------------- a/frontend/components/ui/AppBar.tsx
----------+++ b/frontend/components/ui/AppBar.tsx
----------@@ -6,8 +6,6 @@ import {
----------   ViewStyle,
----------   TextStyle,
----------   TouchableOpacity,
-----------  StatusBar,
-----------  Platform,
---------- } from 'react-native';
---------- import { useSafeAreaInsets } from 'react-native-safe-area-context';
---------- 
----------@@ -93,35 +91,11 @@ export const AppBar: React.FC<AppBarProps> = ({
---------- 
----------     return baseStyle;
----------   };
-----------        break;
-----------    }
-----------
-----------    return baseStyle;
-----------  };
-----------
-----------  const getSubtitleStyle = (): TextStyle => {
-----------    return {
-----------      ...theme.typography.bodyMedium,
-----------      color: theme.colors.onSurfaceVariant,
-----------      marginTop: theme.spacing.xs,
-----------    };
-----------  };
-----------
-----------  const getIconStyle = (): ViewStyle => {
-----------    return {
-----------      padding: theme.spacing.sm,
-----------      borderRadius: theme.borderRadius.md,
-----------    };
-----------  };
---------- 
-----------  const renderLeftContent = () => {
----------+  const renderLeftAction = () => {
----------     if (showBackButton) {
----------       return (
-----------        <TouchableOpacity
-----------          style={[getIconStyle(), iconStyle]}
-----------          onPress={onBackPress}
-----------          activeOpacity={0.7}
-----------        >
----------+        <TouchableOpacity onPress={onBackPress} style={[styles.iconButton, iconStyle]}>
----------           <Text style={styles.backIcon}>‚Üê</Text>
----------         </TouchableOpacity>
----------       );
----------@@ -129,11 +103,7 @@ export const AppBar: React.FC<AppBarProps> = ({
---------- 
----------     if (leftIcon) {
----------       return (
-----------        <TouchableOpacity
-----------          style={[getIconStyle(), iconStyle]}
-----------          onPress={onLeftIconPress}
-----------          activeOpacity={0.7}
-----------        >
----------+        <TouchableOpacity onPress={onLeftIconPress} style={[styles.iconButton, iconStyle]}>
----------           {leftIcon}
----------         </TouchableOpacity>
----------       );
----------@@ -142,14 +112,10 @@ export const AppBar: React.FC<AppBarProps> = ({
----------     return <View style={styles.placeholder} />;
----------   };
---------- 
-----------  const renderRightContent = () => {
----------+  const renderRightAction = () => {
----------     if (rightIcon) {
----------       return (
-----------        <TouchableOpacity
-----------          style={[getIconStyle(), iconStyle]}
-----------          onPress={onRightIconPress}
-----------          activeOpacity={0.7}
-----------        >
----------+        <TouchableOpacity onPress={onRightIconPress} style={[styles.iconButton, iconStyle]}>
----------           {rightIcon}
----------         </TouchableOpacity>
----------       );
----------@@ -158,38 +124,27 @@ export const AppBar: React.FC<AppBarProps> = ({
----------     return <View style={styles.placeholder} />;
----------   };
---------- 
-----------  const renderTitle = () => {
-----------    if (!title) return null;
-----------
-----------    return (
-----------      <View style={styles.titleContainer}>
-----------        <Text style={[getTitleStyle(), titleStyle]}>
-----------          {title}
-----------        </Text>
-----------        {subtitle && (
-----------          <Text style={[getSubtitleStyle(), subtitleStyle]}>
-----------            {subtitle}
-----------          </Text>
-----------        )}
-----------      </View>
-----------    );
-----------  };
-----------
----------   return (
-----------    <>
-----------      <StatusBar
-----------        barStyle={theme.isDark ? 'light-content' : 'dark-content'}
-----------        backgroundColor={theme.colors.surface}
-----------        translucent={Platform.OS === 'android'}
-----------      />
-----------      <View style={[getAppBarStyle(), style]}>
-----------        <View style={styles.content}>
-----------          {renderLeftContent()}
-----------          {renderTitle()}
-----------          {renderRightContent()}
----------+    <View style={[getAppBarStyle(), style]}>
----------+      <View style={styles.content}>
----------+        {renderLeftAction()}
----------+        
----------+        <View style={styles.titleContainer}>
----------+          {title && (
----------+            <Text style={[getTitleStyle(), titleStyle]}>
----------+              {title}
----------+            </Text>
----------+          )}
----------+          {subtitle && (
----------+            <Text style={[styles.subtitle, subtitleStyle]}>
----------+              {subtitle}
----------+            </Text>
----------+          )}
----------         </View>
----------+
----------+        {renderRightAction()}
----------       </View>
-----------    </>
----------+    </View>
----------   );
---------- };
---------- 
----------@@ -204,6 +159,17 @@ const styles = StyleSheet.create({
----------     alignItems: 'center',
----------     paddingHorizontal: 16,
----------   },
----------+  subtitle: {
----------+    fontSize: 14,
----------+    color: '#666666',
----------+    marginTop: 4,
----------+  },
----------+  iconButton: {
----------+    width: 40,
----------+    height: 40,
----------+    justifyContent: 'center',
----------+    alignItems: 'center',
----------+  },
----------   backIcon: {
----------     fontSize: 20,
----------     fontWeight: '600',
----------@@ -215,123 +181,4 @@ const styles = StyleSheet.create({
----------   },
---------- });
---------- 
-----------// AppBar espec√≠fico para telas principais
-----------export interface MainAppBarProps extends Omit<AppBarProps, 'title' | 'rightIcon'> {
-----------  user?: {
-----------    name: string;
-----------    avatar?: string;
-----------  };
-----------  notifications?: {
-----------    count: number;
-----------    onPress: () => void;
-----------  };
-----------  onProfilePress?: () => void;
-----------}
-----------
-----------export const MainAppBar: React.FC<MainAppBarProps> = ({
-----------  user,
-----------  notifications,
-----------  onProfilePress,
-----------  ...props
-----------}) => {
-----------  const renderProfileIcon = () => {
-----------    if (user?.avatar) {
-----------      return (
-----------        <View style={styles.avatarContainer}>
-----------          <Text style={styles.avatarText}>{user.avatar}</Text>
-----------        </View>
-----------      );
-----------    }
-----------    
-----------    return (
-----------      <TouchableOpacity 
-----------        style={styles.profileButton}
-----------        onPress={onProfilePress}
-----------      >
-----------        <Text style={styles.profileIcon}>üë§</Text>
-----------      </TouchableOpacity>
-----------    );
-----------  };
-----------      );
-----------    }
-----------
-----------    return (
-----------      <View style={[styles.avatarPlaceholder, { backgroundColor: theme.colors.primaryContainer }]}>
-----------        <Text style={[styles.avatarText, { color: theme.colors.onPrimaryContainer }]}>
-----------          {user?.name?.charAt(0).toUpperCase() || 'U'}
-----------        </Text>
-----------      </View>
-----------    );
-----------  };
-----------
-----------  const renderNotificationIcon = () => {
-----------    if (!notifications) return null;
-----------
-----------    return (
-----------      <View style={styles.notificationContainer}>
-----------        <Text style={styles.notificationIcon}>üîî</Text>
-----------        {notifications.count > 0 && (
-----------          <View style={[styles.notificationBadge, { backgroundColor: theme.colors.error }]}>
-----------            <Text style={[styles.notificationCount, { color: theme.colors.onError }]}>
-----------              {notifications.count > 99 ? '99+' : notifications.count}
-----------            </Text>
-----------          </View>
-----------        )}
-----------      </View>
-----------    );
-----------  };
-----------
-----------  return (
-----------    <AppBar
-----------      title={user?.name || 'Ol√°!'}
-----------      subtitle="Como posso ajudar?"
-----------      leftIcon={renderProfileIcon()}
-----------      rightIcon={renderNotificationIcon()}
-----------      onLeftIconPress={onProfilePress}
-----------      onRightIconPress={notifications?.onPress}
-----------      {...props}
-----------    />
-----------  );
-----------};
-----------
-----------const mainAppBarStyles = StyleSheet.create({
-----------  avatarContainer: {
-----------    width: 40,
-----------    height: 40,
-----------    borderRadius: 20,
-----------    alignItems: 'center',
-----------    justifyContent: 'center',
-----------  },
-----------  avatarPlaceholder: {
-----------    width: 40,
-----------    height: 40,
-----------    borderRadius: 20,
-----------    alignItems: 'center',
-----------    justifyContent: 'center',
-----------  },
-----------  avatarText: {
-----------    fontSize: 16,
-----------    fontWeight: '600',
-----------  },
-----------  notificationContainer: {
-----------    position: 'relative',
-----------    padding: 8,
-----------  },
-----------  notificationIcon: {
-----------    fontSize: 20,
-----------  },
-----------  notificationBadge: {
-----------    position: 'absolute',
-----------    top: 4,
-----------    right: 4,
-----------    minWidth: 16,
-----------    height: 16,
-----------    borderRadius: 8,
-----------    alignItems: 'center',
-----------    justifyContent: 'center',
-----------  },
-----------  notificationCount: {
-----------    fontSize: 10,
-----------    fontWeight: '600',
-----------  },
-----------});
----------+export default AppBar;
----------diff --git a/model.patch b/model.patch
----------index 848ad28..43dc5e7 100644
------------- a/model.patch
----------+++ b/model.patch
----------@@ -1,440 +0,0 @@
-----------diff --git a/frontend/components/FirebaseAnimatedMapView.tsx b/frontend/components/FirebaseAnimatedMapView.tsx
-----------new file mode 100644
-----------index 0000000..724e2dc
-------------- /dev/null
-----------+++ b/frontend/components/FirebaseAnimatedMapView.tsx
-----------@@ -0,0 +1,10 @@
-----------+import React from 'react';
-----------+import { View, Text } from 'react-native';
-----------+
-----------+export default function FirebaseAnimatedMapView() {
-----------+  return (
-----------+    <View>
-----------+      <Text>Mapa em desenvolvimento</Text>
-----------+    </View>
-----------+  );
-----------+}
-----------\ No newline at end of file
-----------diff --git a/model.patch b/model.patch
-----------index 4cffde5..e69de29 100644
-------------- a/model.patch
-----------+++ b/model.patch
-----------@@ -1,418 +0,0 @@
------------diff --git a/frontend/contexts/LocationContext.tsx b/frontend/contexts/LocationContext.tsx
------------index 29a46ee..450c451 100644
--------------- a/frontend/contexts/LocationContext.tsx
------------+++ b/frontend/contexts/LocationContext.tsx
------------@@ -1,98 +1,47 @@
-------------import React, { createContext, useContext, useState, ReactNode } from 'react';
-------------
-------------interface LocationData {
-------------  latitude: number;
-------------  longitude: number;
-------------  accuracy: number | null;
-------------  timestamp: number;
-------------}
------------+import React, { createContext, useContext, ReactNode } from 'react';
------------ 
------------ interface LocationContextData {
-------------  location: LocationData | null;
------------+  location: null;
------------   isLoading: boolean;
------------   hasPermission: boolean;
------------   requestPermissions: () => Promise<boolean>;
-------------  getCurrentLocation: () => Promise<LocationData | null>;
------------+  getCurrentLocation: () => Promise<null>;
------------   watchLocation: boolean;
------------   setWatchLocation: (watch: boolean) => void;
------------   locationError: string | null;
------------ }
------------ 
-------------const LocationContext = createContext<LocationContextData>({} as LocationContextData);
------------+const LocationContext = createContext<LocationContextData>({
------------+  location: null,
------------+  isLoading: false,
------------+  hasPermission: false,
------------+  requestPermissions: async () => false,
------------+  getCurrentLocation: async () => null,
------------+  watchLocation: false,
------------+  setWatchLocation: () => {},
------------+  locationError: null,
------------+});
------------ 
------------ export function useLocation(): LocationContextData {
-------------  const context = useContext(LocationContext);
-------------  if (!context) {
-------------    throw new Error('useLocation deve ser usado dentro de um LocationProvider');
-------------  }
-------------  return context;
-------------}
-------------
-------------interface LocationProviderProps {
-------------  children: ReactNode;
------------+  return useContext(LocationContext);
------------ }
------------ 
-------------export function LocationProvider({ children }: LocationProviderProps) {
-------------  const [location, setLocation] = useState<LocationData | null>(null);
-------------  const [isLoading, setIsLoading] = useState(false);
-------------  const [hasPermission, setHasPermission] = useState(false);
-------------  const [watchLocation, setWatchLocation] = useState(false);
-------------  const [locationError, setLocationError] = useState<string | null>(null);
-------------
-------------  const requestPermissions = async (): Promise<boolean> => {
-------------    // Implementa√ß√£o simplificada para funcionar
-------------    setHasPermission(true);
-------------    return true;
-------------  };
-------------
-------------  const getCurrentLocation = async (): Promise<LocationData | null> => {
-------------    // Mock de localiza√ß√£o para desenvolvimento
-------------    const mockLocation: LocationData = {
-------------      latitude: -23.5505,
-------------      longitude: -46.6333,
-------------      accuracy: 10,
-------------      timestamp: Date.now(),
-------------    };
-------------    setLocation(mockLocation);
-------------    return mockLocation;
------------+export function LocationProvider({ children }: { children: ReactNode }) {
------------+  const value = {
------------+    location: null,
------------+    isLoading: false,
------------+    hasPermission: false,
------------+    requestPermissions: async () => false,
------------+    getCurrentLocation: async () => null,
------------+    watchLocation: false,
------------+    setWatchLocation: () => {},
------------+    locationError: null,
------------   };
------------ 
------------   return (
-------------    <LocationContext.Provider
-------------      value={{
-------------        location,
-------------        isLoading,
-------------        hasPermission,
-------------        requestPermissions,
-------------        getCurrentLocation,
-------------        watchLocation,
-------------        setWatchLocation,
-------------        locationError,
-------------      }}
-------------    >
------------+    <LocationContext.Provider value={value}>
------------       {children}
------------     </LocationContext.Provider>
------------   );
------------ }
------------ 
-------------export function calculateDistance(
-------------  lat1: number,
-------------  lon1: number,
-------------  lat2: number,
-------------  lon2: number
-------------): number {
-------------  const R = 6371;
-------------  const dLat = toRadians(lat2 - lat1);
-------------  const dLon = toRadians(lon2 - lon1);
-------------  const a =
-------------    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
-------------    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
-------------    Math.sin(dLon / 2) * Math.sin(dLon / 2);
-------------  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
-------------  return R * c;
-------------}
-------------
-------------function toRadians(degrees: number): number {
-------------  return degrees * (Math.PI / 180);
-------------}
-------------
------------diff --git a/model.patch b/model.patch
------------index 4cd33b6..e69de29 100644
--------------- a/model.patch
------------+++ b/model.patch
------------@@ -1,285 +0,0 @@
-------------diff --git a/frontend/contexts/LocationContext.tsx b/frontend/contexts/LocationContext.tsx
-------------index 7265581..29a46ee 100644
---------------- a/frontend/contexts/LocationContext.tsx
-------------+++ b/frontend/contexts/LocationContext.tsx
-------------@@ -95,119 +95,4 @@ export function calculateDistance(
------------- function toRadians(degrees: number): number {
-------------   return degrees * (Math.PI / 180);
------------- }
--------------  const [location, setLocation] = useState<LocationData | null>(null);
--------------  const [isLoading, setIsLoading] = useState(false);
--------------  const [hasPermission, setHasPermission] = useState(false);
--------------  const [watchLocation, setWatchLocation] = useState(false);
--------------  const [locationError, setLocationError] = useState<string | null>(null);
--------------
--------------  // Solicitar permiss√µes de localiza√ß√£o
--------------  const requestPermissions = async (): Promise<boolean> => {
--------------    try {
--------------      setIsLoading(true);
--------------      
--------------      const { status } = await Location.requestForegroundPermissionsAsync();
--------------      const permission = status === 'granted';
--------------      
--------------      setHasPermission(permission);
--------------      
--------------      if (!permission) {
--------------        Alert.alert(
--------------          'Permiss√£o Negada',
--------------          'A permiss√£o de localiza√ß√£o √© necess√°ria para encontrar prestadores pr√≥ximos a voc√™.',
--------------          [{ text: 'OK' }]
--------------        );
--------------        setLocationError('Permiss√£o de localiza√ß√£o negada');
--------------      } else {
--------------        setLocationError(null);
--------------      }
--------------
--------------      return permission;
--------------    } catch (error) {
--------------      console.error('Erro ao solicitar permiss√µes de localiza√ß√£o:', error);
--------------      setLocationError('Erro ao solicitar permiss√µes');
--------------      return false;
--------------    } finally {
--------------      setIsLoading(false);
--------------    }
--------------  };
--------------
--------------  // Obter localiza√ß√£o atual
--------------  const getCurrentLocation = async (): Promise<LocationData | null> => {
--------------    try {
--------------      if (!hasPermission) {
--------------        const granted = await requestPermissions();
--------------        if (!granted) return null;
--------------      }
--------------
--------------      setIsLoading(true);
--------------      setLocationError(null);
--------------
--------------      const locationResult = await Location.getCurrentPositionAsync({
--------------        accuracy: Location.Accuracy.Balanced,
--------------      });
--------------
--------------      const locationData: LocationData = {
--------------        latitude: locationResult.coords.latitude,
--------------        longitude: locationResult.coords.longitude,
--------------        accuracy: locationResult.coords.accuracy,
--------------        timestamp: locationResult.timestamp,
--------------      };
--------------
--------------      setLocation(locationData);
--------------      return locationData;
--------------
--------------    } catch (error: any) {
--------------      console.error('Erro ao obter localiza√ß√£o:', error);
--------------      setLocationError('N√£o foi poss√≠vel obter sua localiza√ß√£o');
--------------      return null;
--------------    } finally {
--------------      setIsLoading(false);
--------------    }
--------------  };
--------------
--------------  // Efeitos
--------------  useEffect(() => {
--------------    Location.getForegroundPermissionsAsync().then(({ status }) => {
--------------      setHasPermission(status === 'granted');
--------------    });
--------------  }, []);
--------------
--------------  return (
--------------    <LocationContext.Provider
--------------      value={{
--------------        location,
--------------        isLoading,
--------------        hasPermission,
--------------        requestPermissions,
--------------        getCurrentLocation,
--------------        watchLocation,
--------------        setWatchLocation,
--------------        locationError,
--------------      }}
--------------    >
--------------      {children}
--------------    </LocationContext.Provider>
--------------  );
--------------}
--------------
--------------export function calculateDistance(
--------------  lat1: number,
--------------  lon1: number,
--------------  lat2: number,
--------------  lon2: number
--------------): number {
--------------  const R = 6371;
--------------  const dLat = toRadians(lat2 - lat1);
--------------  const dLon = toRadians(lon2 - lon1);
--------------  const a =
--------------    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
--------------    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
--------------    Math.sin(dLon / 2) * Math.sin(dLon / 2);
--------------  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
--------------  return R * c;
--------------}
------------- 
--------------function toRadians(degrees: number): number {
--------------  return degrees * (Math.PI / 180);
--------------}
-------------diff --git a/model.patch b/model.patch
-------------index 09bab19..e69de29 100644
---------------- a/model.patch
-------------+++ b/model.patch
-------------@@ -1,156 +0,0 @@
--------------diff --git a/frontend/app/index.tsx b/frontend/app/index.tsx
--------------index 469b15f..075f127 100644
----------------- a/frontend/app/index.tsx
--------------+++ b/frontend/app/index.tsx
--------------@@ -1,127 +1,41 @@
---------------import React, { useEffect, useRef, useState } from 'react';
---------------import { View, Text, StyleSheet, Animated, Easing } from 'react-native';
---------------import { Ionicons } from '@expo/vector-icons';
---------------import { useAuth } from '../contexts/AuthContext';
---------------import AuthScreen from './auth/index';
---------------import { useRouter } from 'expo-router';
--------------+import React from 'react';
--------------+import { View, Text, StyleSheet } from 'react-native';
-------------- 
-------------- export default function Index() {
---------------  const { user, isLoading, isAuthenticated } = useAuth();
---------------  const [showSplash, setShowSplash] = useState(true);
---------------  const router = useRouter();
---------------  
---------------  console.log('üîç [INDEX] Estado atual:', { 
---------------    isLoading, 
---------------    isAuthenticated, 
---------------    hasUser: !!user, 
---------------    userType: user?.user_type 
---------------  });
---------------
---------------  const scaleAnim = useRef(new Animated.Value(0)).current;
---------------  const fadeAnim = useRef(new Animated.Value(0)).current;
---------------
---------------  // TODOS OS HOOKS DEVEM ESTAR NO TOPO - ANTES DE QUALQUER RETURN
---------------  useEffect(() => {
---------------    // Se n√£o est√° carregando e j√° temos dados de auth, esconder splash
---------------    if (!isLoading) {
---------------      const timer = setTimeout(() => {
---------------        setShowSplash(false);
---------------      }, 2000); // 2 segundos de splash
---------------      
---------------      return () => clearTimeout(timer);
---------------    }
---------------  }, [isLoading]);
---------------
---------------  useEffect(() => {
---------------    if (showSplash) {
---------------      Animated.parallel([
---------------        Animated.timing(scaleAnim, {
---------------          toValue: 1,
---------------          duration: 800,
---------------          easing: Easing.elastic(1.2),
---------------          useNativeDriver: true,
---------------        }),
---------------        Animated.timing(fadeAnim, {
---------------          toValue: 1,
---------------          duration: 600,
---------------          useNativeDriver: true,
---------------        }),
---------------      ]).start();
---------------    }
---------------  }, [fadeAnim, scaleAnim, showSplash]);
---------------
---------------  // Hook para navega√ß√£o - DEVE ESTAR NO TOPO
---------------  useEffect(() => {
---------------    if (isAuthenticated && user && !showSplash && !isLoading) {
---------------      console.log('‚û°Ô∏è [INDEX] Redirecionando para UberStyleApp');
---------------      console.log('üè† [INDEX] Navegando para telas de home');
---------------      router.replace('/(tabs)');
---------------    }
---------------  }, [isAuthenticated, user, showSplash, isLoading, router]);
---------------
---------------  const SplashScreen = () => {
---------------    return (
---------------      <View style={styles.splashContainer}>
---------------        <Animated.View
---------------          style={[
---------------            styles.logoContainer,
---------------            {
---------------              transform: [{ scale: scaleAnim }],
---------------            },
---------------          ]}
---------------        >
---------------          <Ionicons name="construct" size={80} color="#007AFF" />
---------------        </Animated.View>
---------------        
---------------        <Animated.View style={[styles.textContainer, { opacity: fadeAnim }]}>
---------------          <Text style={styles.appName}>Servi√ßoApp</Text>
---------------          <Text style={styles.tagline}>üîß Conectando voc√™ aos melhores profissionais</Text>
---------------        </Animated.View>
---------------      </View>
---------------    );
---------------  };
---------------
---------------  // Mostrar splash screen enquanto est√° carregando ou durante anima√ß√£o
---------------  if (isLoading || showSplash) {
---------------    console.log('üîÑ [INDEX] Mostrando splash screen');
---------------    return <SplashScreen />;
---------------  }
---------------
---------------  if (!isAuthenticated || !user) {
---------------    console.log('‚ùå [INDEX] Usu√°rio n√£o autenticado, mostrando AuthScreen');
---------------    return <AuthScreen />;
---------------  }
---------------
---------------  console.log('‚úÖ [INDEX] Usu√°rio autenticado:', user.name, 'Tipo:', user.user_type);
---------------
---------------  // Show loading while navigating
---------------  return <SplashScreen />;
--------------+  return (
--------------+    <View style={styles.container}>
--------------+      <Text style={styles.title}>Servi√ßoApp</Text>
--------------+      <Text style={styles.subtitle}>Conectando voc√™ aos melhores profissionais</Text>
--------------+      <Text style={styles.status}>Frontend funcionando!</Text>
--------------+    </View>
--------------+  );
-------------- }
-------------- 
-------------- const styles = StyleSheet.create({
---------------  splashContainer: {
--------------+  container: {
--------------     flex: 1,
--------------     backgroundColor: '#ffffff',
--------------     justifyContent: 'center',
--------------     alignItems: 'center',
--------------+    padding: 20,
--------------   },
---------------  logoContainer: {
---------------    marginBottom: 30,
---------------    alignItems: 'center',
---------------  },
---------------  textContainer: {
---------------    alignItems: 'center',
---------------  },
---------------  appName: {
--------------+  title: {
--------------     fontSize: 32,
--------------     fontWeight: 'bold',
--------------     color: '#007AFF',
---------------    marginBottom: 8,
--------------+    marginBottom: 16,
--------------+    textAlign: 'center',
--------------   },
---------------  tagline: {
---------------    fontSize: 16,
--------------+  subtitle: {
--------------+    fontSize: 18,
--------------     color: '#666',
--------------     textAlign: 'center',
---------------    paddingHorizontal: 20,
--------------+    marginBottom: 24,
--------------+  },
--------------+  status: {
--------------+    fontSize: 16,
--------------+    color: '#28a745',
--------------+    fontWeight: '600',
--------------+    textAlign: 'center',
--------------   },
-------------- });
--------------\ No newline at end of file
